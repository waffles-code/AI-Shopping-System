define(['dart_sdk', 'packages/rflutter_alert/src/constants.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/rendering/layer.dart'], (function load__packages__rflutter_alert__src__alert_style_dart(dart_sdk, packages__rflutter_alert__src__constants$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__rendering__layer$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const constants = packages__rflutter_alert__src__constants$46dart.src__constants;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  var alert_style = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  var T = {
    _: () => T
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: constants.AnimationType.prototype,
        [_name]: "AnimationType.fromBottom",
        index: 3
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 200000
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 3707764736.0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.FontStyle.prototype,
        [_name$]: "FontStyle.normal",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 4
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: C[4] || CT.C4,
        [TextStyle_fontWeight]: C[5] || CT.C5,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[6] || CT.C6,
        [TextStyle_inherit]: true
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.center",
        index: 2
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 3
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: C[4] || CT.C4,
        [TextStyle_fontWeight]: C[9] || CT.C9,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[6] || CT.C6,
        [TextStyle_inherit]: true
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 20,
        [EdgeInsets_right]: 20,
        [EdgeInsets_top]: 20,
        [EdgeInsets_left]: 20
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: constants.ButtonsDirection.prototype,
        [_name]: "ButtonsDirection.row",
        index: 0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 24,
        [EdgeInsets_right]: 40,
        [EdgeInsets_top]: 24,
        [EdgeInsets_left]: 40
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    }
  }, false);
  var C = Array(14).fill(void 0);
  var I = [
    "file:///C:/Users/mmase/Apps/flutter/src/flutter/.pub-cache/hosted/pub.dartlang.org/rflutter_alert-2.0.2/lib/src/alert_style.dart",
    "package:rflutter_alert/src/alert_style.dart"
  ];
  var animationType$ = dart.privateName(alert_style, "AlertStyle.animationType");
  var animationDuration$ = dart.privateName(alert_style, "AlertStyle.animationDuration");
  var alertBorder$ = dart.privateName(alert_style, "AlertStyle.alertBorder");
  var isButtonVisible$ = dart.privateName(alert_style, "AlertStyle.isButtonVisible");
  var isCloseButton$ = dart.privateName(alert_style, "AlertStyle.isCloseButton");
  var isOverlayTapDismiss$ = dart.privateName(alert_style, "AlertStyle.isOverlayTapDismiss");
  var backgroundColor$ = dart.privateName(alert_style, "AlertStyle.backgroundColor");
  var overlayColor$ = dart.privateName(alert_style, "AlertStyle.overlayColor");
  var titleStyle$ = dart.privateName(alert_style, "AlertStyle.titleStyle");
  var descStyle$ = dart.privateName(alert_style, "AlertStyle.descStyle");
  var titleTextAlign$ = dart.privateName(alert_style, "AlertStyle.titleTextAlign");
  var descTextAlign$ = dart.privateName(alert_style, "AlertStyle.descTextAlign");
  var buttonAreaPadding$ = dart.privateName(alert_style, "AlertStyle.buttonAreaPadding");
  var constraints$ = dart.privateName(alert_style, "AlertStyle.constraints");
  var buttonsDirection$ = dart.privateName(alert_style, "AlertStyle.buttonsDirection");
  var alertElevation$ = dart.privateName(alert_style, "AlertStyle.alertElevation");
  var alertPadding$ = dart.privateName(alert_style, "AlertStyle.alertPadding");
  var alertAlignment$ = dart.privateName(alert_style, "AlertStyle.alertAlignment");
  var _name = dart.privateName(constants, "_name");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var Color_value = dart.privateName(ui, "Color.value");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var _name$ = dart.privateName(ui, "_name");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  alert_style.AlertStyle = class AlertStyle extends core.Object {
    get animationType() {
      return this[animationType$];
    }
    set animationType(value) {
      super.animationType = value;
    }
    get animationDuration() {
      return this[animationDuration$];
    }
    set animationDuration(value) {
      super.animationDuration = value;
    }
    get alertBorder() {
      return this[alertBorder$];
    }
    set alertBorder(value) {
      super.alertBorder = value;
    }
    get isButtonVisible() {
      return this[isButtonVisible$];
    }
    set isButtonVisible(value) {
      super.isButtonVisible = value;
    }
    get isCloseButton() {
      return this[isCloseButton$];
    }
    set isCloseButton(value) {
      super.isCloseButton = value;
    }
    get isOverlayTapDismiss() {
      return this[isOverlayTapDismiss$];
    }
    set isOverlayTapDismiss(value) {
      super.isOverlayTapDismiss = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get overlayColor() {
      return this[overlayColor$];
    }
    set overlayColor(value) {
      super.overlayColor = value;
    }
    get titleStyle() {
      return this[titleStyle$];
    }
    set titleStyle(value) {
      super.titleStyle = value;
    }
    get descStyle() {
      return this[descStyle$];
    }
    set descStyle(value) {
      super.descStyle = value;
    }
    get titleTextAlign() {
      return this[titleTextAlign$];
    }
    set titleTextAlign(value) {
      super.titleTextAlign = value;
    }
    get descTextAlign() {
      return this[descTextAlign$];
    }
    set descTextAlign(value) {
      super.descTextAlign = value;
    }
    get buttonAreaPadding() {
      return this[buttonAreaPadding$];
    }
    set buttonAreaPadding(value) {
      super.buttonAreaPadding = value;
    }
    get constraints() {
      return this[constraints$];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get buttonsDirection() {
      return this[buttonsDirection$];
    }
    set buttonsDirection(value) {
      super.buttonsDirection = value;
    }
    get alertElevation() {
      return this[alertElevation$];
    }
    set alertElevation(value) {
      super.alertElevation = value;
    }
    get alertPadding() {
      return this[alertPadding$];
    }
    set alertPadding(value) {
      super.alertPadding = value;
    }
    get alertAlignment() {
      return this[alertAlignment$];
    }
    set alertAlignment(value) {
      super.alertAlignment = value;
    }
  };
  (alert_style.AlertStyle.new = function(opts) {
    let animationType = opts && 'animationType' in opts ? opts.animationType : C[0] || CT.C0;
    if (animationType == null) dart.nullFailed(I[0], 53, 10, "animationType");
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[1] || CT.C1;
    if (animationDuration == null) dart.nullFailed(I[0], 54, 10, "animationDuration");
    let alertBorder = opts && 'alertBorder' in opts ? opts.alertBorder : null;
    let isButtonVisible = opts && 'isButtonVisible' in opts ? opts.isButtonVisible : true;
    if (isButtonVisible == null) dart.nullFailed(I[0], 56, 10, "isButtonVisible");
    let isCloseButton = opts && 'isCloseButton' in opts ? opts.isCloseButton : true;
    if (isCloseButton == null) dart.nullFailed(I[0], 57, 10, "isCloseButton");
    let isOverlayTapDismiss = opts && 'isOverlayTapDismiss' in opts ? opts.isOverlayTapDismiss : true;
    if (isOverlayTapDismiss == null) dart.nullFailed(I[0], 58, 10, "isOverlayTapDismiss");
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : C[2] || CT.C2;
    if (overlayColor == null) dart.nullFailed(I[0], 60, 10, "overlayColor");
    let titleStyle = opts && 'titleStyle' in opts ? opts.titleStyle : C[3] || CT.C3;
    if (titleStyle == null) dart.nullFailed(I[0], 61, 10, "titleStyle");
    let titleTextAlign = opts && 'titleTextAlign' in opts ? opts.titleTextAlign : C[7] || CT.C7;
    if (titleTextAlign == null) dart.nullFailed(I[0], 65, 10, "titleTextAlign");
    let descStyle = opts && 'descStyle' in opts ? opts.descStyle : C[8] || CT.C8;
    if (descStyle == null) dart.nullFailed(I[0], 66, 10, "descStyle");
    let descTextAlign = opts && 'descTextAlign' in opts ? opts.descTextAlign : C[7] || CT.C7;
    if (descTextAlign == null) dart.nullFailed(I[0], 70, 10, "descTextAlign");
    let buttonAreaPadding = opts && 'buttonAreaPadding' in opts ? opts.buttonAreaPadding : C[10] || CT.C10;
    if (buttonAreaPadding == null) dart.nullFailed(I[0], 71, 10, "buttonAreaPadding");
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let buttonsDirection = opts && 'buttonsDirection' in opts ? opts.buttonsDirection : C[11] || CT.C11;
    if (buttonsDirection == null) dart.nullFailed(I[0], 73, 10, "buttonsDirection");
    let alertElevation = opts && 'alertElevation' in opts ? opts.alertElevation : null;
    let alertPadding = opts && 'alertPadding' in opts ? opts.alertPadding : C[12] || CT.C12;
    if (alertPadding == null) dart.nullFailed(I[0], 75, 10, "alertPadding");
    let alertAlignment = opts && 'alertAlignment' in opts ? opts.alertAlignment : C[13] || CT.C13;
    if (alertAlignment == null) dart.nullFailed(I[0], 76, 10, "alertAlignment");
    this[animationType$] = animationType;
    this[animationDuration$] = animationDuration;
    this[alertBorder$] = alertBorder;
    this[isButtonVisible$] = isButtonVisible;
    this[isCloseButton$] = isCloseButton;
    this[isOverlayTapDismiss$] = isOverlayTapDismiss;
    this[backgroundColor$] = backgroundColor;
    this[overlayColor$] = overlayColor;
    this[titleStyle$] = titleStyle;
    this[titleTextAlign$] = titleTextAlign;
    this[descStyle$] = descStyle;
    this[descTextAlign$] = descTextAlign;
    this[buttonAreaPadding$] = buttonAreaPadding;
    this[constraints$] = constraints;
    this[buttonsDirection$] = buttonsDirection;
    this[alertElevation$] = alertElevation;
    this[alertPadding$] = alertPadding;
    this[alertAlignment$] = alertAlignment;
    ;
  }).prototype = alert_style.AlertStyle.prototype;
  dart.addTypeTests(alert_style.AlertStyle);
  dart.addTypeCaches(alert_style.AlertStyle);
  dart.setLibraryUri(alert_style.AlertStyle, I[1]);
  dart.setFieldSignature(alert_style.AlertStyle, () => ({
    __proto__: dart.getFields(alert_style.AlertStyle.__proto__),
    animationType: dart.finalFieldType(constants.AnimationType),
    animationDuration: dart.finalFieldType(core.Duration),
    alertBorder: dart.finalFieldType(dart.nullable(borders.ShapeBorder)),
    isButtonVisible: dart.finalFieldType(core.bool),
    isCloseButton: dart.finalFieldType(core.bool),
    isOverlayTapDismiss: dart.finalFieldType(core.bool),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    overlayColor: dart.finalFieldType(ui.Color),
    titleStyle: dart.finalFieldType(text_style.TextStyle),
    descStyle: dart.finalFieldType(text_style.TextStyle),
    titleTextAlign: dart.finalFieldType(ui.TextAlign),
    descTextAlign: dart.finalFieldType(ui.TextAlign),
    buttonAreaPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    constraints: dart.finalFieldType(dart.nullable(box.BoxConstraints)),
    buttonsDirection: dart.finalFieldType(constants.ButtonsDirection),
    alertElevation: dart.finalFieldType(dart.nullable(core.double)),
    alertPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    alertAlignment: dart.finalFieldType(alignment.AlignmentGeometry)
  }));
  dart.trackLibraries("packages/rflutter_alert/src/alert_style.dart", {
    "package:rflutter_alert/src/alert_style.dart": alert_style
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["alert_style.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAcsB;;;;;;IACL;;;;;;IACI;;;;;;IACR;;;;;;IACA;;;;;;IACA;;;;;;IACE;;;;;;IACD;;;;;;IACI;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACC;;;;;;IACK;;;;;;IACC;;;;;;IACT;;;;;;IACG;;;;;;IACO;;;;;;;;QAqBjB;;QACA;;QACA;QACA;;QACA;;QACA;;QACA;QACA;;QACA;;QAIA;;QACA;;QAIA;;QACA;;QACA;QACA;;QACA;QACA;;QACA;;IAvBA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAIA;IACA;IAIA;IACA;IACA;IACA;IACA;IACA;IACA;;EACL","file":"../../../../../../../../../../../../packages/rflutter_alert/src/alert_style.dart.lib.js"}');
  // Exports:
  return {
    src__alert_style: alert_style
  };
}));

//# sourceMappingURL=alert_style.dart.lib.js.map
