define(['dart_sdk', 'packages/cloud_firestore_platform_interface/src/platform_interface/platform_interface_load_bundle_task.dart', 'packages/cloud_firestore_platform_interface/src/platform_interface/utils/load_bundle_task_state.dart', 'packages/cloud_firestore_platform_interface/src/load_bundle_task_state.dart', 'packages/cloud_firestore_platform_interface/src/field_path.dart', 'packages/cloud_firestore_platform_interface/src/get_options.dart', 'packages/cloud_firestore_platform_interface/src/source.dart', 'packages/collection/src/equality.dart', 'packages/cloud_firestore_platform_interface/src/set_options.dart', 'packages/cloud_firestore_platform_interface/src/platform_interface/platform_interface_field_value.dart', 'packages/firebase_core/firebase_core.dart', 'packages/firebase_core_platform_interface/firebase_core_platform_interface.dart', 'packages/cloud_firestore_platform_interface/src/persistence_settings.dart', 'packages/cloud_firestore_platform_interface/src/settings.dart', 'packages/cloud_firestore_platform_interface/src/snapshot_metadata.dart'], (function load__packages__cloud_firestore__cloud_firestore_dart(dart_sdk, packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_load_bundle_task$46dart, packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart, packages__cloud_firestore_platform_interface__src__load_bundle_task_state$46dart, packages__cloud_firestore_platform_interface__src__field_path$46dart, packages__cloud_firestore_platform_interface__src__get_options$46dart, packages__cloud_firestore_platform_interface__src__source$46dart, packages__collection__src__equality$46dart, packages__cloud_firestore_platform_interface__src__set_options$46dart, packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_field_value$46dart, packages__firebase_core__firebase_core$46dart, packages__firebase_core_platform_interface__firebase_core_platform_interface$46dart, packages__cloud_firestore_platform_interface__src__persistence_settings$46dart, packages__cloud_firestore_platform_interface__src__settings$46dart, packages__cloud_firestore_platform_interface__src__snapshot_metadata$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const typed_data = dart_sdk.typed_data;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const platform_interface_load_bundle_task = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_load_bundle_task$46dart.src__platform_interface__platform_interface_load_bundle_task;
  const platform_interface_load_bundle_task_snapshot = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_load_bundle_task_snapshot;
  const platform_interface_collection_reference = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_collection_reference;
  const platform_interface_query = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_query;
  const platform_interface_query_snapshot = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_query_snapshot;
  const platform_interface_document_change = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_document_change;
  const platform_interface_document_reference = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_document_reference;
  const cloud_firestore_platform_interface = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.cloud_firestore_platform_interface;
  const platform_interface_document_snapshot = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_document_snapshot;
  const platform_interface_field_value_factory = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_field_value_factory;
  const platform_interface_firestore = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_firestore;
  const platform_interface_transaction = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_transaction;
  const platform_interface_write_batch = packages__cloud_firestore_platform_interface__src__platform_interface__utils__load_bundle_task_state$46dart.src__platform_interface__platform_interface_write_batch;
  const load_bundle_task_state = packages__cloud_firestore_platform_interface__src__load_bundle_task_state$46dart.src__load_bundle_task_state;
  const field_path = packages__cloud_firestore_platform_interface__src__field_path$46dart.src__field_path;
  const get_options = packages__cloud_firestore_platform_interface__src__get_options$46dart.src__get_options;
  const source = packages__cloud_firestore_platform_interface__src__source$46dart.src__source;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const set_options = packages__cloud_firestore_platform_interface__src__set_options$46dart.src__set_options;
  const platform_interface_field_value = packages__cloud_firestore_platform_interface__src__platform_interface__platform_interface_field_value$46dart.src__platform_interface__platform_interface_field_value;
  const firebase_core = packages__firebase_core__firebase_core$46dart.firebase_core;
  const firebase_core_platform_interface = packages__firebase_core_platform_interface__firebase_core_platform_interface$46dart.firebase_core_platform_interface;
  const persistence_settings = packages__cloud_firestore_platform_interface__src__persistence_settings$46dart.src__persistence_settings;
  const settings = packages__cloud_firestore_platform_interface__src__settings$46dart.src__settings;
  const snapshot_metadata = packages__cloud_firestore_platform_interface__src__snapshot_metadata$46dart.src__snapshot_metadata;
  var cloud_firestore = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $contains = dartx.contains;
  var $runtimeType = dartx.runtimeType;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $last = dartx.last;
  var $length = dartx.length;
  var $isEmpty = dartx.isEmpty;
  var $where = dartx.where;
  var $hashCode = dartx.hashCode;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $updateAll = dartx.updateAll;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    dynamicToLoadBundleTaskSnapshot: () => (T$.dynamicToLoadBundleTaskSnapshot = dart.constFn(dart.fnType(cloud_firestore.LoadBundleTaskSnapshot, [dart.dynamic])))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    DocumentReferenceOfMapOfString$dynamic: () => (T$.DocumentReferenceOfMapOfString$dynamic = dart.constFn(cloud_firestore.DocumentReference$(T$.MapOfString$dynamic())))(),
    ListOfList: () => (T$.ListOfList = dart.constFn(core.List$(core.List)))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    ListOfListOfObjectN: () => (T$.ListOfListOfObjectN = dart.constFn(core.List$(T$.ListOfObjectN())))(),
    QuerySnapshotOfMapOfString$dynamic: () => (T$.QuerySnapshotOfMapOfString$dynamic = dart.constFn(cloud_firestore.QuerySnapshot$(T$.MapOfString$dynamic())))(),
    QuerySnapshotPlatformTo_JsonQuerySnapshot: () => (T$.QuerySnapshotPlatformTo_JsonQuerySnapshot = dart.constFn(dart.fnType(cloud_firestore._JsonQuerySnapshot, [platform_interface_query_snapshot.QuerySnapshotPlatform])))(),
    ListTobool: () => (T$.ListTobool = dart.constFn(dart.fnType(core.bool, [core.List])))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    dynamicAndStringAnddynamicTovoid: () => (T$.dynamicAndStringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, core.String, dart.dynamic])))(),
    dynamicTobool: () => (T$.dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))(),
    CollectionReferenceOfMapOfString$dynamic: () => (T$.CollectionReferenceOfMapOfString$dynamic = dart.constFn(cloud_firestore.CollectionReference$(T$.MapOfString$dynamic())))(),
    MapOfString$ObjectN: () => (T$.MapOfString$ObjectN = dart.constFn(core.Map$(core.String, T$.ObjectN())))(),
    SetOptionsN: () => (T$.SetOptionsN = dart.constFn(dart.nullable(set_options.SetOptions)))(),
    DocumentSnapshotOfMapOfString$dynamic: () => (T$.DocumentSnapshotOfMapOfString$dynamic = dart.constFn(cloud_firestore.DocumentSnapshot$(T$.MapOfString$dynamic())))(),
    DocumentSnapshotPlatformTo_JsonDocumentSnapshot: () => (T$.DocumentSnapshotPlatformTo_JsonDocumentSnapshot = dart.constFn(dart.fnType(cloud_firestore._JsonDocumentSnapshot, [platform_interface_document_snapshot.DocumentSnapshotPlatform])))(),
    DocumentReferenceOfObjectN: () => (T$.DocumentReferenceOfObjectN = dart.constFn(cloud_firestore.DocumentReference$(T$.ObjectN())))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    TransactionPlatformToFutureOfNull: () => (T$.TransactionPlatformToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [platform_interface_transaction.TransactionPlatform])))(),
    IdentityMapOfString$FirebaseFirestore: () => (T$.IdentityMapOfString$FirebaseFirestore = dart.constFn(_js_helper.IdentityMap$(core.String, cloud_firestore.FirebaseFirestore)))(),
    DocumentSnapshotPlatformTo_JsonQueryDocumentSnapshot: () => (T$.DocumentSnapshotPlatformTo_JsonQueryDocumentSnapshot = dart.constFn(dart.fnType(cloud_firestore._JsonQueryDocumentSnapshot, [platform_interface_document_snapshot.DocumentSnapshotPlatform])))(),
    DocumentChangePlatformTo_JsonDocumentChange: () => (T$.DocumentChangePlatformTo_JsonDocumentChange = dart.constFn(dart.fnType(cloud_firestore._JsonDocumentChange, [platform_interface_document_change.DocumentChangePlatform])))(),
    LinkedHashMapOfString$dynamic: () => (T$.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(core.String, dart.dynamic)))(),
    StringAnddynamicTodynamic: () => (T$.StringAnddynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.String, dart.dynamic])))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: source.Source.prototype,
        [_name]: "Source.serverAndCache",
        index: 0
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: get_options.GetOptions.prototype,
        [GetOptions_source]: C[1] || CT.C1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: equality.ListEquality.prototype,
        [ListEquality__elementEquality]: C[3] || CT.C3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 30000000
      });
    },
    get C5() {
      return C[5] = dart.fn(cloud_firestore._CodecUtility.valueEncode, T$.dynamicTodynamic());
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/load_bundle_task.dart",
    "package:cloud_firestore/cloud_firestore.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/load_bundle_task_snapshot.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/collection_reference.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/query.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/document_change.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/document_reference.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/document_snapshot.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/field_value.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/firestore.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/query_document_snapshot.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/query_snapshot.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/snapshot_metadata.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/transaction.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/utils/codec_utility.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/cloud_firestore-2.2.0/lib/src/write_batch.dart"
  ];
  var __LoadBundleTask_stream = dart.privateName(cloud_firestore, "_#LoadBundleTask#stream");
  var _delegate$ = dart.privateName(cloud_firestore, "_delegate");
  cloud_firestore.LoadBundleTask = class LoadBundleTask extends core.Object {
    get stream() {
      let t1, t0;
      t0 = this[__LoadBundleTask_stream];
      return t0 == null ? (t1 = this[_delegate$].stream.map(cloud_firestore.LoadBundleTaskSnapshot, dart.fn(event => new cloud_firestore.LoadBundleTaskSnapshot.__(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform.as(event)), T$.dynamicToLoadBundleTaskSnapshot())), this[__LoadBundleTask_stream] == null ? this[__LoadBundleTask_stream] = t1 : dart.throw(new _internal.LateError.fieldADI("stream"))) : t0;
    }
  };
  (cloud_firestore.LoadBundleTask.__ = function(_delegate) {
    if (_delegate == null) dart.nullFailed(I[0], 4, 25, "_delegate");
    this[__LoadBundleTask_stream] = null;
    this[_delegate$] = _delegate;
    platform_interface_load_bundle_task.LoadBundleTaskPlatform.verifyExtends(this[_delegate$]);
  }).prototype = cloud_firestore.LoadBundleTask.prototype;
  dart.addTypeTests(cloud_firestore.LoadBundleTask);
  dart.addTypeCaches(cloud_firestore.LoadBundleTask);
  dart.setGetterSignature(cloud_firestore.LoadBundleTask, () => ({
    __proto__: dart.getGetters(cloud_firestore.LoadBundleTask.__proto__),
    stream: async.Stream$(cloud_firestore.LoadBundleTaskSnapshot)
  }));
  dart.setLibraryUri(cloud_firestore.LoadBundleTask, I[1]);
  dart.setFieldSignature(cloud_firestore.LoadBundleTask, () => ({
    __proto__: dart.getFields(cloud_firestore.LoadBundleTask.__proto__),
    [_delegate$]: dart.finalFieldType(platform_interface_load_bundle_task.LoadBundleTaskPlatform),
    [__LoadBundleTask_stream]: dart.fieldType(dart.nullable(async.Stream$(cloud_firestore.LoadBundleTaskSnapshot)))
  }));
  cloud_firestore.LoadBundleTaskSnapshot = class LoadBundleTaskSnapshot extends core.Object {
    get bytesLoaded() {
      return this[_delegate$].bytesLoaded;
    }
    get documentsLoaded() {
      return this[_delegate$].documentsLoaded;
    }
    get taskState() {
      return this[_delegate$].taskState;
    }
    get totalBytes() {
      return this[_delegate$].totalBytes;
    }
    get totalDocuments() {
      return this[_delegate$].totalDocuments;
    }
  };
  (cloud_firestore.LoadBundleTaskSnapshot.__ = function(_delegate) {
    if (_delegate == null) dart.nullFailed(I[2], 9, 33, "_delegate");
    this[_delegate$] = _delegate;
    platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform.verifyExtends(this[_delegate$]);
  }).prototype = cloud_firestore.LoadBundleTaskSnapshot.prototype;
  dart.addTypeTests(cloud_firestore.LoadBundleTaskSnapshot);
  dart.addTypeCaches(cloud_firestore.LoadBundleTaskSnapshot);
  dart.setGetterSignature(cloud_firestore.LoadBundleTaskSnapshot, () => ({
    __proto__: dart.getGetters(cloud_firestore.LoadBundleTaskSnapshot.__proto__),
    bytesLoaded: core.int,
    documentsLoaded: core.int,
    taskState: load_bundle_task_state.LoadBundleTaskState,
    totalBytes: core.int,
    totalDocuments: core.int
  }));
  dart.setLibraryUri(cloud_firestore.LoadBundleTaskSnapshot, I[1]);
  dart.setFieldSignature(cloud_firestore.LoadBundleTaskSnapshot, () => ({
    __proto__: dart.getFields(cloud_firestore.LoadBundleTaskSnapshot.__proto__),
    [_delegate$]: dart.fieldType(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform)
  }));
  const _is_CollectionReference_default = Symbol('_is_CollectionReference_default');
  cloud_firestore.CollectionReference$ = dart.generic(T => {
    class CollectionReference extends core.Object {}
    (CollectionReference.new = function() {
      ;
    }).prototype = CollectionReference.prototype;
    dart.addTypeTests(CollectionReference);
    CollectionReference.prototype[_is_CollectionReference_default] = true;
    dart.addTypeCaches(CollectionReference);
    CollectionReference[dart.implements] = () => [cloud_firestore.Query$(T)];
    dart.setLibraryUri(CollectionReference, I[1]);
    return CollectionReference;
  });
  cloud_firestore.CollectionReference = cloud_firestore.CollectionReference$();
  dart.addTypeTests(cloud_firestore.CollectionReference, _is_CollectionReference_default);
  var _delegate$0 = dart.privateName(cloud_firestore, "_JsonQuery._delegate");
  var _hasStartCursor = dart.privateName(cloud_firestore, "_hasStartCursor");
  var _hasEndCursor = dart.privateName(cloud_firestore, "_hasEndCursor");
  var _isInequality = dart.privateName(cloud_firestore, "_isInequality");
  var _assertQueryCursorSnapshot = dart.privateName(cloud_firestore, "_assertQueryCursorSnapshot");
  var _assertQueryCursorValues = dart.privateName(cloud_firestore, "_assertQueryCursorValues");
  var _assertValidFieldType = dart.privateName(cloud_firestore, "_assertValidFieldType");
  var _name = dart.privateName(source, "_name");
  var GetOptions_source = dart.privateName(get_options, "GetOptions.source");
  var ListEquality__elementEquality = dart.privateName(equality, "ListEquality._elementEquality");
  cloud_firestore._JsonQuery = class _JsonQuery extends core.Object {
    get [_delegate$]() {
      return this[_delegate$0];
    }
    set [_delegate$](value) {
      super[_delegate$] = value;
    }
    get parameters() {
      return this[_delegate$].parameters;
    }
    [_hasStartCursor]() {
      return this.parameters[$_get]("startAt") != null || this.parameters[$_get]("startAfter") != null;
    }
    [_hasEndCursor]() {
      return this.parameters[$_get]("endAt") != null || this.parameters[$_get]("endBefore") != null;
    }
    [_isInequality](operator) {
      if (operator == null) dart.nullFailed(I[4], 227, 29, "operator");
      return operator === "<" || operator === "<=" || operator === ">" || operator === ">=" || operator === "!=";
    }
    [_assertQueryCursorSnapshot](documentSnapshot) {
      if (documentSnapshot == null) dart.nullFailed(I[4], 242, 22, "documentSnapshot");
      if (!dart.test(documentSnapshot.exists)) dart.assertFailed("a document snapshot must exist to be used within a query", I[4], 245, 7, "documentSnapshot.exists");
      let orders = T$.ListOfList().from(core.Iterable.as(this.parameters[$_get]("orderBy")));
      let values = [];
      for (let order of orders) {
        let field = order[$_get](0);
        if (!dart.equals(field, field_path.FieldPath.documentId)) {
          try {
            values[$add](documentSnapshot.get(core.Object.as(field)));
          } catch (e) {
            let ex = dart.getThrown(e);
            if (core.StateError.is(ex)) {
              dart.throw("You are trying to start or end a query using a document for which the field '" + dart.str(field) + "' (used as the orderBy) does not exist.");
            } else
              throw e;
          }
        }
      }
      if (dart.test(orders[$isNotEmpty])) {
        let lastOrder = orders[$last];
        if (!dart.equals(lastOrder[$_get](0), field_path.FieldPath.documentId)) {
          orders[$add]([field_path.FieldPath.documentId, lastOrder[$_get](1)]);
        }
      } else {
        orders[$add]([field_path.FieldPath.documentId, false]);
      }
      if (dart.test(this[_delegate$].isCollectionGroupQuery)) {
        values[$add](documentSnapshot.reference.path);
      } else {
        values[$add](documentSnapshot.id);
      }
      return new (T$.IdentityMapOfString$dynamic()).from(["orders", orders, "values", values]);
    }
    [_assertQueryCursorValues](fields) {
      if (fields == null) dart.nullFailed(I[4], 291, 56, "fields");
      let orders = T$.ListOfListOfObjectN().from(core.Iterable.as(this.parameters[$_get]("orderBy")));
      if (!(dart.notNull(fields[$length]) <= dart.notNull(orders[$length]))) dart.assertFailed("Too many arguments provided. " + "The number of arguments must be less than or equal to the number of orderBy() clauses.", I[4], 295, 7, "fields.length <= orders.length");
      return fields;
    }
    [_assertValidFieldType](field) {
      if (field == null) dart.nullFailed(I[4], 304, 37, "field");
      if (!(typeof field == 'string' || field_path.FieldPath.is(field) || dart.equals(field, field_path.FieldPath.documentId))) dart.assertFailed("Supported [field] types are [String] and [FieldPath].", I[4], 306, 7, "field is String || field is FieldPath || field == FieldPath.documentId");
    }
    endAtDocument(documentSnapshot) {
      if (documentSnapshot == null) dart.nullFailed(I[4], 326, 62, "documentSnapshot");
      let results = this[_assertQueryCursorSnapshot](documentSnapshot);
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].endAtDocument(core.List.as(results[$_get]("orders")), core.List.as(results[$_get]("values"))));
    }
    endAt(values) {
      if (values == null) dart.nullFailed(I[4], 341, 51, "values");
      this[_assertQueryCursorValues](values);
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].endAt(values));
    }
    endBeforeDocument(documentSnapshot) {
      if (documentSnapshot == null) dart.nullFailed(I[4], 354, 22, "documentSnapshot");
      let results = this[_assertQueryCursorSnapshot](documentSnapshot);
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].endBeforeDocument(core.List.as(results[$_get]("orders")), core.List.as(results[$_get]("values"))));
    }
    endBefore(values) {
      if (values == null) dart.nullFailed(I[4], 370, 55, "values");
      this[_assertQueryCursorValues](values);
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].endBefore(values));
    }
    get(options = null) {
      return async.async(T$.QuerySnapshotOfMapOfString$dynamic(), (function* get() {
        let t2;
        let snapshotDelegate = (yield this[_delegate$].get((t2 = options, t2 == null ? C[0] || CT.C0 : t2)));
        return new cloud_firestore._JsonQuerySnapshot.new(this.firestore, snapshotDelegate);
      }).bind(this));
    }
    limit(limit) {
      if (limit == null) dart.nullFailed(I[4], 392, 41, "limit");
      if (!(dart.notNull(limit) > 0)) dart.assertFailed("limit must be a positive number greater than 0", I[4], 393, 12, "limit > 0");
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].limit(limit));
    }
    limitToLast(limit) {
      if (limit == null) dart.nullFailed(I[4], 402, 47, "limit");
      if (!(dart.notNull(limit) > 0)) dart.assertFailed("limit must be a positive number greater than 0", I[4], 403, 12, "limit > 0");
      let orders = T$.ListOfList().from(core.Iterable.as(this.parameters[$_get]("orderBy")));
      if (!dart.test(orders[$isNotEmpty])) dart.assertFailed("limitToLast() queries require specifying at least one orderBy() clause", I[4], 406, 7, "orders.isNotEmpty");
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].limitToLast(limit));
    }
    snapshots(opts) {
      let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
      if (includeMetadataChanges == null) dart.nullFailed(I[4], 415, 10, "includeMetadataChanges");
      return this[_delegate$].snapshots({includeMetadataChanges: includeMetadataChanges}).map(T$.QuerySnapshotOfMapOfString$dynamic(), dart.fn(item => {
        if (item == null) dart.nullFailed(I[4], 419, 15, "item");
        return new cloud_firestore._JsonQuerySnapshot.new(this.firestore, item);
      }, T$.QuerySnapshotPlatformTo_JsonQuerySnapshot()));
    }
    orderBy(field, opts) {
      if (field == null) dart.nullFailed(I[4], 435, 12, "field");
      let descending = opts && 'descending' in opts ? opts.descending : false;
      if (descending == null) dart.nullFailed(I[4], 436, 10, "descending");
      this[_assertValidFieldType](field);
      if (!!dart.test(this[_hasStartCursor]())) dart.assertFailed("Invalid query. " + "You must not call startAt(), startAtDocument(), " + "startAfter() or startAfterDocument() before calling orderBy()", I[4], 440, 7, "!_hasStartCursor()");
      if (!!dart.test(this[_hasEndCursor]())) dart.assertFailed("Invalid query. " + "You must not call endAt(), endAtDocument(), " + "endBefore() or endBeforeDocument() before calling orderBy()", I[4], 446, 7, "!_hasEndCursor()");
      let orders = T$.ListOfList().from(core.Iterable.as(this.parameters[$_get]("orderBy")));
      if (!dart.test(orders[$where](dart.fn(item => {
        if (item == null) dart.nullFailed(I[4], 456, 35, "item");
        return dart.equals(field, item[$_get](0));
      }, T$.ListTobool()))[$isEmpty])) dart.assertFailed("OrderBy field \"" + dart.str(field) + "\" already exists in this query", I[4], 456, 7, "orders.where((List<dynamic> item) => field == item[0]).isEmpty");
      if (dart.equals(field, field_path.FieldPath.documentId)) {
        orders[$add]([field, descending]);
      } else {
        let fieldPath = typeof field == 'string' ? new field_path.FieldPath.fromString(field) : field_path.FieldPath.as(field);
        orders[$add]([fieldPath, descending]);
      }
      let conditions = T$.ListOfList().from(core.Iterable.as(this.parameters[$_get]("where")));
      if (dart.test(conditions[$isNotEmpty])) {
        for (let condition of conditions) {
          let field = dart.dsend(condition, '_get', [0]);
          let operator = core.String.as(dart.dsend(condition, '_get', [1]));
          if (dart.test(this[_isInequality](operator))) {
            if (!dart.equals(field, orders[$_get](0)[$_get](0))) dart.assertFailed("The initial orderBy() field \"" + dart.str(orders) + "[0][0]\" has to be the same as " + "the where() field parameter \"" + dart.str(field) + "\" when an inequality operator is invoked.", I[4], 480, 13, "field == orders[0][0]");
          }
          for (let order of orders) {
            let orderField = dart.dsend(order, '_get', [0]);
            if (operator === "==") {
              if (!!dart.equals(field, orderField)) dart.assertFailed("The '" + dart.str(orderField) + "' cannot be the same as your where() field parameter '" + dart.str(field) + "'.", I[4], 493, 15, "field != orderField");
            }
            if (dart.equals(field, field_path.FieldPath.documentId)) {
              if (!dart.equals(orderField, field_path.FieldPath.documentId)) dart.assertFailed("'[FieldPath.documentId]' cannot be used in conjunction with a different orderBy() parameter.", I[4], 500, 15, "orderField == FieldPath.documentId");
            }
          }
        }
      }
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].orderBy(orders));
    }
    startAfterDocument(documentSnapshot) {
      if (documentSnapshot == null) dart.nullFailed(I[4], 519, 22, "documentSnapshot");
      let results = this[_assertQueryCursorSnapshot](documentSnapshot);
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].startAfterDocument(core.List.as(results[$_get]("orders")), core.List.as(results[$_get]("values"))));
    }
    startAfter(values) {
      if (values == null) dart.nullFailed(I[4], 536, 56, "values");
      this[_assertQueryCursorValues](values);
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].startAfter(values));
    }
    startAtDocument(documentSnapshot) {
      if (documentSnapshot == null) dart.nullFailed(I[4], 549, 22, "documentSnapshot");
      let results = this[_assertQueryCursorSnapshot](documentSnapshot);
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].startAtDocument(core.List.as(results[$_get]("orders")), core.List.as(results[$_get]("values"))));
    }
    startAt(values) {
      if (values == null) dart.nullFailed(I[4], 566, 53, "values");
      this[_assertQueryCursorValues](values);
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].startAt(values));
    }
    where(field, opts) {
      if (field == null) dart.nullFailed(I[4], 584, 12, "field");
      let isEqualTo = opts && 'isEqualTo' in opts ? opts.isEqualTo : null;
      let isNotEqualTo = opts && 'isNotEqualTo' in opts ? opts.isNotEqualTo : null;
      let isLessThan = opts && 'isLessThan' in opts ? opts.isLessThan : null;
      let isLessThanOrEqualTo = opts && 'isLessThanOrEqualTo' in opts ? opts.isLessThanOrEqualTo : null;
      let isGreaterThan = opts && 'isGreaterThan' in opts ? opts.isGreaterThan : null;
      let isGreaterThanOrEqualTo = opts && 'isGreaterThanOrEqualTo' in opts ? opts.isGreaterThanOrEqualTo : null;
      let arrayContains = opts && 'arrayContains' in opts ? opts.arrayContains : null;
      let arrayContainsAny = opts && 'arrayContainsAny' in opts ? opts.arrayContainsAny : null;
      let whereIn = opts && 'whereIn' in opts ? opts.whereIn : null;
      let whereNotIn = opts && 'whereNotIn' in opts ? opts.whereNotIn : null;
      let isNull = opts && 'isNull' in opts ? opts.isNull : null;
      this[_assertValidFieldType](field);
      let equality = C[2] || CT.C2;
      let conditions = T$.ListOfList().from(core.Iterable.as(this.parameters[$_get]("where")));
      function addCondition(field, operator, value) {
        if (operator == null) dart.nullFailed(I[4], 604, 45, "operator");
        let condition = null;
        let codecValue = cloud_firestore._CodecUtility.valueEncode(value);
        if (dart.equals(field, field_path.FieldPath.documentId)) {
          condition = [field, operator, codecValue];
        } else {
          let fieldPath = typeof field == 'string' ? new field_path.FieldPath.fromString(field) : field_path.FieldPath.as(field);
          condition = [fieldPath, operator, codecValue];
        }
        if (!dart.test(conditions[$where](dart.fn(item => {
          if (item == null) dart.nullFailed(I[4], 618, 35, "item");
          return equality.equals(condition, item);
        }, T$.ListTobool()))[$isEmpty])) dart.assertFailed("Condition " + dart.str(condition) + " already exists in this query.", I[4], 617, 9, "conditions\n            .where((List<dynamic> item) => equality.equals(condition, item))\n            .isEmpty");
        conditions[$add](condition);
      }
      dart.fn(addCondition, T$.dynamicAndStringAnddynamicTovoid());
      if (isEqualTo != null) addCondition(field, "==", isEqualTo);
      if (isNotEqualTo != null) addCondition(field, "!=", isNotEqualTo);
      if (isLessThan != null) addCondition(field, "<", isLessThan);
      if (isLessThanOrEqualTo != null) {
        addCondition(field, "<=", isLessThanOrEqualTo);
      }
      if (isGreaterThan != null) addCondition(field, ">", isGreaterThan);
      if (isGreaterThanOrEqualTo != null) {
        addCondition(field, ">=", isGreaterThanOrEqualTo);
      }
      if (arrayContains != null) {
        addCondition(field, "array-contains", arrayContains);
      }
      if (arrayContainsAny != null) {
        addCondition(field, "array-contains-any", arrayContainsAny);
      }
      if (whereIn != null) addCondition(field, "in", whereIn);
      if (whereNotIn != null) addCondition(field, "not-in", whereNotIn);
      if (isNull != null) {
        if (!dart.test(isNull)) dart.assertFailed("isNull can only be set to true. " + "Use isEqualTo to filter on non-null values.", I[4], 645, 11, "isNull");
        addCondition(field, "==", null);
      }
      let hasInequality = null;
      let hasIn = false;
      let hasNotIn = false;
      let hasNotEqualTo = false;
      let hasArrayContains = false;
      let hasArrayContainsAny = false;
      for (let condition of conditions) {
        let field = dart.dsend(condition, '_get', [0]);
        let operator = core.String.as(dart.dsend(condition, '_get', [1]));
        let value = dart.dsend(condition, '_get', [2]);
        let orders = T$.ListOfList().from(core.Iterable.as(this.parameters[$_get]("orderBy")));
        if (dart.test(this[_isInequality](operator)) && dart.test(orders[$isNotEmpty])) {
          if (!dart.equals(field, orders[$_get](0)[$_get](0))) dart.assertFailed("The initial orderBy() field '" + dart.str(orders) + "[0][0]' has to be the same as " + "the where() field parameter '" + dart.str(field) + "' when an inequality operator is invoked.", I[4], 670, 11, "field == orders[0][0]");
        }
        if (value == null) {
          if (!(operator === "==")) dart.assertFailed("You can only perform equals comparisons on null.", I[4], 677, 16, "operator == '=='");
        }
        if (operator === "in" || operator === "array-contains-any" || operator === "not-in") {
          if (!core.List.is(value)) dart.assertFailed("A non-empty [List] is required for '" + dart.str(operator) + "' filters.", I[4], 685, 11, "value is List");
          if (!(dart.notNull(core.List.as(value)[$length]) <= 10)) dart.assertFailed("'" + dart.str(operator) + "' filters support a maximum of 10 elements in the value [List].", I[4], 689, 11, "(value as List).length <= 10");
          if (!dart.test(core.List.as(value)[$isNotEmpty])) dart.assertFailed("'" + dart.str(operator) + "' filters require a non-empty [List].", I[4], 693, 11, "(value as List).isNotEmpty");
          if (!dart.test(core.List.as(value)[$where](dart.fn(value => value == null, T$.dynamicTobool()))[$isEmpty])) dart.assertFailed("'" + dart.str(operator) + "' filters cannot contain 'null' in the [List].", I[4], 697, 11, "(value as List).where((value) => value == null).isEmpty");
        }
        if (operator === "!=") {
          if (!!hasNotEqualTo) dart.assertFailed("You cannot use '!=' filters more than once.", I[4], 703, 16, "!hasNotEqualTo");
          if (!!hasNotIn) dart.assertFailed("You cannot use '!=' filters with 'not-in' filters.", I[4], 704, 16, "!hasNotIn");
          hasNotEqualTo = true;
        }
        if (operator === "not-in") {
          if (!!hasNotIn) dart.assertFailed("You cannot use 'not-in' filters more than once.", I[4], 709, 16, "!hasNotIn");
          if (!!hasNotEqualTo) dart.assertFailed("You cannot use 'not-in' filters with '!=' filters.", I[4], 711, 11, "!hasNotEqualTo");
        }
        if (operator === "in") {
          if (!!hasIn) dart.assertFailed("You cannot use 'whereIn' filters more than once.", I[4], 717, 16, "!hasIn");
          hasIn = true;
        }
        if (operator === "array-contains") {
          if (!!hasArrayContains) dart.assertFailed("You cannot use 'array-contains' filters more than once.", I[4], 723, 11, "!hasArrayContains");
          hasArrayContains = true;
        }
        if (operator === "array-contains-any") {
          if (!!hasArrayContainsAny) dart.assertFailed("You cannot use 'array-contains-any' filters more than once.", I[4], 731, 11, "!hasArrayContainsAny");
          hasArrayContainsAny = true;
        }
        if (operator === "array-contains-any" || operator === "in") {
          if (!!(hasIn && hasArrayContainsAny)) dart.assertFailed("You cannot use 'in' filters with 'array-contains-any' filters.", I[4], 738, 16, "!(hasIn && hasArrayContainsAny)");
        }
        if (operator === "array-contains" || operator === "array-contains-any") {
          if (!!(hasArrayContains && hasArrayContainsAny)) dart.assertFailed("You cannot use both 'array-contains-any' or 'array-contains' filters together.", I[4], 744, 11, "!(hasArrayContains && hasArrayContainsAny)");
        }
        if (dart.test(this[_isInequality](operator))) {
          if (hasInequality == null) {
            hasInequality = field;
          } else {
            if (!dart.equals(hasInequality, field)) dart.assertFailed("All where filters with an inequality (<, <=, >, or >=) must be " + "on the same field. But you have inequality filters on '" + dart.str(hasInequality) + "' and '" + dart.str(field) + "'.", I[4], 754, 13, "hasInequality == field");
          }
        }
      }
      return new cloud_firestore._JsonQuery.new(this.firestore, this[_delegate$].where(conditions));
    }
    withConverter(R, opts) {
      let fromFirestore = opts && 'fromFirestore' in opts ? opts.fromFirestore : null;
      if (fromFirestore == null) dart.nullFailed(I[4], 767, 31, "fromFirestore");
      let toFirestore = opts && 'toFirestore' in opts ? opts.toFirestore : null;
      if (toFirestore == null) dart.nullFailed(I[4], 768, 29, "toFirestore");
      return new (cloud_firestore._WithConverterQuery$(R)).new(this, fromFirestore, toFirestore);
    }
  };
  (cloud_firestore._JsonQuery.new = function(firestore, _delegate) {
    if (firestore == null) dart.nullFailed(I[4], 195, 10, "firestore");
    if (_delegate == null) dart.nullFailed(I[4], 196, 10, "_delegate");
    this.firestore = firestore;
    this[_delegate$0] = _delegate;
    platform_interface_query.QueryPlatform.verifyExtends(this[_delegate$]);
  }).prototype = cloud_firestore._JsonQuery.prototype;
  dart.addTypeTests(cloud_firestore._JsonQuery);
  dart.addTypeCaches(cloud_firestore._JsonQuery);
  cloud_firestore._JsonQuery[dart.implements] = () => [cloud_firestore.Query$(core.Map$(core.String, dart.dynamic))];
  dart.setMethodSignature(cloud_firestore._JsonQuery, () => ({
    __proto__: dart.getMethods(cloud_firestore._JsonQuery.__proto__),
    [_hasStartCursor]: dart.fnType(core.bool, []),
    [_hasEndCursor]: dart.fnType(core.bool, []),
    [_isInequality]: dart.fnType(core.bool, [core.String]),
    [_assertQueryCursorSnapshot]: dart.fnType(core.Map$(core.String, dart.dynamic), [cloud_firestore.DocumentSnapshot$(dart.nullable(core.Object))]),
    [_assertQueryCursorValues]: dart.fnType(core.List, [core.List$(dart.nullable(core.Object))]),
    [_assertValidFieldType]: dart.fnType(dart.void, [core.Object]),
    endAtDocument: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [cloud_firestore.DocumentSnapshot$(dart.nullable(core.Object))]),
    endAt: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [core.List$(dart.nullable(core.Object))]),
    endBeforeDocument: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [cloud_firestore.DocumentSnapshot$(dart.nullable(core.Object))]),
    endBefore: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [core.List$(dart.nullable(core.Object))]),
    get: dart.fnType(async.Future$(cloud_firestore.QuerySnapshot$(core.Map$(core.String, dart.dynamic))), [], [dart.nullable(get_options.GetOptions)]),
    limit: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [core.int]),
    limitToLast: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [core.int]),
    snapshots: dart.fnType(async.Stream$(cloud_firestore.QuerySnapshot$(core.Map$(core.String, dart.dynamic))), [], {includeMetadataChanges: core.bool}, {}),
    orderBy: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [core.Object], {descending: core.bool}, {}),
    startAfterDocument: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [cloud_firestore.DocumentSnapshot$(dart.nullable(core.Object))]),
    startAfter: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [core.List$(dart.nullable(core.Object))]),
    startAtDocument: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [cloud_firestore.DocumentSnapshot$(dart.nullable(core.Object))]),
    startAt: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [core.List$(dart.nullable(core.Object))]),
    where: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [core.Object], {arrayContains: dart.nullable(core.Object), arrayContainsAny: dart.nullable(core.List$(dart.nullable(core.Object))), isEqualTo: dart.nullable(core.Object), isGreaterThan: dart.nullable(core.Object), isGreaterThanOrEqualTo: dart.nullable(core.Object), isLessThan: dart.nullable(core.Object), isLessThanOrEqualTo: dart.nullable(core.Object), isNotEqualTo: dart.nullable(core.Object), isNull: dart.nullable(core.bool), whereIn: dart.nullable(core.List$(dart.nullable(core.Object))), whereNotIn: dart.nullable(core.List$(dart.nullable(core.Object)))}, {}),
    withConverter: dart.gFnType(R => [cloud_firestore.Query$(R), [], {}, {fromFirestore: dart.fnType(R, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)]), toFirestore: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [R, dart.nullable(set_options.SetOptions)])}], R => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(cloud_firestore._JsonQuery, () => ({
    __proto__: dart.getGetters(cloud_firestore._JsonQuery.__proto__),
    parameters: core.Map$(core.String, dart.dynamic)
  }));
  dart.setLibraryUri(cloud_firestore._JsonQuery, I[1]);
  dart.setFieldSignature(cloud_firestore._JsonQuery, () => ({
    __proto__: dart.getFields(cloud_firestore._JsonQuery.__proto__),
    firestore: dart.finalFieldType(cloud_firestore.FirebaseFirestore),
    [_delegate$]: dart.finalFieldType(platform_interface_query.QueryPlatform)
  }));
  cloud_firestore._JsonCollectionReference = class _JsonCollectionReference extends cloud_firestore._JsonQuery {
    get [_delegate$]() {
      return platform_interface_collection_reference.CollectionReferencePlatform.as(super[_delegate$]);
    }
    get id() {
      return this[_delegate$].id;
    }
    get parent() {
      let _documentReferencePlatform = this[_delegate$].parent;
      if (_documentReferencePlatform == null) {
        return null;
      }
      return new cloud_firestore._JsonDocumentReference.new(this.firestore, _documentReferencePlatform);
    }
    get path() {
      return this[_delegate$].path;
    }
    add(data) {
      T$.MapOfString$dynamic().as(data);
      if (data == null) dart.nullFailed(I[3], 106, 28, "data");
      return async.async(T$.DocumentReferenceOfMapOfString$dynamic(), (function* add() {
        let newDocument = this.doc();
        yield newDocument.set(data);
        return newDocument;
      }).bind(this));
    }
    doc(path = null) {
      if (path != null) {
        if (!path[$isNotEmpty]) dart.assertFailed("a document path must be a non-empty string", I[3], 115, 14, "path.isNotEmpty");
        if (!!path[$contains]("//")) dart.assertFailed("a document path must not contain \"//\"", I[3], 116, 14, "!path.contains('//')");
        if (!(path !== "/")) dart.assertFailed("a document path must point to a valid document", I[3], 117, 14, "path != '/'");
      }
      return new cloud_firestore._JsonDocumentReference.new(this.firestore, this[_delegate$].doc(path));
    }
    withConverter(R, opts) {
      let fromFirestore = opts && 'fromFirestore' in opts ? opts.fromFirestore : null;
      if (fromFirestore == null) dart.nullFailed(I[3], 125, 31, "fromFirestore");
      let toFirestore = opts && 'toFirestore' in opts ? opts.toFirestore : null;
      if (toFirestore == null) dart.nullFailed(I[3], 126, 29, "toFirestore");
      return new (cloud_firestore._WithConverterCollectionReference$(R)).new(this, fromFirestore, toFirestore);
    }
    _equals(other) {
      if (other == null) return false;
      return cloud_firestore._JsonCollectionReference.is(other) && dart.equals(dart.runtimeType(other), this[$runtimeType]) && dart.equals(other.firestore, this.firestore) && other.path == this.path;
    }
    get hashCode() {
      return ui.hashValues(this.firestore, this.path);
    }
    toString() {
      return "CollectionReference<Map<String, dynamic>>(" + dart.str(this.path) + ")";
    }
  };
  (cloud_firestore._JsonCollectionReference.new = function(firestore, _delegate) {
    if (firestore == null) dart.nullFailed(I[3], 78, 23, "firestore");
    if (_delegate == null) dart.nullFailed(I[3], 79, 33, "_delegate");
    cloud_firestore._JsonCollectionReference.__proto__.new.call(this, firestore, _delegate);
    ;
  }).prototype = cloud_firestore._JsonCollectionReference.prototype;
  dart.addTypeTests(cloud_firestore._JsonCollectionReference);
  dart.addTypeCaches(cloud_firestore._JsonCollectionReference);
  cloud_firestore._JsonCollectionReference[dart.implements] = () => [cloud_firestore.CollectionReference$(core.Map$(core.String, dart.dynamic))];
  dart.setMethodSignature(cloud_firestore._JsonCollectionReference, () => ({
    __proto__: dart.getMethods(cloud_firestore._JsonCollectionReference.__proto__),
    add: dart.fnType(async.Future$(cloud_firestore.DocumentReference$(core.Map$(core.String, dart.dynamic))), [dart.nullable(core.Object)]),
    doc: dart.fnType(cloud_firestore.DocumentReference$(core.Map$(core.String, dart.dynamic)), [], [dart.nullable(core.String)]),
    withConverter: dart.gFnType(R => [cloud_firestore.CollectionReference$(R), [], {}, {fromFirestore: dart.fnType(R, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)]), toFirestore: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [R, dart.nullable(set_options.SetOptions)])}], R => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(cloud_firestore._JsonCollectionReference, () => ({
    __proto__: dart.getGetters(cloud_firestore._JsonCollectionReference.__proto__),
    [_delegate$]: platform_interface_collection_reference.CollectionReferencePlatform,
    id: core.String,
    parent: dart.nullable(cloud_firestore.DocumentReference$(core.Map$(core.String, dart.dynamic))),
    path: core.String
  }));
  dart.setLibraryUri(cloud_firestore._JsonCollectionReference, I[1]);
  dart.defineExtensionMethods(cloud_firestore._JsonCollectionReference, ['_equals', 'toString']);
  dart.defineExtensionAccessors(cloud_firestore._JsonCollectionReference, ['hashCode']);
  var _originalQuery$ = dart.privateName(cloud_firestore, "_originalQuery");
  var _originalCollectionReferenceQuery = dart.privateName(cloud_firestore, "_originalCollectionReferenceQuery");
  var _toFirestore$ = dart.privateName(cloud_firestore, "_toFirestore");
  var _fromFirestore$ = dart.privateName(cloud_firestore, "_fromFirestore");
  var _mapQuery = dart.privateName(cloud_firestore, "_mapQuery");
  const _is__WithConverterQuery_default = Symbol('_is__WithConverterQuery_default');
  cloud_firestore._WithConverterQuery$ = dart.generic(T => {
    var _WithConverterQueryOfT = () => (_WithConverterQueryOfT = dart.constFn(cloud_firestore._WithConverterQuery$(T)))();
    var _WithConverterQuerySnapshotOfT = () => (_WithConverterQuerySnapshotOfT = dart.constFn(cloud_firestore._WithConverterQuerySnapshot$(T)))();
    var QuerySnapshotOfT = () => (QuerySnapshotOfT = dart.constFn(cloud_firestore.QuerySnapshot$(T)))();
    var QuerySnapshotOfMapOfString$dynamicTo_WithConverterQuerySnapshotOfT = () => (QuerySnapshotOfMapOfString$dynamicTo_WithConverterQuerySnapshotOfT = dart.constFn(dart.fnType(_WithConverterQuerySnapshotOfT(), [T$.QuerySnapshotOfMapOfString$dynamic()])))();
    class _WithConverterQuery extends core.Object {
      get firestore() {
        return this[_originalQuery$].firestore;
      }
      get parameters() {
        return this[_originalQuery$].parameters;
      }
      [_mapQuery](newOriginalQuery) {
        if (newOriginalQuery == null) dart.nullFailed(I[4], 795, 50, "newOriginalQuery");
        return new (_WithConverterQueryOfT()).new(newOriginalQuery, this[_fromFirestore$], this[_toFirestore$]);
      }
      get(options = null) {
        return async.async(QuerySnapshotOfT(), (function* get() {
          let snapshot = (yield this[_originalQuery$].get(options));
          return new (_WithConverterQuerySnapshotOfT()).new(snapshot, this[_fromFirestore$], this[_toFirestore$]);
        }).bind(this));
      }
      snapshots(opts) {
        let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
        if (includeMetadataChanges == null) dart.nullFailed(I[4], 814, 44, "includeMetadataChanges");
        return this[_originalQuery$].snapshots({includeMetadataChanges: includeMetadataChanges}).map(QuerySnapshotOfT(), dart.fn(snapshot => {
          if (snapshot == null) dart.nullFailed(I[4], 817, 15, "snapshot");
          return new (_WithConverterQuerySnapshotOfT()).new(snapshot, this[_fromFirestore$], this[_toFirestore$]);
        }, QuerySnapshotOfMapOfString$dynamicTo_WithConverterQuerySnapshotOfT()));
      }
      endAt(values) {
        if (values == null) dart.nullFailed(I[4], 825, 32, "values");
        return this[_mapQuery](this[_originalQuery$].endAt(values));
      }
      endAtDocument(documentSnapshot) {
        if (documentSnapshot == null) dart.nullFailed(I[4], 830, 43, "documentSnapshot");
        return this[_mapQuery](this[_originalQuery$].endAtDocument(documentSnapshot));
      }
      endBefore(values) {
        if (values == null) dart.nullFailed(I[4], 835, 36, "values");
        return this[_mapQuery](this[_originalQuery$].endBefore(values));
      }
      endBeforeDocument(documentSnapshot) {
        if (documentSnapshot == null) dart.nullFailed(I[4], 840, 47, "documentSnapshot");
        return this[_mapQuery](this[_originalQuery$].endAtDocument(documentSnapshot));
      }
      limit(limit) {
        if (limit == null) dart.nullFailed(I[4], 845, 22, "limit");
        return this[_mapQuery](this[_originalQuery$].limit(limit));
      }
      limitToLast(limit) {
        if (limit == null) dart.nullFailed(I[4], 850, 28, "limit");
        return this[_mapQuery](this[_originalQuery$].limitToLast(limit));
      }
      orderBy(field, opts) {
        if (field == null) dart.nullFailed(I[4], 855, 27, "field");
        let descending = opts && 'descending' in opts ? opts.descending : false;
        if (descending == null) dart.nullFailed(I[4], 855, 40, "descending");
        return this[_mapQuery](this[_originalQuery$].orderBy(field, {descending: descending}));
      }
      startAfter(values) {
        if (values == null) dart.nullFailed(I[4], 860, 37, "values");
        return this[_mapQuery](this[_originalQuery$].startAfter(values));
      }
      startAfterDocument(documentSnapshot) {
        if (documentSnapshot == null) dart.nullFailed(I[4], 865, 48, "documentSnapshot");
        return this[_mapQuery](this[_originalQuery$].startAfterDocument(documentSnapshot));
      }
      startAt(values) {
        if (values == null) dart.nullFailed(I[4], 870, 34, "values");
        return this[_mapQuery](this[_originalQuery$].startAt(values));
      }
      startAtDocument(documentSnapshot) {
        if (documentSnapshot == null) dart.nullFailed(I[4], 875, 45, "documentSnapshot");
        return this[_mapQuery](this[_originalQuery$].startAtDocument(documentSnapshot));
      }
      where(field, opts) {
        if (field == null) dart.nullFailed(I[4], 881, 12, "field");
        let isEqualTo = opts && 'isEqualTo' in opts ? opts.isEqualTo : null;
        let isNotEqualTo = opts && 'isNotEqualTo' in opts ? opts.isNotEqualTo : null;
        let isLessThan = opts && 'isLessThan' in opts ? opts.isLessThan : null;
        let isLessThanOrEqualTo = opts && 'isLessThanOrEqualTo' in opts ? opts.isLessThanOrEqualTo : null;
        let isGreaterThan = opts && 'isGreaterThan' in opts ? opts.isGreaterThan : null;
        let isGreaterThanOrEqualTo = opts && 'isGreaterThanOrEqualTo' in opts ? opts.isGreaterThanOrEqualTo : null;
        let arrayContains = opts && 'arrayContains' in opts ? opts.arrayContains : null;
        let arrayContainsAny = opts && 'arrayContainsAny' in opts ? opts.arrayContainsAny : null;
        let whereIn = opts && 'whereIn' in opts ? opts.whereIn : null;
        let whereNotIn = opts && 'whereNotIn' in opts ? opts.whereNotIn : null;
        let isNull = opts && 'isNull' in opts ? opts.isNull : null;
        return this[_mapQuery](this[_originalQuery$].where(field, {isEqualTo: isEqualTo, isNotEqualTo: isNotEqualTo, isLessThan: isLessThan, isLessThanOrEqualTo: isLessThanOrEqualTo, isGreaterThan: isGreaterThan, isGreaterThanOrEqualTo: isGreaterThanOrEqualTo, arrayContains: arrayContains, arrayContainsAny: arrayContainsAny, whereIn: whereIn, whereNotIn: whereNotIn, isNull: isNull}));
      }
      withConverter(R, opts) {
        let fromFirestore = opts && 'fromFirestore' in opts ? opts.fromFirestore : null;
        if (fromFirestore == null) dart.nullFailed(I[4], 914, 31, "fromFirestore");
        let toFirestore = opts && 'toFirestore' in opts ? opts.toFirestore : null;
        if (toFirestore == null) dart.nullFailed(I[4], 915, 29, "toFirestore");
        return new (cloud_firestore._WithConverterQuery$(R)).new(this[_originalQuery$], fromFirestore, toFirestore);
      }
    }
    (_WithConverterQuery.new = function(_originalQuery, _fromFirestore, _toFirestore) {
      if (_originalQuery == null) dart.nullFailed(I[4], 780, 10, "_originalQuery");
      if (_fromFirestore == null) dart.nullFailed(I[4], 781, 10, "_fromFirestore");
      if (_toFirestore == null) dart.nullFailed(I[4], 782, 10, "_toFirestore");
      this[_originalQuery$] = _originalQuery;
      this[_fromFirestore$] = _fromFirestore;
      this[_toFirestore$] = _toFirestore;
      ;
    }).prototype = _WithConverterQuery.prototype;
    dart.addTypeTests(_WithConverterQuery);
    _WithConverterQuery.prototype[_is__WithConverterQuery_default] = true;
    dart.addTypeCaches(_WithConverterQuery);
    _WithConverterQuery[dart.implements] = () => [cloud_firestore.Query$(T)];
    dart.setMethodSignature(_WithConverterQuery, () => ({
      __proto__: dart.getMethods(_WithConverterQuery.__proto__),
      [_mapQuery]: dart.fnType(cloud_firestore.Query$(T), [cloud_firestore.Query$(core.Map$(core.String, dart.dynamic))]),
      get: dart.fnType(async.Future$(cloud_firestore.QuerySnapshot$(T)), [], [dart.nullable(get_options.GetOptions)]),
      snapshots: dart.fnType(async.Stream$(cloud_firestore.QuerySnapshot$(T)), [], {includeMetadataChanges: core.bool}, {}),
      endAt: dart.fnType(cloud_firestore.Query$(T), [core.List$(dart.nullable(core.Object))]),
      endAtDocument: dart.fnType(cloud_firestore.Query$(T), [cloud_firestore.DocumentSnapshot$(dart.nullable(core.Object))]),
      endBefore: dart.fnType(cloud_firestore.Query$(T), [core.List$(dart.nullable(core.Object))]),
      endBeforeDocument: dart.fnType(cloud_firestore.Query$(T), [cloud_firestore.DocumentSnapshot$(dart.nullable(core.Object))]),
      limit: dart.fnType(cloud_firestore.Query$(T), [core.int]),
      limitToLast: dart.fnType(cloud_firestore.Query$(T), [core.int]),
      orderBy: dart.fnType(cloud_firestore.Query$(T), [core.Object], {descending: core.bool}, {}),
      startAfter: dart.fnType(cloud_firestore.Query$(T), [core.List$(dart.nullable(core.Object))]),
      startAfterDocument: dart.fnType(cloud_firestore.Query$(T), [cloud_firestore.DocumentSnapshot$(dart.nullable(core.Object))]),
      startAt: dart.fnType(cloud_firestore.Query$(T), [core.List$(dart.nullable(core.Object))]),
      startAtDocument: dart.fnType(cloud_firestore.Query$(T), [cloud_firestore.DocumentSnapshot$(dart.nullable(core.Object))]),
      where: dart.fnType(cloud_firestore.Query$(T), [core.Object], {arrayContains: dart.nullable(core.Object), arrayContainsAny: dart.nullable(core.List$(dart.nullable(core.Object))), isEqualTo: dart.nullable(core.Object), isGreaterThan: dart.nullable(core.Object), isGreaterThanOrEqualTo: dart.nullable(core.Object), isLessThan: dart.nullable(core.Object), isLessThanOrEqualTo: dart.nullable(core.Object), isNotEqualTo: dart.nullable(core.Object), isNull: dart.nullable(core.bool), whereIn: dart.nullable(core.List$(dart.nullable(core.Object))), whereNotIn: dart.nullable(core.List$(dart.nullable(core.Object)))}, {}),
      withConverter: dart.gFnType(R => [cloud_firestore.Query$(R), [], {}, {fromFirestore: dart.fnType(R, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)]), toFirestore: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [R, dart.nullable(set_options.SetOptions)])}], R => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_WithConverterQuery, () => ({
      __proto__: dart.getGetters(_WithConverterQuery.__proto__),
      firestore: cloud_firestore.FirebaseFirestore,
      parameters: core.Map$(core.String, dart.dynamic)
    }));
    dart.setLibraryUri(_WithConverterQuery, I[1]);
    dart.setFieldSignature(_WithConverterQuery, () => ({
      __proto__: dart.getFields(_WithConverterQuery.__proto__),
      [_originalQuery$]: dart.finalFieldType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic))),
      [_fromFirestore$]: dart.finalFieldType(dart.fnType(T, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)])),
      [_toFirestore$]: dart.finalFieldType(dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [T, dart.nullable(set_options.SetOptions)]))
    }));
    return _WithConverterQuery;
  });
  cloud_firestore._WithConverterQuery = cloud_firestore._WithConverterQuery$();
  dart.addTypeTests(cloud_firestore._WithConverterQuery, _is__WithConverterQuery_default);
  const _is__WithConverterCollectionReference_default = Symbol('_is__WithConverterCollectionReference_default');
  cloud_firestore._WithConverterCollectionReference$ = dart.generic(T => {
    var _WithConverterDocumentReferenceOfT = () => (_WithConverterDocumentReferenceOfT = dart.constFn(cloud_firestore._WithConverterDocumentReference$(T)))();
    var DocumentReferenceOfT = () => (DocumentReferenceOfT = dart.constFn(cloud_firestore.DocumentReference$(T)))();
    var _WithConverterCollectionReferenceOfT = () => (_WithConverterCollectionReferenceOfT = dart.constFn(cloud_firestore._WithConverterCollectionReference$(T)))();
    var TAndSetOptionsNToMapOfString$ObjectN = () => (TAndSetOptionsNToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [T, T$.SetOptionsN()])))();
    class _WithConverterCollectionReference extends cloud_firestore._WithConverterQuery$(T) {
      get [_originalCollectionReferenceQuery]() {
        return T$.CollectionReferenceOfMapOfString$dynamic().as(this[_originalQuery$]);
      }
      get id() {
        return this[_originalCollectionReferenceQuery].id;
      }
      get parent() {
        return this[_originalCollectionReferenceQuery].parent;
      }
      get path() {
        return this[_originalCollectionReferenceQuery].path;
      }
      add(data) {
        T.as(data);
        return async.async(DocumentReferenceOfT(), (function* add() {
          let t3, t2;
          let snapshot = (yield this[_originalCollectionReferenceQuery].add((t2 = data, t3 = null, this[_toFirestore$](t2, t3))));
          return new (_WithConverterDocumentReferenceOfT()).new(snapshot, this[_fromFirestore$], this[_toFirestore$]);
        }).bind(this));
      }
      doc(path = null) {
        return new (_WithConverterDocumentReferenceOfT()).new(this[_originalCollectionReferenceQuery].doc(path), this[_fromFirestore$], this[_toFirestore$]);
      }
      withConverter(R, opts) {
        let fromFirestore = opts && 'fromFirestore' in opts ? opts.fromFirestore : null;
        if (fromFirestore == null) dart.nullFailed(I[3], 201, 31, "fromFirestore");
        let toFirestore = opts && 'toFirestore' in opts ? opts.toFirestore : null;
        if (toFirestore == null) dart.nullFailed(I[3], 202, 29, "toFirestore");
        return new (cloud_firestore._WithConverterCollectionReference$(R)).new(this[_originalCollectionReferenceQuery], fromFirestore, toFirestore);
      }
      _equals(other) {
        if (other == null) return false;
        return _WithConverterCollectionReferenceOfT().is(other) && dart.equals(dart.runtimeType(other), this[$runtimeType]) && dart.equals(other[_originalCollectionReferenceQuery], this[_originalCollectionReferenceQuery]) && dart.equals(other[_fromFirestore$], this[_fromFirestore$]) && dart.equals(TAndSetOptionsNToMapOfString$ObjectN().as(other[_toFirestore$]), this[_toFirestore$]);
      }
      get hashCode() {
        return ui.hashValues(this[$runtimeType], this[_originalCollectionReferenceQuery], this[_fromFirestore$], this[_toFirestore$]);
      }
      toString() {
        return "CollectionReference<" + dart.str(dart.wrapType(T)) + ">(" + dart.str(this.path) + ")";
      }
    }
    (_WithConverterCollectionReference.new = function(collectionReference, fromFirestore, toFirestore) {
      if (collectionReference == null) dart.nullFailed(I[3], 156, 47, "collectionReference");
      if (fromFirestore == null) dart.nullFailed(I[3], 157, 22, "fromFirestore");
      if (toFirestore == null) dart.nullFailed(I[3], 158, 20, "toFirestore");
      _WithConverterCollectionReference.__proto__.new.call(this, collectionReference, fromFirestore, toFirestore);
      ;
    }).prototype = _WithConverterCollectionReference.prototype;
    dart.addTypeTests(_WithConverterCollectionReference);
    _WithConverterCollectionReference.prototype[_is__WithConverterCollectionReference_default] = true;
    dart.addTypeCaches(_WithConverterCollectionReference);
    _WithConverterCollectionReference[dart.implements] = () => [cloud_firestore.CollectionReference$(T)];
    dart.setMethodSignature(_WithConverterCollectionReference, () => ({
      __proto__: dart.getMethods(_WithConverterCollectionReference.__proto__),
      add: dart.fnType(async.Future$(cloud_firestore.DocumentReference$(T)), [dart.nullable(core.Object)]),
      doc: dart.fnType(cloud_firestore.DocumentReference$(T), [], [dart.nullable(core.String)]),
      withConverter: dart.gFnType(R => [cloud_firestore.CollectionReference$(R), [], {}, {fromFirestore: dart.fnType(R, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)]), toFirestore: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [R, dart.nullable(set_options.SetOptions)])}], R => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_WithConverterCollectionReference, () => ({
      __proto__: dart.getGetters(_WithConverterCollectionReference.__proto__),
      [_originalCollectionReferenceQuery]: cloud_firestore.CollectionReference$(core.Map$(core.String, dart.dynamic)),
      id: core.String,
      parent: dart.nullable(cloud_firestore.DocumentReference$(core.Map$(core.String, dart.dynamic))),
      path: core.String
    }));
    dart.setLibraryUri(_WithConverterCollectionReference, I[1]);
    dart.defineExtensionMethods(_WithConverterCollectionReference, ['_equals', 'toString']);
    dart.defineExtensionAccessors(_WithConverterCollectionReference, ['hashCode']);
    return _WithConverterCollectionReference;
  });
  cloud_firestore._WithConverterCollectionReference = cloud_firestore._WithConverterCollectionReference$();
  dart.addTypeTests(cloud_firestore._WithConverterCollectionReference, _is__WithConverterCollectionReference_default);
  const _is_DocumentChange_default = Symbol('_is_DocumentChange_default');
  cloud_firestore.DocumentChange$ = dart.generic(T => {
    class DocumentChange extends core.Object {}
    (DocumentChange.new = function() {
      ;
    }).prototype = DocumentChange.prototype;
    dart.addTypeTests(DocumentChange);
    DocumentChange.prototype[_is_DocumentChange_default] = true;
    dart.addTypeCaches(DocumentChange);
    dart.setLibraryUri(DocumentChange, I[1]);
    return DocumentChange;
  });
  cloud_firestore.DocumentChange = cloud_firestore.DocumentChange$();
  dart.addTypeTests(cloud_firestore.DocumentChange, _is_DocumentChange_default);
  var _firestore$ = dart.privateName(cloud_firestore, "_firestore");
  cloud_firestore._JsonDocumentChange = class _JsonDocumentChange extends core.Object {
    get type() {
      return this[_delegate$].type;
    }
    get oldIndex() {
      return this[_delegate$].oldIndex;
    }
    get newIndex() {
      return this[_delegate$].newIndex;
    }
    get doc() {
      return new cloud_firestore._JsonDocumentSnapshot.new(this[_firestore$], this[_delegate$].document);
    }
  };
  (cloud_firestore._JsonDocumentChange.new = function(_firestore, _delegate) {
    if (_firestore == null) dart.nullFailed(I[5], 34, 28, "_firestore");
    if (_delegate == null) dart.nullFailed(I[5], 34, 45, "_delegate");
    this[_firestore$] = _firestore;
    this[_delegate$] = _delegate;
    platform_interface_document_change.DocumentChangePlatform.verifyExtends(this[_delegate$]);
  }).prototype = cloud_firestore._JsonDocumentChange.prototype;
  dart.addTypeTests(cloud_firestore._JsonDocumentChange);
  dart.addTypeCaches(cloud_firestore._JsonDocumentChange);
  cloud_firestore._JsonDocumentChange[dart.implements] = () => [cloud_firestore.DocumentChange$(core.Map$(core.String, dart.dynamic))];
  dart.setGetterSignature(cloud_firestore._JsonDocumentChange, () => ({
    __proto__: dart.getGetters(cloud_firestore._JsonDocumentChange.__proto__),
    type: platform_interface_document_change.DocumentChangeType,
    oldIndex: core.int,
    newIndex: core.int,
    doc: cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic))
  }));
  dart.setLibraryUri(cloud_firestore._JsonDocumentChange, I[1]);
  dart.setFieldSignature(cloud_firestore._JsonDocumentChange, () => ({
    __proto__: dart.getFields(cloud_firestore._JsonDocumentChange.__proto__),
    [_delegate$]: dart.finalFieldType(platform_interface_document_change.DocumentChangePlatform),
    [_firestore$]: dart.finalFieldType(cloud_firestore.FirebaseFirestore)
  }));
  var _originalDocumentChange$ = dart.privateName(cloud_firestore, "_originalDocumentChange");
  const _is__WithConverterDocumentChange_default = Symbol('_is__WithConverterDocumentChange_default');
  cloud_firestore._WithConverterDocumentChange$ = dart.generic(T => {
    var _WithConverterDocumentSnapshotOfT = () => (_WithConverterDocumentSnapshotOfT = dart.constFn(cloud_firestore._WithConverterDocumentSnapshot$(T)))();
    class _WithConverterDocumentChange extends core.Object {
      get type() {
        return this[_originalDocumentChange$].type;
      }
      get oldIndex() {
        return this[_originalDocumentChange$].oldIndex;
      }
      get newIndex() {
        return this[_originalDocumentChange$].newIndex;
      }
      get doc() {
        return new (_WithConverterDocumentSnapshotOfT()).new(this[_originalDocumentChange$].doc, this[_fromFirestore$], this[_toFirestore$]);
      }
    }
    (_WithConverterDocumentChange.new = function(_originalDocumentChange, _fromFirestore, _toFirestore) {
      if (_originalDocumentChange == null) dart.nullFailed(I[5], 59, 10, "_originalDocumentChange");
      if (_fromFirestore == null) dart.nullFailed(I[5], 60, 10, "_fromFirestore");
      if (_toFirestore == null) dart.nullFailed(I[5], 61, 10, "_toFirestore");
      this[_originalDocumentChange$] = _originalDocumentChange;
      this[_fromFirestore$] = _fromFirestore;
      this[_toFirestore$] = _toFirestore;
      ;
    }).prototype = _WithConverterDocumentChange.prototype;
    dart.addTypeTests(_WithConverterDocumentChange);
    _WithConverterDocumentChange.prototype[_is__WithConverterDocumentChange_default] = true;
    dart.addTypeCaches(_WithConverterDocumentChange);
    _WithConverterDocumentChange[dart.implements] = () => [cloud_firestore.DocumentChange$(T)];
    dart.setGetterSignature(_WithConverterDocumentChange, () => ({
      __proto__: dart.getGetters(_WithConverterDocumentChange.__proto__),
      type: platform_interface_document_change.DocumentChangeType,
      oldIndex: core.int,
      newIndex: core.int,
      doc: cloud_firestore.DocumentSnapshot$(T)
    }));
    dart.setLibraryUri(_WithConverterDocumentChange, I[1]);
    dart.setFieldSignature(_WithConverterDocumentChange, () => ({
      __proto__: dart.getFields(_WithConverterDocumentChange.__proto__),
      [_originalDocumentChange$]: dart.finalFieldType(cloud_firestore.DocumentChange$(core.Map$(core.String, dart.dynamic))),
      [_fromFirestore$]: dart.finalFieldType(dart.fnType(T, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)])),
      [_toFirestore$]: dart.finalFieldType(dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [T, dart.nullable(set_options.SetOptions)]))
    }));
    return _WithConverterDocumentChange;
  });
  cloud_firestore._WithConverterDocumentChange = cloud_firestore._WithConverterDocumentChange$();
  dart.addTypeTests(cloud_firestore._WithConverterDocumentChange, _is__WithConverterDocumentChange_default);
  const _is_DocumentReference_default = Symbol('_is_DocumentReference_default');
  cloud_firestore.DocumentReference$ = dart.generic(T => {
    class DocumentReference extends core.Object {}
    (DocumentReference.new = function() {
      ;
    }).prototype = DocumentReference.prototype;
    dart.addTypeTests(DocumentReference);
    DocumentReference.prototype[_is_DocumentReference_default] = true;
    dart.addTypeCaches(DocumentReference);
    dart.setLibraryUri(DocumentReference, I[1]);
    return DocumentReference;
  });
  cloud_firestore.DocumentReference = cloud_firestore.DocumentReference$();
  dart.addTypeTests(cloud_firestore.DocumentReference, _is_DocumentReference_default);
  cloud_firestore._JsonDocumentReference = class _JsonDocumentReference extends core.Object {
    get id() {
      return this[_delegate$].id;
    }
    get parent() {
      return new cloud_firestore._JsonCollectionReference.new(this.firestore, this[_delegate$].parent);
    }
    get path() {
      return this[_delegate$].path;
    }
    collection(collectionPath) {
      if (collectionPath == null) dart.nullFailed(I[6], 113, 63, "collectionPath");
      if (!collectionPath[$isNotEmpty]) dart.assertFailed("a collectionPath path must be a non-empty string", I[6], 115, 7, "collectionPath.isNotEmpty");
      if (!!collectionPath[$contains]("//")) dart.assertFailed("a collection path must not contain \"//\"", I[6], 119, 7, "!collectionPath.contains('//')");
      if (!dart.test(cloud_firestore_platform_interface.isValidCollectionPath(collectionPath))) dart.assertFailed("a collection path must point to a valid collection.", I[6], 123, 7, "isValidCollectionPath(collectionPath)");
      return new cloud_firestore._JsonCollectionReference.new(this.firestore, this[_delegate$].collection(collectionPath));
    }
    delete() {
      return this[_delegate$].delete();
    }
    get(options = null) {
      return async.async(T$.DocumentSnapshotOfMapOfString$dynamic(), (function* get() {
        let t2;
        return new cloud_firestore._JsonDocumentSnapshot.new(this.firestore, yield this[_delegate$].get((t2 = options, t2 == null ? C[0] || CT.C0 : t2)));
      }).bind(this));
    }
    snapshots(opts) {
      let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
      if (includeMetadataChanges == null) dart.nullFailed(I[6], 150, 13, "includeMetadataChanges");
      return this[_delegate$].snapshots({includeMetadataChanges: includeMetadataChanges}).map(T$.DocumentSnapshotOfMapOfString$dynamic(), dart.fn(delegateSnapshot => {
        if (delegateSnapshot == null) dart.nullFailed(I[6], 153, 15, "delegateSnapshot");
        return new cloud_firestore._JsonDocumentSnapshot.new(this.firestore, delegateSnapshot);
      }, T$.DocumentSnapshotPlatformTo_JsonDocumentSnapshot()));
    }
    set(data, options = null) {
      T$.MapOfString$dynamic().as(data);
      if (data == null) dart.nullFailed(I[6], 158, 41, "data");
      return this[_delegate$].set(dart.nullCheck(cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(data)), options);
    }
    update(data) {
      if (data == null) dart.nullFailed(I[6], 164, 44, "data");
      return this[_delegate$].update(dart.nullCheck(cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(data)));
    }
    withConverter(T, opts) {
      let fromFirestore = opts && 'fromFirestore' in opts ? opts.fromFirestore : null;
      if (fromFirestore == null) dart.nullFailed(I[6], 171, 31, "fromFirestore");
      let toFirestore = opts && 'toFirestore' in opts ? opts.toFirestore : null;
      if (toFirestore == null) dart.nullFailed(I[6], 172, 29, "toFirestore");
      return new (cloud_firestore._WithConverterDocumentReference$(T)).new(this, fromFirestore, toFirestore);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.DocumentReferenceOfObjectN().is(other) && dart.equals(other.firestore, this.firestore) && other.path == this.path;
    }
    get hashCode() {
      return ui.hashValues(this.firestore, this.path);
    }
    toString() {
      return "DocumentReference<Map<String, dynamic>>(" + dart.str(this.path) + ")";
    }
  };
  (cloud_firestore._JsonDocumentReference.new = function(firestore, _delegate) {
    if (firestore == null) dart.nullFailed(I[6], 93, 31, "firestore");
    if (_delegate == null) dart.nullFailed(I[6], 93, 47, "_delegate");
    this.firestore = firestore;
    this[_delegate$] = _delegate;
    platform_interface_document_reference.DocumentReferencePlatform.verifyExtends(this[_delegate$]);
  }).prototype = cloud_firestore._JsonDocumentReference.prototype;
  dart.addTypeTests(cloud_firestore._JsonDocumentReference);
  dart.addTypeCaches(cloud_firestore._JsonDocumentReference);
  cloud_firestore._JsonDocumentReference[dart.implements] = () => [cloud_firestore.DocumentReference$(core.Map$(core.String, dart.dynamic))];
  dart.setMethodSignature(cloud_firestore._JsonDocumentReference, () => ({
    __proto__: dart.getMethods(cloud_firestore._JsonDocumentReference.__proto__),
    collection: dart.fnType(cloud_firestore.CollectionReference$(core.Map$(core.String, dart.dynamic)), [core.String]),
    delete: dart.fnType(async.Future$(dart.void), []),
    get: dart.fnType(async.Future$(cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic))), [], [dart.nullable(get_options.GetOptions)]),
    snapshots: dart.fnType(async.Stream$(cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic))), [], {includeMetadataChanges: core.bool}, {}),
    set: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)], [dart.nullable(set_options.SetOptions)]),
    update: dart.fnType(async.Future$(dart.void), [core.Map$(core.String, dart.nullable(core.Object))]),
    withConverter: dart.gFnType(T => [cloud_firestore.DocumentReference$(T), [], {}, {fromFirestore: dart.fnType(T, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)]), toFirestore: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [T, dart.nullable(set_options.SetOptions)])}], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(cloud_firestore._JsonDocumentReference, () => ({
    __proto__: dart.getGetters(cloud_firestore._JsonDocumentReference.__proto__),
    id: core.String,
    parent: cloud_firestore.CollectionReference$(core.Map$(core.String, dart.dynamic)),
    path: core.String
  }));
  dart.setLibraryUri(cloud_firestore._JsonDocumentReference, I[1]);
  dart.setFieldSignature(cloud_firestore._JsonDocumentReference, () => ({
    __proto__: dart.getFields(cloud_firestore._JsonDocumentReference.__proto__),
    [_delegate$]: dart.finalFieldType(platform_interface_document_reference.DocumentReferencePlatform),
    firestore: dart.finalFieldType(cloud_firestore.FirebaseFirestore)
  }));
  dart.defineExtensionMethods(cloud_firestore._JsonDocumentReference, ['_equals', 'toString']);
  dart.defineExtensionAccessors(cloud_firestore._JsonDocumentReference, ['hashCode']);
  var _originalDocumentReference$ = dart.privateName(cloud_firestore, "_originalDocumentReference");
  const _is__WithConverterDocumentReference_default = Symbol('_is__WithConverterDocumentReference_default');
  cloud_firestore._WithConverterDocumentReference$ = dart.generic(T => {
    var _WithConverterDocumentSnapshotOfT = () => (_WithConverterDocumentSnapshotOfT = dart.constFn(cloud_firestore._WithConverterDocumentSnapshot$(T)))();
    var DocumentSnapshotOfMapOfString$dynamicTo_WithConverterDocumentSnapshotOfT = () => (DocumentSnapshotOfMapOfString$dynamicTo_WithConverterDocumentSnapshotOfT = dart.constFn(dart.fnType(_WithConverterDocumentSnapshotOfT(), [T$.DocumentSnapshotOfMapOfString$dynamic()])))();
    var _WithConverterCollectionReferenceOfT = () => (_WithConverterCollectionReferenceOfT = dart.constFn(cloud_firestore._WithConverterCollectionReference$(T)))();
    var _WithConverterDocumentReferenceOfT = () => (_WithConverterDocumentReferenceOfT = dart.constFn(cloud_firestore._WithConverterDocumentReference$(T)))();
    var TAndSetOptionsNToMapOfString$ObjectN = () => (TAndSetOptionsNToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [T, T$.SetOptionsN()])))();
    class _WithConverterDocumentReference extends core.Object {
      collection(collectionPath) {
        if (collectionPath == null) dart.nullFailed(I[6], 210, 63, "collectionPath");
        return this[_originalDocumentReference$].collection(collectionPath);
      }
      delete() {
        return this[_originalDocumentReference$].delete();
      }
      get(options = null) {
        return this[_originalDocumentReference$].get(options).then(_WithConverterDocumentSnapshotOfT(), dart.fn(snapshot => {
          if (snapshot == null) dart.nullFailed(I[6], 221, 58, "snapshot");
          return new (_WithConverterDocumentSnapshotOfT()).new(snapshot, this[_fromFirestore$], this[_toFirestore$]);
        }, DocumentSnapshotOfMapOfString$dynamicTo_WithConverterDocumentSnapshotOfT()));
      }
      get firestore() {
        return this[_originalDocumentReference$].firestore;
      }
      get id() {
        return this[_originalDocumentReference$].id;
      }
      get parent() {
        return new (_WithConverterCollectionReferenceOfT()).new(this[_originalDocumentReference$].parent, this[_fromFirestore$], this[_toFirestore$]);
      }
      get path() {
        return this[_originalDocumentReference$].path;
      }
      set(data, options = null) {
        let t3, t2;
        T.as(data);
        return this[_originalDocumentReference$].set((t2 = data, t3 = options, this[_toFirestore$](t2, t3)), options);
      }
      snapshots(opts) {
        let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
        if (includeMetadataChanges == null) dart.nullFailed(I[6], 258, 10, "includeMetadataChanges");
        return this[_originalDocumentReference$].snapshots({includeMetadataChanges: includeMetadataChanges}).map(_WithConverterDocumentSnapshotOfT(), dart.fn(snapshot => {
          if (snapshot == null) dart.nullFailed(I[6], 262, 15, "snapshot");
          return new (_WithConverterDocumentSnapshotOfT()).new(snapshot, this[_fromFirestore$], this[_toFirestore$]);
        }, DocumentSnapshotOfMapOfString$dynamicTo_WithConverterDocumentSnapshotOfT()));
      }
      update(data) {
        if (data == null) dart.nullFailed(I[6], 272, 44, "data");
        return this[_originalDocumentReference$].update(data);
      }
      withConverter(R, opts) {
        let fromFirestore = opts && 'fromFirestore' in opts ? opts.fromFirestore : null;
        if (fromFirestore == null) dart.nullFailed(I[6], 278, 31, "fromFirestore");
        let toFirestore = opts && 'toFirestore' in opts ? opts.toFirestore : null;
        if (toFirestore == null) dart.nullFailed(I[6], 279, 29, "toFirestore");
        return new (cloud_firestore._WithConverterDocumentReference$(R)).new(this[_originalDocumentReference$], fromFirestore, toFirestore);
      }
      _equals(other) {
        if (other == null) return false;
        return _WithConverterDocumentReferenceOfT().is(other) && dart.equals(dart.runtimeType(other), this[$runtimeType]) && dart.equals(other[_originalDocumentReference$], this[_originalDocumentReference$]) && dart.equals(other[_fromFirestore$], this[_fromFirestore$]) && dart.equals(TAndSetOptionsNToMapOfString$ObjectN().as(other[_toFirestore$]), this[_toFirestore$]);
      }
      get hashCode() {
        return ui.hashValues(this[$runtimeType], this[_originalDocumentReference$], this[_fromFirestore$], this[_toFirestore$]);
      }
      toString() {
        return "DocumentReference<" + dart.str(dart.wrapType(T)) + ">(" + dart.str(this.path) + ")";
      }
    }
    (_WithConverterDocumentReference.new = function(_originalDocumentReference, _fromFirestore, _toFirestore) {
      if (_originalDocumentReference == null) dart.nullFailed(I[6], 200, 10, "_originalDocumentReference");
      if (_fromFirestore == null) dart.nullFailed(I[6], 201, 10, "_fromFirestore");
      if (_toFirestore == null) dart.nullFailed(I[6], 202, 10, "_toFirestore");
      this[_originalDocumentReference$] = _originalDocumentReference;
      this[_fromFirestore$] = _fromFirestore;
      this[_toFirestore$] = _toFirestore;
      ;
    }).prototype = _WithConverterDocumentReference.prototype;
    dart.addTypeTests(_WithConverterDocumentReference);
    _WithConverterDocumentReference.prototype[_is__WithConverterDocumentReference_default] = true;
    dart.addTypeCaches(_WithConverterDocumentReference);
    _WithConverterDocumentReference[dart.implements] = () => [cloud_firestore.DocumentReference$(T)];
    dart.setMethodSignature(_WithConverterDocumentReference, () => ({
      __proto__: dart.getMethods(_WithConverterDocumentReference.__proto__),
      collection: dart.fnType(cloud_firestore.CollectionReference$(core.Map$(core.String, dart.dynamic)), [core.String]),
      delete: dart.fnType(async.Future$(dart.void), []),
      get: dart.fnType(async.Future$(cloud_firestore._WithConverterDocumentSnapshot$(T)), [], [dart.nullable(get_options.GetOptions)]),
      set: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)], [dart.nullable(set_options.SetOptions)]),
      snapshots: dart.fnType(async.Stream$(cloud_firestore._WithConverterDocumentSnapshot$(T)), [], {includeMetadataChanges: core.bool}, {}),
      update: dart.fnType(async.Future$(dart.void), [core.Map$(core.String, dart.nullable(core.Object))]),
      withConverter: dart.gFnType(R => [cloud_firestore.DocumentReference$(R), [], {}, {fromFirestore: dart.fnType(R, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)]), toFirestore: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [R, dart.nullable(set_options.SetOptions)])}], R => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_WithConverterDocumentReference, () => ({
      __proto__: dart.getGetters(_WithConverterDocumentReference.__proto__),
      firestore: cloud_firestore.FirebaseFirestore,
      id: core.String,
      parent: cloud_firestore.CollectionReference$(T),
      path: core.String
    }));
    dart.setLibraryUri(_WithConverterDocumentReference, I[1]);
    dart.setFieldSignature(_WithConverterDocumentReference, () => ({
      __proto__: dart.getFields(_WithConverterDocumentReference.__proto__),
      [_originalDocumentReference$]: dart.finalFieldType(cloud_firestore.DocumentReference$(core.Map$(core.String, dart.dynamic))),
      [_fromFirestore$]: dart.finalFieldType(dart.fnType(T, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)])),
      [_toFirestore$]: dart.finalFieldType(dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [T, dart.nullable(set_options.SetOptions)]))
    }));
    dart.defineExtensionMethods(_WithConverterDocumentReference, ['_equals', 'toString']);
    dart.defineExtensionAccessors(_WithConverterDocumentReference, ['hashCode']);
    return _WithConverterDocumentReference;
  });
  cloud_firestore._WithConverterDocumentReference = cloud_firestore._WithConverterDocumentReference$();
  dart.addTypeTests(cloud_firestore._WithConverterDocumentReference, _is__WithConverterDocumentReference_default);
  cloud_firestore.SnapshotOptions = class SnapshotOptions extends core.Object {};
  (cloud_firestore.SnapshotOptions.new = function() {
    ;
  }).prototype = cloud_firestore.SnapshotOptions.prototype;
  dart.addTypeTests(cloud_firestore.SnapshotOptions);
  dart.addTypeCaches(cloud_firestore.SnapshotOptions);
  dart.setLibraryUri(cloud_firestore.SnapshotOptions, I[1]);
  const _is_DocumentSnapshot_default = Symbol('_is_DocumentSnapshot_default');
  cloud_firestore.DocumentSnapshot$ = dart.generic(T => {
    class DocumentSnapshot extends core.Object {}
    (DocumentSnapshot.new = function() {
      ;
    }).prototype = DocumentSnapshot.prototype;
    dart.addTypeTests(DocumentSnapshot);
    DocumentSnapshot.prototype[_is_DocumentSnapshot_default] = true;
    dart.addTypeCaches(DocumentSnapshot);
    dart.setLibraryUri(DocumentSnapshot, I[1]);
    return DocumentSnapshot;
  });
  cloud_firestore.DocumentSnapshot = cloud_firestore.DocumentSnapshot$();
  dart.addTypeTests(cloud_firestore.DocumentSnapshot, _is_DocumentSnapshot_default);
  var ___JsonDocumentSnapshot_reference = dart.privateName(cloud_firestore, "_#_JsonDocumentSnapshot#reference");
  var ___JsonDocumentSnapshot_metadata = dart.privateName(cloud_firestore, "_#_JsonDocumentSnapshot#metadata");
  cloud_firestore._JsonDocumentSnapshot = class _JsonDocumentSnapshot extends core.Object {
    get id() {
      return this[_delegate$].id;
    }
    get reference() {
      let t3, t2;
      t2 = this[___JsonDocumentSnapshot_reference];
      return t2 == null ? (t3 = this[_firestore$].doc(this[_delegate$].reference.path), this[___JsonDocumentSnapshot_reference] == null ? this[___JsonDocumentSnapshot_reference] = t3 : dart.throw(new _internal.LateError.fieldADI("reference"))) : t2;
    }
    get metadata() {
      let t3, t2;
      t2 = this[___JsonDocumentSnapshot_metadata];
      return t2 == null ? (t3 = new cloud_firestore.SnapshotMetadata.__(this[_delegate$].metadata), this[___JsonDocumentSnapshot_metadata] == null ? this[___JsonDocumentSnapshot_metadata] = t3 : dart.throw(new _internal.LateError.fieldADI("metadata"))) : t2;
    }
    get exists() {
      return this[_delegate$].exists;
    }
    data() {
      return cloud_firestore._CodecUtility.replaceDelegatesWithValueInMap(this[_delegate$].data(), this[_firestore$]);
    }
    get(field) {
      if (field == null) dart.nullFailed(I[7], 91, 22, "field");
      return cloud_firestore._CodecUtility.valueDecode(this[_delegate$].get(field), this[_firestore$]);
    }
    _get(field) {
      if (field == null) dart.nullFailed(I[7], 96, 30, "field");
      return this.get(field);
    }
  };
  (cloud_firestore._JsonDocumentSnapshot.new = function(_firestore, _delegate) {
    if (_firestore == null) dart.nullFailed(I[7], 61, 30, "_firestore");
    if (_delegate == null) dart.nullFailed(I[7], 61, 47, "_delegate");
    this[___JsonDocumentSnapshot_reference] = null;
    this[___JsonDocumentSnapshot_metadata] = null;
    this[_firestore$] = _firestore;
    this[_delegate$] = _delegate;
    platform_interface_document_snapshot.DocumentSnapshotPlatform.verifyExtends(this[_delegate$]);
  }).prototype = cloud_firestore._JsonDocumentSnapshot.prototype;
  dart.addTypeTests(cloud_firestore._JsonDocumentSnapshot);
  dart.addTypeCaches(cloud_firestore._JsonDocumentSnapshot);
  cloud_firestore._JsonDocumentSnapshot[dart.implements] = () => [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic))];
  dart.setMethodSignature(cloud_firestore._JsonDocumentSnapshot, () => ({
    __proto__: dart.getMethods(cloud_firestore._JsonDocumentSnapshot.__proto__),
    data: dart.fnType(dart.nullable(core.Map$(core.String, dart.dynamic)), []),
    get: dart.fnType(dart.dynamic, [core.Object]),
    _get: dart.fnType(dart.dynamic, [core.Object])
  }));
  dart.setGetterSignature(cloud_firestore._JsonDocumentSnapshot, () => ({
    __proto__: dart.getGetters(cloud_firestore._JsonDocumentSnapshot.__proto__),
    id: core.String,
    reference: cloud_firestore.DocumentReference$(core.Map$(core.String, dart.dynamic)),
    metadata: cloud_firestore.SnapshotMetadata,
    exists: core.bool
  }));
  dart.setLibraryUri(cloud_firestore._JsonDocumentSnapshot, I[1]);
  dart.setFieldSignature(cloud_firestore._JsonDocumentSnapshot, () => ({
    __proto__: dart.getFields(cloud_firestore._JsonDocumentSnapshot.__proto__),
    [_firestore$]: dart.finalFieldType(cloud_firestore.FirebaseFirestore),
    [_delegate$]: dart.finalFieldType(platform_interface_document_snapshot.DocumentSnapshotPlatform),
    [___JsonDocumentSnapshot_reference]: dart.fieldType(dart.nullable(cloud_firestore.DocumentReference$(core.Map$(core.String, dart.dynamic)))),
    [___JsonDocumentSnapshot_metadata]: dart.fieldType(dart.nullable(cloud_firestore.SnapshotMetadata))
  }));
  var _originalDocumentSnapshot$ = dart.privateName(cloud_firestore, "_originalDocumentSnapshot");
  const _is__WithConverterDocumentSnapshot_default = Symbol('_is__WithConverterDocumentSnapshot_default');
  cloud_firestore._WithConverterDocumentSnapshot$ = dart.generic(T => {
    var _WithConverterDocumentReferenceOfT = () => (_WithConverterDocumentReferenceOfT = dart.constFn(cloud_firestore._WithConverterDocumentReference$(T)))();
    class _WithConverterDocumentSnapshot extends core.Object {
      data() {
        let t3, t2;
        if (!dart.test(this[_originalDocumentSnapshot$].exists)) return null;
        t2 = this[_originalDocumentSnapshot$];
        t3 = null;
        return this[_fromFirestore$](t2, t3);
      }
      get exists() {
        return this[_originalDocumentSnapshot$].exists;
      }
      get id() {
        return this[_originalDocumentSnapshot$].id;
      }
      get metadata() {
        return this[_originalDocumentSnapshot$].metadata;
      }
      get reference() {
        return new (_WithConverterDocumentReferenceOfT()).new(this[_originalDocumentSnapshot$].reference, this[_fromFirestore$], this[_toFirestore$]);
      }
      get(field) {
        if (field == null) dart.nullFailed(I[7], 139, 22, "field");
        return this[_originalDocumentSnapshot$].get(field);
      }
      _get(field) {
        if (field == null) dart.nullFailed(I[7], 142, 30, "field");
        return this[_originalDocumentSnapshot$]._get(field);
      }
    }
    (_WithConverterDocumentSnapshot.new = function(_originalDocumentSnapshot, _fromFirestore, _toFirestore) {
      if (_originalDocumentSnapshot == null) dart.nullFailed(I[7], 106, 10, "_originalDocumentSnapshot");
      if (_fromFirestore == null) dart.nullFailed(I[7], 107, 10, "_fromFirestore");
      if (_toFirestore == null) dart.nullFailed(I[7], 108, 10, "_toFirestore");
      this[_originalDocumentSnapshot$] = _originalDocumentSnapshot;
      this[_fromFirestore$] = _fromFirestore;
      this[_toFirestore$] = _toFirestore;
      ;
    }).prototype = _WithConverterDocumentSnapshot.prototype;
    dart.addTypeTests(_WithConverterDocumentSnapshot);
    _WithConverterDocumentSnapshot.prototype[_is__WithConverterDocumentSnapshot_default] = true;
    dart.addTypeCaches(_WithConverterDocumentSnapshot);
    _WithConverterDocumentSnapshot[dart.implements] = () => [cloud_firestore.DocumentSnapshot$(T)];
    dart.setMethodSignature(_WithConverterDocumentSnapshot, () => ({
      __proto__: dart.getMethods(_WithConverterDocumentSnapshot.__proto__),
      data: dart.fnType(dart.nullable(T), []),
      get: dart.fnType(dart.dynamic, [core.Object]),
      _get: dart.fnType(dart.dynamic, [core.Object])
    }));
    dart.setGetterSignature(_WithConverterDocumentSnapshot, () => ({
      __proto__: dart.getGetters(_WithConverterDocumentSnapshot.__proto__),
      exists: core.bool,
      id: core.String,
      metadata: cloud_firestore.SnapshotMetadata,
      reference: cloud_firestore.DocumentReference$(T)
    }));
    dart.setLibraryUri(_WithConverterDocumentSnapshot, I[1]);
    dart.setFieldSignature(_WithConverterDocumentSnapshot, () => ({
      __proto__: dart.getFields(_WithConverterDocumentSnapshot.__proto__),
      [_originalDocumentSnapshot$]: dart.finalFieldType(cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic))),
      [_fromFirestore$]: dart.finalFieldType(dart.fnType(T, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)])),
      [_toFirestore$]: dart.finalFieldType(dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [T, dart.nullable(set_options.SetOptions)]))
    }));
    return _WithConverterDocumentSnapshot;
  });
  cloud_firestore._WithConverterDocumentSnapshot = cloud_firestore._WithConverterDocumentSnapshot$();
  dart.addTypeTests(cloud_firestore._WithConverterDocumentSnapshot, _is__WithConverterDocumentSnapshot_default);
  cloud_firestore.FieldValue = class FieldValue extends platform_interface_field_value.FieldValuePlatform {
    static arrayUnion(elements) {
      if (elements == null) dart.nullFailed(I[8], 28, 46, "elements");
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValue._factory.arrayUnion(core.List.as(cloud_firestore._CodecUtility.valueEncode(elements))));
    }
    static arrayRemove(elements) {
      if (elements == null) dart.nullFailed(I[8], 37, 47, "elements");
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValue._factory.arrayRemove(core.List.as(cloud_firestore._CodecUtility.valueEncode(elements))));
    }
    static delete() {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValue._factory.delete());
    }
    static serverTimestamp() {
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValue._factory.serverTimestamp());
    }
    static increment(value) {
      if (value == null) dart.nullFailed(I[8], 50, 35, "value");
      return new cloud_firestore.FieldValue.__(cloud_firestore.FieldValue._factory.increment(value));
    }
    toString() {
      return dart.str(dart.wrapType(cloud_firestore.FieldValue)) + "(" + dart.str(this[_delegate$]) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      return cloud_firestore.FieldValue.is(other) && dart.equals(other[_delegate$], this[_delegate$]);
    }
    get hashCode() {
      return dart.hashCode(this[_delegate$]);
    }
  };
  (cloud_firestore.FieldValue.__ = function(_delegate) {
    this[_delegate$] = _delegate;
    cloud_firestore.FieldValue.__proto__.new.call(this, _delegate);
    ;
  }).prototype = cloud_firestore.FieldValue.prototype;
  dart.addTypeTests(cloud_firestore.FieldValue);
  dart.addTypeCaches(cloud_firestore.FieldValue);
  dart.setLibraryUri(cloud_firestore.FieldValue, I[1]);
  dart.setFieldSignature(cloud_firestore.FieldValue, () => ({
    __proto__: dart.getFields(cloud_firestore.FieldValue.__proto__),
    [_delegate$]: dart.fieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(cloud_firestore.FieldValue, ['toString', '_equals']);
  dart.defineExtensionAccessors(cloud_firestore.FieldValue, ['hashCode']);
  dart.defineLazy(cloud_firestore.FieldValue, {
    /*cloud_firestore.FieldValue._factory*/get _factory() {
      return platform_interface_field_value_factory.FieldValueFactoryPlatform.instance;
    }
  }, false);
  var app$ = dart.privateName(cloud_firestore, "FirebaseFirestore.app");
  var _delegatePackingProperty = dart.privateName(cloud_firestore, "_delegatePackingProperty");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  cloud_firestore.FirebaseFirestore = class FirebaseFirestore extends firebase_core_platform_interface.FirebasePluginPlatform {
    get app() {
      return this[app$];
    }
    set app(value) {
      this[app$] = value;
    }
    static get instance() {
      return cloud_firestore.FirebaseFirestore.instanceFor({app: firebase_core.Firebase.app()});
    }
    static instanceFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      if (app == null) dart.nullFailed(I[9], 32, 62, "app");
      if (dart.test(cloud_firestore.FirebaseFirestore._cachedInstances[$containsKey](app.name))) {
        return dart.nullCheck(cloud_firestore.FirebaseFirestore._cachedInstances[$_get](app.name));
      }
      let newInstance = new cloud_firestore.FirebaseFirestore.__({app: app});
      cloud_firestore.FirebaseFirestore._cachedInstances[$_set](app.name, newInstance);
      return newInstance;
    }
    get [_delegate$]() {
      let t2;
      t2 = this[_delegatePackingProperty];
      return t2 == null ? this[_delegatePackingProperty] = platform_interface_firestore.FirebaseFirestorePlatform.instanceFor({app: this.app}) : t2;
    }
    collection(collectionPath) {
      if (collectionPath == null) dart.nullFailed(I[9], 57, 63, "collectionPath");
      if (!collectionPath[$isNotEmpty]) dart.assertFailed("a collectionPath path must be a non-empty string", I[9], 59, 7, "collectionPath.isNotEmpty");
      if (!!collectionPath[$contains]("//")) dart.assertFailed("a collection path must not contain \"//\"", I[9], 63, 7, "!collectionPath.contains('//')");
      if (!dart.test(cloud_firestore_platform_interface.isValidCollectionPath(collectionPath))) dart.assertFailed("a collection path must point to a valid collection.", I[9], 67, 7, "isValidCollectionPath(collectionPath)");
      return new cloud_firestore._JsonCollectionReference.new(this, this[_delegate$].collection(collectionPath));
    }
    batch() {
      return new cloud_firestore.WriteBatch.__(this, this[_delegate$].batch());
    }
    clearPersistence() {
      return this[_delegate$].clearPersistence();
    }
    enablePersistence(persistenceSettings = null) {
      return async.async(dart.void, (function* enablePersistence() {
        return this[_delegate$].enablePersistence(persistenceSettings);
      }).bind(this));
    }
    loadBundle(bundle) {
      if (bundle == null) dart.nullFailed(I[9], 97, 39, "bundle");
      return new cloud_firestore.LoadBundleTask.__(this[_delegate$].loadBundle(bundle));
    }
    namedQueryGet(name, opts) {
      if (name == null) dart.nullFailed(I[9], 103, 68, "name");
      let options = opts && 'options' in opts ? opts.options : C[0] || CT.C0;
      if (options == null) dart.nullFailed(I[9], 104, 19, "options");
      return async.async(T$.QuerySnapshotOfMapOfString$dynamic(), (function* namedQueryGet() {
        let snapshotDelegate = (yield this[_delegate$].namedQueryGet(name, {options: options}));
        return new cloud_firestore._JsonQuerySnapshot.new(cloud_firestore.FirebaseFirestore.instance, snapshotDelegate);
      }).bind(this));
    }
    collectionGroup(collectionPath) {
      if (collectionPath == null) dart.nullFailed(I[9], 111, 54, "collectionPath");
      if (!collectionPath[$isNotEmpty]) dart.assertFailed("a collection path must be a non-empty string", I[9], 113, 7, "collectionPath.isNotEmpty");
      if (!!collectionPath[$contains]("/")) dart.assertFailed("a collection path passed to collectionGroup() cannot contain \"/\"", I[9], 117, 7, "!collectionPath.contains('/')");
      return new cloud_firestore._JsonQuery.new(this, this[_delegate$].collectionGroup(collectionPath));
    }
    disableNetwork() {
      return this[_delegate$].disableNetwork();
    }
    doc(documentPath) {
      if (documentPath == null) dart.nullFailed(I[9], 134, 54, "documentPath");
      if (!documentPath[$isNotEmpty]) dart.assertFailed("a document path must be a non-empty string", I[9], 136, 7, "documentPath.isNotEmpty");
      if (!!documentPath[$contains]("//")) dart.assertFailed("a collection path must not contain \"//\"", I[9], 140, 7, "!documentPath.contains('//')");
      if (!dart.test(cloud_firestore_platform_interface.isValidDocumentPath(documentPath))) dart.assertFailed("a document path must point to a valid document.", I[9], 144, 7, "isValidDocumentPath(documentPath)");
      return new cloud_firestore._JsonDocumentReference.new(this, this[_delegate$].doc(documentPath));
    }
    enableNetwork() {
      return this[_delegate$].enableNetwork();
    }
    snapshotsInSync() {
      return this[_delegate$].snapshotsInSync();
    }
    runTransaction(T, transactionHandler, opts) {
      if (transactionHandler == null) dart.nullFailed(I[9], 184, 53, "transactionHandler");
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[4] || CT.C4;
      if (timeout == null) dart.nullFailed(I[9], 185, 17, "timeout");
      return async.async(T, (function* runTransaction() {
        let output = null;
        let output$35isSet = false;
        function output$35get() {
          return output$35isSet ? output : dart.throw(new _internal.LateError.localNI("output"));
        }
        dart.fn(output$35get, dart.fnType(T, []));
        function output$35set(t5) {
          output$35isSet = true;
          return output = t5;
        }
        dart.fn(output$35set, dart.fnType(dart.dynamic, [T]));
        yield this[_delegate$].runTransaction(core.Null, dart.fn(transaction => {
          if (transaction == null) dart.nullFailed(I[9], 187, 37, "transaction");
          return async.async(core.Null, (function*() {
            output$35set(yield transactionHandler(new cloud_firestore.Transaction.__(this, transaction)));
          }).bind(this));
        }, T$.TransactionPlatformToFutureOfNull()), {timeout: timeout});
        return output$35get();
      }).bind(this));
    }
    set settings(settings) {
      if (settings == null) dart.nullFailed(I[9], 197, 25, "settings");
      this[_delegate$].settings = settings;
    }
    get settings() {
      return this[_delegate$].settings;
    }
    terminate() {
      return this[_delegate$].terminate();
    }
    waitForPendingWrites() {
      return this[_delegate$].waitForPendingWrites();
    }
    _equals(other) {
      if (other == null) return false;
      return cloud_firestore.FirebaseFirestore.is(other) && other.app.name == this.app.name;
    }
    get hashCode() {
      return ui.hashValues(this.app.name, this.app.options);
    }
    toString() {
      return dart.str(dart.wrapType(cloud_firestore.FirebaseFirestore)) + "(app: " + dart.str(this.app.name) + ")";
    }
  };
  (cloud_firestore.FirebaseFirestore.__ = function(opts) {
    let app = opts && 'app' in opts ? opts.app : null;
    if (app == null) dart.nullFailed(I[9], 19, 38, "app");
    this[_delegatePackingProperty] = null;
    this[app$] = app;
    cloud_firestore.FirebaseFirestore.__proto__.new.call(this, app.name, "plugins.flutter.io/firebase_firestore");
    ;
  }).prototype = cloud_firestore.FirebaseFirestore.prototype;
  dart.addTypeTests(cloud_firestore.FirebaseFirestore);
  dart.addTypeCaches(cloud_firestore.FirebaseFirestore);
  dart.setMethodSignature(cloud_firestore.FirebaseFirestore, () => ({
    __proto__: dart.getMethods(cloud_firestore.FirebaseFirestore.__proto__),
    collection: dart.fnType(cloud_firestore.CollectionReference$(core.Map$(core.String, dart.dynamic)), [core.String]),
    batch: dart.fnType(cloud_firestore.WriteBatch, []),
    clearPersistence: dart.fnType(async.Future$(dart.void), []),
    enablePersistence: dart.fnType(async.Future$(dart.void), [], [dart.nullable(persistence_settings.PersistenceSettings)]),
    loadBundle: dart.fnType(cloud_firestore.LoadBundleTask, [typed_data.Uint8List]),
    namedQueryGet: dart.fnType(async.Future$(cloud_firestore.QuerySnapshot$(core.Map$(core.String, dart.dynamic))), [core.String], {options: get_options.GetOptions}, {}),
    collectionGroup: dart.fnType(cloud_firestore.Query$(core.Map$(core.String, dart.dynamic)), [core.String]),
    disableNetwork: dart.fnType(async.Future$(dart.void), []),
    doc: dart.fnType(cloud_firestore.DocumentReference$(core.Map$(core.String, dart.dynamic)), [core.String]),
    enableNetwork: dart.fnType(async.Future$(dart.void), []),
    snapshotsInSync: dart.fnType(async.Stream$(dart.void), []),
    runTransaction: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.Future$(T), [cloud_firestore.Transaction])], {timeout: core.Duration}, {}], T => [dart.nullable(core.Object)]),
    terminate: dart.fnType(async.Future$(dart.void), []),
    waitForPendingWrites: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(cloud_firestore.FirebaseFirestore, () => ({
    __proto__: dart.getGetters(cloud_firestore.FirebaseFirestore.__proto__),
    [_delegate$]: platform_interface_firestore.FirebaseFirestorePlatform,
    settings: settings.Settings
  }));
  dart.setSetterSignature(cloud_firestore.FirebaseFirestore, () => ({
    __proto__: dart.getSetters(cloud_firestore.FirebaseFirestore.__proto__),
    settings: settings.Settings
  }));
  dart.setLibraryUri(cloud_firestore.FirebaseFirestore, I[1]);
  dart.setFieldSignature(cloud_firestore.FirebaseFirestore, () => ({
    __proto__: dart.getFields(cloud_firestore.FirebaseFirestore.__proto__),
    [_delegatePackingProperty]: dart.fieldType(dart.nullable(platform_interface_firestore.FirebaseFirestorePlatform)),
    app: dart.fieldType(firebase_core.FirebaseApp)
  }));
  dart.defineExtensionMethods(cloud_firestore.FirebaseFirestore, ['_equals', 'toString']);
  dart.defineExtensionAccessors(cloud_firestore.FirebaseFirestore, ['hashCode']);
  dart.defineLazy(cloud_firestore.FirebaseFirestore, {
    /*cloud_firestore.FirebaseFirestore._cachedInstances*/get _cachedInstances() {
      return new (T$.IdentityMapOfString$FirebaseFirestore()).new();
    }
  }, false);
  const _is_Query_default = Symbol('_is_Query_default');
  cloud_firestore.Query$ = dart.generic(T => {
    class Query extends core.Object {}
    (Query.new = function() {
      ;
    }).prototype = Query.prototype;
    dart.addTypeTests(Query);
    Query.prototype[_is_Query_default] = true;
    dart.addTypeCaches(Query);
    dart.setLibraryUri(Query, I[1]);
    return Query;
  });
  cloud_firestore.Query = cloud_firestore.Query$();
  dart.addTypeTests(cloud_firestore.Query, _is_Query_default);
  const _is_QueryDocumentSnapshot_default = Symbol('_is_QueryDocumentSnapshot_default');
  cloud_firestore.QueryDocumentSnapshot$ = dart.generic(T => {
    class QueryDocumentSnapshot extends core.Object {}
    (QueryDocumentSnapshot.new = function() {
      ;
    }).prototype = QueryDocumentSnapshot.prototype;
    dart.addTypeTests(QueryDocumentSnapshot);
    QueryDocumentSnapshot.prototype[_is_QueryDocumentSnapshot_default] = true;
    dart.addTypeCaches(QueryDocumentSnapshot);
    QueryDocumentSnapshot[dart.implements] = () => [cloud_firestore.DocumentSnapshot$(T)];
    dart.setLibraryUri(QueryDocumentSnapshot, I[1]);
    return QueryDocumentSnapshot;
  });
  cloud_firestore.QueryDocumentSnapshot = cloud_firestore.QueryDocumentSnapshot$();
  dart.addTypeTests(cloud_firestore.QueryDocumentSnapshot, _is_QueryDocumentSnapshot_default);
  cloud_firestore._JsonQueryDocumentSnapshot = class _JsonQueryDocumentSnapshot extends cloud_firestore._JsonDocumentSnapshot {
    get exists() {
      return true;
    }
    data() {
      return dart.nullCheck(super.data());
    }
  };
  (cloud_firestore._JsonQueryDocumentSnapshot.new = function(_firestore, _delegate) {
    cloud_firestore._JsonQueryDocumentSnapshot.__proto__.new.call(this, cloud_firestore.FirebaseFirestore.as(_firestore), platform_interface_document_snapshot.DocumentSnapshotPlatform.as(_delegate));
    ;
  }).prototype = cloud_firestore._JsonQueryDocumentSnapshot.prototype;
  dart.addTypeTests(cloud_firestore._JsonQueryDocumentSnapshot);
  dart.addTypeCaches(cloud_firestore._JsonQueryDocumentSnapshot);
  cloud_firestore._JsonQueryDocumentSnapshot[dart.implements] = () => [cloud_firestore.QueryDocumentSnapshot$(core.Map$(core.String, dart.dynamic))];
  dart.setMethodSignature(cloud_firestore._JsonQueryDocumentSnapshot, () => ({
    __proto__: dart.getMethods(cloud_firestore._JsonQueryDocumentSnapshot.__proto__),
    data: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(cloud_firestore._JsonQueryDocumentSnapshot, I[1]);
  const _is__WithConverterQueryDocumentSnapshot_default = Symbol('_is__WithConverterQueryDocumentSnapshot_default');
  cloud_firestore._WithConverterQueryDocumentSnapshot$ = dart.generic(T => {
    class _WithConverterQueryDocumentSnapshot extends cloud_firestore._WithConverterDocumentSnapshot$(T) {
      get exists() {
        return true;
      }
      data() {
        return dart.nullCheck(super.data());
      }
    }
    (_WithConverterQueryDocumentSnapshot.new = function(originalQueryDocumentSnapshot, fromFirestore, toFirestore) {
      if (originalQueryDocumentSnapshot == null) dart.nullFailed(I[10], 42, 49, "originalQueryDocumentSnapshot");
      if (fromFirestore == null) dart.nullFailed(I[10], 43, 22, "fromFirestore");
      if (toFirestore == null) dart.nullFailed(I[10], 44, 20, "toFirestore");
      _WithConverterQueryDocumentSnapshot.__proto__.new.call(this, originalQueryDocumentSnapshot, fromFirestore, toFirestore);
      ;
    }).prototype = _WithConverterQueryDocumentSnapshot.prototype;
    dart.addTypeTests(_WithConverterQueryDocumentSnapshot);
    _WithConverterQueryDocumentSnapshot.prototype[_is__WithConverterQueryDocumentSnapshot_default] = true;
    dart.addTypeCaches(_WithConverterQueryDocumentSnapshot);
    _WithConverterQueryDocumentSnapshot[dart.implements] = () => [cloud_firestore.QueryDocumentSnapshot$(T)];
    dart.setMethodSignature(_WithConverterQueryDocumentSnapshot, () => ({
      __proto__: dart.getMethods(_WithConverterQueryDocumentSnapshot.__proto__),
      data: dart.fnType(T, [])
    }));
    dart.setLibraryUri(_WithConverterQueryDocumentSnapshot, I[1]);
    return _WithConverterQueryDocumentSnapshot;
  });
  cloud_firestore._WithConverterQueryDocumentSnapshot = cloud_firestore._WithConverterQueryDocumentSnapshot$();
  dart.addTypeTests(cloud_firestore._WithConverterQueryDocumentSnapshot, _is__WithConverterQueryDocumentSnapshot_default);
  const _is_QuerySnapshot_default = Symbol('_is_QuerySnapshot_default');
  cloud_firestore.QuerySnapshot$ = dart.generic(T => {
    class QuerySnapshot extends core.Object {}
    (QuerySnapshot.new = function() {
      ;
    }).prototype = QuerySnapshot.prototype;
    dart.addTypeTests(QuerySnapshot);
    QuerySnapshot.prototype[_is_QuerySnapshot_default] = true;
    dart.addTypeCaches(QuerySnapshot);
    dart.setLibraryUri(QuerySnapshot, I[1]);
    return QuerySnapshot;
  });
  cloud_firestore.QuerySnapshot = cloud_firestore.QuerySnapshot$();
  dart.addTypeTests(cloud_firestore.QuerySnapshot, _is_QuerySnapshot_default);
  cloud_firestore._JsonQuerySnapshot = class _JsonQuerySnapshot extends core.Object {
    get docs() {
      return this[_delegate$].docs[$map](cloud_firestore._JsonQueryDocumentSnapshot, dart.fn(documentDelegate => {
        if (documentDelegate == null) dart.nullFailed(I[11], 36, 13, "documentDelegate");
        return new cloud_firestore._JsonQueryDocumentSnapshot.new(this[_firestore$], documentDelegate);
      }, T$.DocumentSnapshotPlatformTo_JsonQueryDocumentSnapshot()))[$toList]();
    }
    get docChanges() {
      return this[_delegate$].docChanges[$map](cloud_firestore._JsonDocumentChange, dart.fn(documentDelegate => {
        if (documentDelegate == null) dart.nullFailed(I[11], 42, 38, "documentDelegate");
        return new cloud_firestore._JsonDocumentChange.new(this[_firestore$], documentDelegate);
      }, T$.DocumentChangePlatformTo_JsonDocumentChange()))[$toList]();
    }
    get metadata() {
      return new cloud_firestore.SnapshotMetadata.__(this[_delegate$].metadata);
    }
    get size() {
      return this[_delegate$].size;
    }
  };
  (cloud_firestore._JsonQuerySnapshot.new = function(_firestore, _delegate) {
    if (_firestore == null) dart.nullFailed(I[11], 27, 27, "_firestore");
    if (_delegate == null) dart.nullFailed(I[11], 27, 44, "_delegate");
    this[_firestore$] = _firestore;
    this[_delegate$] = _delegate;
    platform_interface_query_snapshot.QuerySnapshotPlatform.verifyExtends(this[_delegate$]);
  }).prototype = cloud_firestore._JsonQuerySnapshot.prototype;
  dart.addTypeTests(cloud_firestore._JsonQuerySnapshot);
  dart.addTypeCaches(cloud_firestore._JsonQuerySnapshot);
  cloud_firestore._JsonQuerySnapshot[dart.implements] = () => [cloud_firestore.QuerySnapshot$(core.Map$(core.String, dart.dynamic))];
  dart.setGetterSignature(cloud_firestore._JsonQuerySnapshot, () => ({
    __proto__: dart.getGetters(cloud_firestore._JsonQuerySnapshot.__proto__),
    docs: core.List$(cloud_firestore.QueryDocumentSnapshot$(core.Map$(core.String, dart.dynamic))),
    docChanges: core.List$(cloud_firestore.DocumentChange$(core.Map$(core.String, dart.dynamic))),
    metadata: cloud_firestore.SnapshotMetadata,
    size: core.int
  }));
  dart.setLibraryUri(cloud_firestore._JsonQuerySnapshot, I[1]);
  dart.setFieldSignature(cloud_firestore._JsonQuerySnapshot, () => ({
    __proto__: dart.getFields(cloud_firestore._JsonQuerySnapshot.__proto__),
    [_firestore$]: dart.finalFieldType(cloud_firestore.FirebaseFirestore),
    [_delegate$]: dart.finalFieldType(platform_interface_query_snapshot.QuerySnapshotPlatform)
  }));
  var _originalQuerySnapshot$ = dart.privateName(cloud_firestore, "_originalQuerySnapshot");
  const _is__WithConverterQuerySnapshot_default = Symbol('_is__WithConverterQuerySnapshot_default');
  cloud_firestore._WithConverterQuerySnapshot$ = dart.generic(T => {
    var QueryDocumentSnapshotOfT = () => (QueryDocumentSnapshotOfT = dart.constFn(cloud_firestore.QueryDocumentSnapshot$(T)))();
    var JSArrayOfQueryDocumentSnapshotOfT = () => (JSArrayOfQueryDocumentSnapshotOfT = dart.constFn(_interceptors.JSArray$(QueryDocumentSnapshotOfT())))();
    var _WithConverterQueryDocumentSnapshotOfT = () => (_WithConverterQueryDocumentSnapshotOfT = dart.constFn(cloud_firestore._WithConverterQueryDocumentSnapshot$(T)))();
    var DocumentChangeOfT = () => (DocumentChangeOfT = dart.constFn(cloud_firestore.DocumentChange$(T)))();
    var JSArrayOfDocumentChangeOfT = () => (JSArrayOfDocumentChangeOfT = dart.constFn(_interceptors.JSArray$(DocumentChangeOfT())))();
    var _WithConverterDocumentChangeOfT = () => (_WithConverterDocumentChangeOfT = dart.constFn(cloud_firestore._WithConverterDocumentChange$(T)))();
    class _WithConverterQuerySnapshot extends core.Object {
      get docs() {
        return (() => {
          let t7 = JSArrayOfQueryDocumentSnapshotOfT().of([]);
          for (let snapshot of this[_originalQuerySnapshot$].docs)
            t7[$add](new (_WithConverterQueryDocumentSnapshotOfT()).new(snapshot, this[_fromFirestore$], this[_toFirestore$]));
          return t7;
        })();
      }
      get docChanges() {
        return (() => {
          let t8 = JSArrayOfDocumentChangeOfT().of([]);
          for (let change of this[_originalQuerySnapshot$].docChanges)
            t8[$add](new (_WithConverterDocumentChangeOfT()).new(change, this[_fromFirestore$], this[_toFirestore$]));
          return t8;
        })();
      }
      get metadata() {
        return this[_originalQuerySnapshot$].metadata;
      }
      get size() {
        return this[_originalQuerySnapshot$].size;
      }
    }
    (_WithConverterQuerySnapshot.new = function(_originalQuerySnapshot, _fromFirestore, _toFirestore) {
      if (_originalQuerySnapshot == null) dart.nullFailed(I[11], 59, 10, "_originalQuerySnapshot");
      if (_fromFirestore == null) dart.nullFailed(I[11], 60, 10, "_fromFirestore");
      if (_toFirestore == null) dart.nullFailed(I[11], 61, 10, "_toFirestore");
      this[_originalQuerySnapshot$] = _originalQuerySnapshot;
      this[_fromFirestore$] = _fromFirestore;
      this[_toFirestore$] = _toFirestore;
      ;
    }).prototype = _WithConverterQuerySnapshot.prototype;
    dart.addTypeTests(_WithConverterQuerySnapshot);
    _WithConverterQuerySnapshot.prototype[_is__WithConverterQuerySnapshot_default] = true;
    dart.addTypeCaches(_WithConverterQuerySnapshot);
    _WithConverterQuerySnapshot[dart.implements] = () => [cloud_firestore.QuerySnapshot$(T)];
    dart.setGetterSignature(_WithConverterQuerySnapshot, () => ({
      __proto__: dart.getGetters(_WithConverterQuerySnapshot.__proto__),
      docs: core.List$(cloud_firestore.QueryDocumentSnapshot$(T)),
      docChanges: core.List$(cloud_firestore.DocumentChange$(T)),
      metadata: cloud_firestore.SnapshotMetadata,
      size: core.int
    }));
    dart.setLibraryUri(_WithConverterQuerySnapshot, I[1]);
    dart.setFieldSignature(_WithConverterQuerySnapshot, () => ({
      __proto__: dart.getFields(_WithConverterQuerySnapshot.__proto__),
      [_originalQuerySnapshot$]: dart.finalFieldType(cloud_firestore.QuerySnapshot$(core.Map$(core.String, dart.dynamic))),
      [_fromFirestore$]: dart.finalFieldType(dart.fnType(T, [cloud_firestore.DocumentSnapshot$(core.Map$(core.String, dart.dynamic)), dart.nullable(cloud_firestore.SnapshotOptions)])),
      [_toFirestore$]: dart.finalFieldType(dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [T, dart.nullable(set_options.SetOptions)]))
    }));
    return _WithConverterQuerySnapshot;
  });
  cloud_firestore._WithConverterQuerySnapshot = cloud_firestore._WithConverterQuerySnapshot$();
  dart.addTypeTests(cloud_firestore._WithConverterQuerySnapshot, _is__WithConverterQuerySnapshot_default);
  cloud_firestore.SnapshotMetadata = class SnapshotMetadata extends core.Object {
    get hasPendingWrites() {
      return this[_delegate$].hasPendingWrites;
    }
    get isFromCache() {
      return this[_delegate$].isFromCache;
    }
  };
  (cloud_firestore.SnapshotMetadata.__ = function(_delegate) {
    if (_delegate == null) dart.nullFailed(I[12], 11, 27, "_delegate");
    this[_delegate$] = _delegate;
    ;
  }).prototype = cloud_firestore.SnapshotMetadata.prototype;
  dart.addTypeTests(cloud_firestore.SnapshotMetadata);
  dart.addTypeCaches(cloud_firestore.SnapshotMetadata);
  dart.setGetterSignature(cloud_firestore.SnapshotMetadata, () => ({
    __proto__: dart.getGetters(cloud_firestore.SnapshotMetadata.__proto__),
    hasPendingWrites: core.bool,
    isFromCache: core.bool
  }));
  dart.setLibraryUri(cloud_firestore.SnapshotMetadata, I[1]);
  dart.setFieldSignature(cloud_firestore.SnapshotMetadata, () => ({
    __proto__: dart.getFields(cloud_firestore.SnapshotMetadata.__proto__),
    [_delegate$]: dart.fieldType(snapshot_metadata.SnapshotMetadataPlatform)
  }));
  cloud_firestore.Transaction = class Transaction extends core.Object {
    get(T, documentReference) {
      if (documentReference == null) dart.nullFailed(I[13], 25, 26, "documentReference");
      return async.async(cloud_firestore.DocumentSnapshot$(T), (function* get() {
        let documentSnapshotPlatform = (yield this[_delegate$].get(documentReference.path));
        let snapshot = new cloud_firestore._JsonDocumentSnapshot.new(this[_firestore$], documentSnapshotPlatform);
        if (cloud_firestore.DocumentSnapshot$(T).is(snapshot)) {
          return cloud_firestore.DocumentSnapshot$(T).as(snapshot);
        }
        let withConverterDocRef = cloud_firestore._WithConverterDocumentReference$(T).as(documentReference);
        return new (cloud_firestore._WithConverterDocumentSnapshot$(T)).new(snapshot, withConverterDocRef[_fromFirestore$], dart.fnType(T$.MapOfString$ObjectN(), [T, T$.SetOptionsN()]).as(withConverterDocRef[_toFirestore$]));
      }).bind(this));
    }
    delete(documentReference) {
      if (documentReference == null) dart.nullFailed(I[13], 48, 40, "documentReference");
      if (!dart.equals(documentReference.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[13], 50, 7, "documentReference.firestore == _firestore");
      return new cloud_firestore.Transaction.__(this[_firestore$], this[_delegate$].delete(documentReference.path));
    }
    update(documentReference, data) {
      if (documentReference == null) dart.nullFailed(I[13], 63, 23, "documentReference");
      if (data == null) dart.nullFailed(I[13], 64, 26, "data");
      if (!dart.equals(documentReference.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[13], 67, 7, "documentReference.firestore == _firestore");
      return new cloud_firestore.Transaction.__(this[_firestore$], this[_delegate$].update(documentReference.path, dart.nullCheck(cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(data))));
    }
    set(T, documentReference, data, options = null) {
      let t11, t10, t9;
      if (documentReference == null) dart.nullFailed(I[13], 84, 26, "documentReference");
      if (!dart.equals(documentReference.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[13], 89, 7, "documentReference.firestore == _firestore");
      let firestoreData = null;
      if (cloud_firestore._JsonDocumentReference.is(documentReference)) {
        firestoreData = T$.MapOfString$dynamic().as(data);
      } else {
        let withConverterDoc = cloud_firestore._WithConverterDocumentReference$(T).as(documentReference);
        firestoreData = (t9 = withConverterDoc, t10 = data, t11 = options, dart.fnType(T$.MapOfString$ObjectN(), [T, T$.SetOptionsN()]).as(t9[_toFirestore$])(t10, t11));
      }
      return new cloud_firestore.Transaction.__(this[_firestore$], this[_delegate$].set(documentReference.path, dart.nullCheck(cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(firestoreData)), options));
    }
  };
  (cloud_firestore.Transaction.__ = function(_firestore, _delegate) {
    if (_firestore == null) dart.nullFailed(I[13], 16, 22, "_firestore");
    if (_delegate == null) dart.nullFailed(I[13], 16, 39, "_delegate");
    this[_firestore$] = _firestore;
    this[_delegate$] = _delegate;
    platform_interface_transaction.TransactionPlatform.verifyExtends(this[_delegate$]);
  }).prototype = cloud_firestore.Transaction.prototype;
  dart.addTypeTests(cloud_firestore.Transaction);
  dart.addTypeCaches(cloud_firestore.Transaction);
  dart.setMethodSignature(cloud_firestore.Transaction, () => ({
    __proto__: dart.getMethods(cloud_firestore.Transaction.__proto__),
    get: dart.gFnType(T => [async.Future$(cloud_firestore.DocumentSnapshot$(T)), [cloud_firestore.DocumentReference$(T)]], T => [dart.nullable(core.Object)]),
    delete: dart.fnType(cloud_firestore.Transaction, [cloud_firestore.DocumentReference$(dart.nullable(core.Object))]),
    update: dart.fnType(cloud_firestore.Transaction, [cloud_firestore.DocumentReference$(dart.nullable(core.Object)), core.Map$(core.String, dart.dynamic)]),
    set: dart.gFnType(T => [cloud_firestore.Transaction, [cloud_firestore.DocumentReference$(T), T], [dart.nullable(set_options.SetOptions)]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(cloud_firestore.Transaction, I[1]);
  dart.setFieldSignature(cloud_firestore.Transaction, () => ({
    __proto__: dart.getFields(cloud_firestore.Transaction.__proto__),
    [_firestore$]: dart.finalFieldType(cloud_firestore.FirebaseFirestore),
    [_delegate$]: dart.finalFieldType(platform_interface_transaction.TransactionPlatform)
  }));
  cloud_firestore._CodecUtility = class _CodecUtility extends core.Object {
    static replaceValueWithDelegatesInMap(data) {
      if (data == null) {
        return null;
      }
      let output = T$.LinkedHashMapOfString$dynamic().from(data);
      output[$updateAll](dart.fn((_, value) => {
        if (_ == null) dart.nullFailed(I[14], 14, 23, "_");
        return cloud_firestore._CodecUtility.valueEncode(value);
      }, T$.StringAnddynamicTodynamic()));
      return output;
    }
    static replaceValueWithDelegatesInArray(data) {
      if (data == null) {
        return null;
      }
      return core.List.from(data)[$map](dart.dynamic, C[5] || CT.C5)[$toList]();
    }
    static replaceDelegatesWithValueInMap(data, firestore) {
      if (firestore == null) dart.nullFailed(I[14], 26, 54, "firestore");
      if (data == null) {
        return null;
      }
      let output = T$.LinkedHashMapOfString$dynamic().from(data);
      output[$updateAll](dart.fn((_, value) => {
        if (_ == null) dart.nullFailed(I[14], 31, 23, "_");
        return cloud_firestore._CodecUtility.valueDecode(value, firestore);
      }, T$.StringAnddynamicTodynamic()));
      return output;
    }
    static replaceDelegatesWithValueInArray(data, firestore) {
      if (firestore == null) dart.nullFailed(I[14], 36, 46, "firestore");
      if (data == null) {
        return null;
      }
      return core.List.from(data)[$map](dart.dynamic, dart.fn(value => cloud_firestore._CodecUtility.valueDecode(value, firestore), T$.dynamicTodynamic()))[$toList]();
    }
    static valueEncode(value) {
      if (cloud_firestore._JsonDocumentReference.is(value)) {
        return value[_delegate$];
      } else if (core.List.is(value)) {
        return cloud_firestore._CodecUtility.replaceValueWithDelegatesInArray(value);
      } else if (core.Map.is(value)) {
        return cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(value);
      }
      return value;
    }
    static valueDecode(value, firestore) {
      if (firestore == null) dart.nullFailed(I[14], 56, 63, "firestore");
      if (platform_interface_document_reference.DocumentReferencePlatform.is(value)) {
        return new cloud_firestore._JsonDocumentReference.new(firestore, value);
      } else if (core.List.is(value)) {
        return cloud_firestore._CodecUtility.replaceDelegatesWithValueInArray(value, firestore);
      } else if (core.Map.is(value)) {
        return cloud_firestore._CodecUtility.replaceDelegatesWithValueInMap(value, firestore);
      }
      return value;
    }
  };
  (cloud_firestore._CodecUtility.new = function() {
    ;
  }).prototype = cloud_firestore._CodecUtility.prototype;
  dart.addTypeTests(cloud_firestore._CodecUtility);
  dart.addTypeCaches(cloud_firestore._CodecUtility);
  dart.setLibraryUri(cloud_firestore._CodecUtility, I[1]);
  cloud_firestore.WriteBatch = class WriteBatch extends core.Object {
    commit() {
      return this[_delegate$].commit();
    }
    delete(document) {
      if (document == null) dart.nullFailed(I[15], 27, 33, "document");
      if (!dart.equals(document.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[15], 29, 7, "document.firestore == _firestore");
      return this[_delegate$].delete(document.path);
    }
    set(T, document, data, options = null) {
      let t11, t10, t9;
      if (document == null) dart.nullFailed(I[15], 42, 26, "document");
      if (!dart.equals(document.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[15], 47, 7, "document.firestore == _firestore");
      let firestoreData = null;
      if (cloud_firestore._JsonDocumentReference.is(document)) {
        firestoreData = T$.MapOfString$dynamic().as(data);
      } else {
        let withConverterDoc = cloud_firestore._WithConverterDocumentReference$(T).as(document);
        firestoreData = (t9 = withConverterDoc, t10 = data, t11 = options, dart.fnType(T$.MapOfString$ObjectN(), [T, T$.SetOptionsN()]).as(t9[_toFirestore$])(t10, t11));
      }
      return this[_delegate$].set(document.path, dart.nullCheck(cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(firestoreData)), options);
    }
    update(document, data) {
      if (document == null) dart.nullFailed(I[15], 69, 33, "document");
      if (data == null) dart.nullFailed(I[15], 69, 64, "data");
      if (!dart.equals(document.firestore, this[_firestore$])) dart.assertFailed("the document provided is from a different Firestore instance", I[15], 71, 7, "document.firestore == _firestore");
      return this[_delegate$].update(document.path, dart.nullCheck(cloud_firestore._CodecUtility.replaceValueWithDelegatesInMap(data)));
    }
  };
  (cloud_firestore.WriteBatch.__ = function(_firestore, _delegate) {
    if (_firestore == null) dart.nullFailed(I[15], 14, 21, "_firestore");
    if (_delegate == null) dart.nullFailed(I[15], 14, 38, "_delegate");
    this[_firestore$] = _firestore;
    this[_delegate$] = _delegate;
    platform_interface_write_batch.WriteBatchPlatform.verifyExtends(this[_delegate$]);
  }).prototype = cloud_firestore.WriteBatch.prototype;
  dart.addTypeTests(cloud_firestore.WriteBatch);
  dart.addTypeCaches(cloud_firestore.WriteBatch);
  dart.setMethodSignature(cloud_firestore.WriteBatch, () => ({
    __proto__: dart.getMethods(cloud_firestore.WriteBatch.__proto__),
    commit: dart.fnType(async.Future$(dart.void), []),
    delete: dart.fnType(dart.void, [cloud_firestore.DocumentReference$(dart.nullable(core.Object))]),
    set: dart.gFnType(T => [dart.void, [cloud_firestore.DocumentReference$(T), T], [dart.nullable(set_options.SetOptions)]], T => [dart.nullable(core.Object)]),
    update: dart.fnType(dart.void, [cloud_firestore.DocumentReference$(dart.nullable(core.Object)), core.Map$(core.String, dart.dynamic)])
  }));
  dart.setLibraryUri(cloud_firestore.WriteBatch, I[1]);
  dart.setFieldSignature(cloud_firestore.WriteBatch, () => ({
    __proto__: dart.getFields(cloud_firestore.WriteBatch.__proto__),
    [_firestore$]: dart.finalFieldType(cloud_firestore.FirebaseFirestore),
    [_delegate$]: dart.finalFieldType(platform_interface_write_batch.WriteBatchPlatform)
  }));
  dart.trackLibraries("packages/cloud_firestore/cloud_firestore.dart", {
    "package:cloud_firestore/cloud_firestore.dart": cloud_firestore
  }, {
    "package:cloud_firestore/cloud_firestore.dart": ["src/load_bundle_task.dart", "src/load_bundle_task_snapshot.dart", "src/collection_reference.dart", "src/document_change.dart", "src/document_reference.dart", "src/document_snapshot.dart", "src/field_value.dart", "src/firestore.dart", "src/query.dart", "src/query_document_snapshot.dart", "src/query_snapshot.dart", "src/snapshot_metadata.dart", "src/transaction.dart", "src/utils/codec_utility.dart", "src/write_batch.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["src/load_bundle_task.dart","src/load_bundle_task_snapshot.dart","src/collection_reference.dart","src/query.dart","src/document_change.dart","src/document_reference.dart","src/document_snapshot.dart","src/field_value.dart","src/firestore.dart","src/query_document_snapshot.dart","src/query_snapshot.dart","src/snapshot_metadata.dart","src/transaction.dart","src/utils/codec_utility.dart","src/write_batch.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/cloud_firestore/cloud_firestore.dart.lib.js"}');
  // Exports:
  return {
    cloud_firestore: cloud_firestore
  };
}));

//# sourceMappingURL=cloud_firestore.dart.lib.js.map
