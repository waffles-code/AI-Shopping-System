define(['dart_sdk', 'packages/firebase_auth_platform_interface/src/auth_provider.dart', 'packages/firebase_auth_platform_interface/src/auth_credential.dart', 'packages/plugin_platform_interface/plugin_platform_interface.dart', 'packages/firebase_auth_platform_interface/src/firebase_auth_exception.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/firebase_auth_platform_interface/src/user_metadata.dart', 'packages/firebase_auth_platform_interface/src/user_info.dart', 'packages/firebase_auth_platform_interface/src/id_token_result.dart', 'packages/firebase_auth_platform_interface/src/action_code_settings.dart', 'packages/firebase_auth_platform_interface/src/additional_user_info.dart', 'packages/firebase_auth_platform_interface/src/action_code_info.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/firebase_core/firebase_core.dart'], (function load__packages__firebase_auth_platform_interface__src__types_dart(dart_sdk, packages__firebase_auth_platform_interface__src__auth_provider$46dart, packages__firebase_auth_platform_interface__src__auth_credential$46dart, packages__plugin_platform_interface__plugin_platform_interface$46dart, packages__firebase_auth_platform_interface__src__firebase_auth_exception$46dart, packages__flutter__src__services__system_channels$46dart, packages__firebase_auth_platform_interface__src__user_metadata$46dart, packages__firebase_auth_platform_interface__src__user_info$46dart, packages__firebase_auth_platform_interface__src__id_token_result$46dart, packages__firebase_auth_platform_interface__src__action_code_settings$46dart, packages__firebase_auth_platform_interface__src__additional_user_info$46dart, packages__firebase_auth_platform_interface__src__action_code_info$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__firebase_core__firebase_core$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const auth_provider = packages__firebase_auth_platform_interface__src__auth_provider$46dart.src__auth_provider;
  const auth_credential = packages__firebase_auth_platform_interface__src__auth_credential$46dart.src__auth_credential;
  const plugin_platform_interface = packages__plugin_platform_interface__plugin_platform_interface$46dart.plugin_platform_interface;
  const firebase_auth_exception = packages__firebase_auth_platform_interface__src__firebase_auth_exception$46dart.src__firebase_auth_exception;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const user_metadata = packages__firebase_auth_platform_interface__src__user_metadata$46dart.src__user_metadata;
  const user_info = packages__firebase_auth_platform_interface__src__user_info$46dart.src__user_info;
  const id_token_result = packages__firebase_auth_platform_interface__src__id_token_result$46dart.src__id_token_result;
  const action_code_settings = packages__firebase_auth_platform_interface__src__action_code_settings$46dart.src__action_code_settings;
  const additional_user_info = packages__firebase_auth_platform_interface__src__additional_user_info$46dart.src__additional_user_info;
  const action_code_info = packages__firebase_auth_platform_interface__src__action_code_info$46dart.src__action_code_info;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const firebase_core = packages__firebase_core__firebase_core$46dart.firebase_core;
  var types = Object.create(dart.library);
  var twitter_auth = Object.create(dart.library);
  var phone_auth = Object.create(dart.library);
  var oauth = Object.create(dart.library);
  var google_auth = Object.create(dart.library);
  var github_auth = Object.create(dart.library);
  var facebook_auth = Object.create(dart.library);
  var email_auth = Object.create(dart.library);
  var platform_interface_recaptcha_verifier_factory = Object.create(dart.library);
  var phone_auth_callbacks = Object.create(dart.library);
  var exception$ = Object.create(dart.library);
  var platform_interface_user = Object.create(dart.library);
  var platform_interface_user_credential = Object.create(dart.library);
  var method_channel_user_credential = Object.create(dart.library);
  var method_channel_user = Object.create(dart.library);
  var method_channel_firebase_auth = Object.create(dart.library);
  var platform_interface_firebase_auth = Object.create(dart.library);
  var platform_interface_confirmation_result = Object.create(dart.library);
  var firebase_auth_platform_interface = Object.create(dart.library);
  var $add = dartx.add;
  var $_get = dartx._get;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $_set = dartx._set;
  var $cast = dartx.cast;
  var $putIfAbsent = dartx.putIfAbsent;
  var $contains = dartx.contains;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    IdentityMapOfString$StringN: () => (T.IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, T.StringN())))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    LinkedHashMapOfString$dynamic: () => (T.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(core.String, dart.dynamic)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    LinkedHashMapOfString$StringN: () => (T.LinkedHashMapOfString$StringN = dart.constFn(collection.LinkedHashMap$(core.String, T.StringN())))(),
    dynamicToUserInfo: () => (T.dynamicToUserInfo = dart.constFn(dart.fnType(user_info.UserInfo, [dart.dynamic])))(),
    FutureOrOfString: () => (T.FutureOrOfString = dart.constFn(async.FutureOr$(core.String)))(),
    MethodChannelUserN: () => (T.MethodChannelUserN = dart.constFn(dart.nullable(method_channel_user.MethodChannelUser)))(),
    UserPlatformN: () => (T.UserPlatformN = dart.constFn(dart.nullable(platform_interface_user.UserPlatform)))(),
    StreamControllerOfUserPlatformN: () => (T.StreamControllerOfUserPlatformN = dart.constFn(async.StreamController$(T.UserPlatformN())))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    MethodCallToFutureOfvoid: () => (T.MethodCallToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [message_codec.MethodCall])))(),
    MapN: () => (T.MapN = dart.constFn(dart.nullable(core.Map)))(),
    VoidToMethodChannelFirebaseAuth: () => (T.VoidToMethodChannelFirebaseAuth = dart.constFn(dart.fnType(method_channel_firebase_auth.MethodChannelFirebaseAuth, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    IdentityMapOfString$MethodChannelFirebaseAuth: () => (T.IdentityMapOfString$MethodChannelFirebaseAuth = dart.constFn(_js_helper.IdentityMap$(core.String, method_channel_firebase_auth.MethodChannelFirebaseAuth)))(),
    IdentityMapOfString$StreamControllerOfUserPlatformN: () => (T.IdentityMapOfString$StreamControllerOfUserPlatformN = dart.constFn(_js_helper.IdentityMap$(core.String, T.StreamControllerOfUserPlatformN())))(),
    IdentityMapOfint$PhoneAuthCallbacks: () => (T.IdentityMapOfint$PhoneAuthCallbacks = dart.constFn(_js_helper.IdentityMap$(core.int, phone_auth_callbacks.PhoneAuthCallbacks)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: types.Persistence.prototype,
        [_name$]: "Persistence.LOCAL",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: types.Persistence.prototype,
        [_name$]: "Persistence.NONE",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: types.Persistence.prototype,
        [_name$]: "Persistence.SESSION",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], types.Persistence);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.prototype,
        [_name$0]: "RecaptchaVerifierSize.normal",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.prototype,
        [_name$0]: "RecaptchaVerifierSize.compact",
        index: 1
      });
    },
    get C6() {
      return C[6] = dart.constList([C[4] || CT.C4, C[5] || CT.C5], platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize);
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.prototype,
        [_name$0]: "RecaptchaVerifierTheme.light",
        index: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.prototype,
        [_name$0]: "RecaptchaVerifierTheme.dark",
        index: 1
      });
    },
    get C9() {
      return C[9] = dart.constList([C[7] || CT.C7, C[8] || CT.C8], platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme);
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 30000000
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[13] || CT.C13
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[12] || CT.C12,
        [MethodChannel_name]: "plugins.flutter.io/firebase_auth"
      });
    }
  }, false);
  var C = Array(14).fill(void 0);
  var I = [
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/types.dart",
    "package:firebase_auth_platform_interface/src/types.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/providers/twitter_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/twitter_auth.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/providers/oauth.dart",
    "package:firebase_auth_platform_interface/src/providers/oauth.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/providers/phone_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/phone_auth.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/providers/google_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/google_auth.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/providers/github_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/github_auth.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/providers/facebook_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/facebook_auth.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/providers/email_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/email_auth.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/platform_interface/platform_interface_recaptcha_verifier_factory.dart",
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_recaptcha_verifier_factory.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/method_channel/utils/phone_auth_callbacks.dart",
    "package:firebase_auth_platform_interface/src/method_channel/utils/phone_auth_callbacks.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/method_channel/utils/exception.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/platform_interface/platform_interface_user.dart",
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_user.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/platform_interface/platform_interface_user_credential.dart",
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_user_credential.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/method_channel/method_channel_user_credential.dart",
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_user_credential.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/method_channel/method_channel_user.dart",
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_user.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/method_channel/method_channel_firebase_auth.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/platform_interface/platform_interface_firebase_auth.dart",
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_firebase_auth.dart",
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_firebase_auth.dart",
    "file:///C:/Src/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth_platform_interface-4.1.0/lib/src/platform_interface/platform_interface_confirmation_result.dart",
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_confirmation_result.dart"
  ];
  var _name$ = dart.privateName(types, "_name");
  types.Persistence = class Persistence extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (types.Persistence.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 32, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 32, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = types.Persistence.prototype;
  dart.addTypeTests(types.Persistence);
  dart.addTypeCaches(types.Persistence);
  dart.setLibraryUri(types.Persistence, I[1]);
  dart.setFieldSignature(types.Persistence, () => ({
    __proto__: dart.getFields(types.Persistence.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.Persistence, ['toString']);
  types.Persistence.LOCAL = C[0] || CT.C0;
  types.Persistence.NONE = C[1] || CT.C1;
  types.Persistence.SESSION = C[2] || CT.C2;
  types.Persistence.values = C[3] || CT.C3;
  var _parameters = dart.privateName(twitter_auth, "_parameters");
  twitter_auth.TwitterAuthProvider = class TwitterAuthProvider extends auth_provider.AuthProvider {
    static get TWITTER_SIGN_IN_METHOD() {
      return "twitter.com";
    }
    static get PROVIDER_ID() {
      return "twitter.com";
    }
    get parameters() {
      return this[_parameters];
    }
    setCustomParameters(customOAuthParameters) {
      if (customOAuthParameters == null) dart.nullFailed(I[2], 62, 27, "customOAuthParameters");
      this[_parameters] = customOAuthParameters;
      return this;
    }
    static credential(opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      if (accessToken == null) dart.nullFailed(I[2], 71, 21, "accessToken");
      let secret = opts && 'secret' in opts ? opts.secret : null;
      if (secret == null) dart.nullFailed(I[2], 72, 21, "secret");
      return twitter_auth.TwitterAuthCredential._credential({accessToken: accessToken, secret: secret});
    }
  };
  (twitter_auth.TwitterAuthProvider.new = function() {
    this[_parameters] = new _js_helper.LinkedMap.new();
    twitter_auth.TwitterAuthProvider.__proto__.new.call(this, "twitter.com");
    ;
  }).prototype = twitter_auth.TwitterAuthProvider.prototype;
  dart.addTypeTests(twitter_auth.TwitterAuthProvider);
  dart.addTypeCaches(twitter_auth.TwitterAuthProvider);
  dart.setMethodSignature(twitter_auth.TwitterAuthProvider, () => ({
    __proto__: dart.getMethods(twitter_auth.TwitterAuthProvider.__proto__),
    setCustomParameters: dart.fnType(twitter_auth.TwitterAuthProvider, [core.Map])
  }));
  dart.setGetterSignature(twitter_auth.TwitterAuthProvider, () => ({
    __proto__: dart.getGetters(twitter_auth.TwitterAuthProvider.__proto__),
    parameters: core.Map
  }));
  dart.setLibraryUri(twitter_auth.TwitterAuthProvider, I[3]);
  dart.setFieldSignature(twitter_auth.TwitterAuthProvider, () => ({
    __proto__: dart.getFields(twitter_auth.TwitterAuthProvider.__proto__),
    [_parameters]: dart.fieldType(core.Map)
  }));
  var accessToken$ = dart.privateName(oauth, "OAuthCredential.accessToken");
  var idToken$ = dart.privateName(oauth, "OAuthCredential.idToken");
  var secret$ = dart.privateName(oauth, "OAuthCredential.secret");
  var rawNonce$ = dart.privateName(oauth, "OAuthCredential.rawNonce");
  oauth.OAuthCredential = class OAuthCredential extends auth_credential.AuthCredential {
    get accessToken() {
      return this[accessToken$];
    }
    set accessToken(value) {
      super.accessToken = value;
    }
    get idToken() {
      return this[idToken$];
    }
    set idToken(value) {
      super.idToken = value;
    }
    get secret() {
      return this[secret$];
    }
    set secret(value) {
      super.secret = value;
    }
    get rawNonce() {
      return this[rawNonce$];
    }
    set rawNonce(value) {
      super.rawNonce = value;
    }
    asMap() {
      return new (T.IdentityMapOfString$StringN()).from(["providerId", this.providerId, "signInMethod", this.signInMethod, "idToken", this.idToken, "accessToken", this.accessToken, "secret", this.secret, "rawNonce", this.rawNonce]);
    }
  };
  (oauth.OAuthCredential.new = function(opts) {
    let providerId = opts && 'providerId' in opts ? opts.providerId : null;
    if (providerId == null) dart.nullFailed(I[4], 73, 21, "providerId");
    let signInMethod = opts && 'signInMethod' in opts ? opts.signInMethod : null;
    if (signInMethod == null) dart.nullFailed(I[4], 74, 21, "signInMethod");
    let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
    let idToken = opts && 'idToken' in opts ? opts.idToken : null;
    let secret = opts && 'secret' in opts ? opts.secret : null;
    let rawNonce = opts && 'rawNonce' in opts ? opts.rawNonce : null;
    this[accessToken$] = accessToken;
    this[idToken$] = idToken;
    this[secret$] = secret;
    this[rawNonce$] = rawNonce;
    oauth.OAuthCredential.__proto__.new.call(this, {providerId: providerId, signInMethod: signInMethod});
    ;
  }).prototype = oauth.OAuthCredential.prototype;
  dart.addTypeTests(oauth.OAuthCredential);
  dart.addTypeCaches(oauth.OAuthCredential);
  dart.setMethodSignature(oauth.OAuthCredential, () => ({
    __proto__: dart.getMethods(oauth.OAuthCredential.__proto__),
    asMap: dart.fnType(core.Map$(core.String, dart.nullable(core.String)), [])
  }));
  dart.setLibraryUri(oauth.OAuthCredential, I[5]);
  dart.setFieldSignature(oauth.OAuthCredential, () => ({
    __proto__: dart.getFields(oauth.OAuthCredential.__proto__),
    accessToken: dart.finalFieldType(dart.nullable(core.String)),
    idToken: dart.finalFieldType(dart.nullable(core.String)),
    secret: dart.finalFieldType(dart.nullable(core.String)),
    rawNonce: dart.finalFieldType(dart.nullable(core.String))
  }));
  twitter_auth.TwitterAuthCredential = class TwitterAuthCredential extends oauth.OAuthCredential {
    static _credential(opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      if (accessToken == null) dart.nullFailed(I[2], 94, 21, "accessToken");
      let secret = opts && 'secret' in opts ? opts.secret : null;
      if (secret == null) dart.nullFailed(I[2], 95, 21, "secret");
      return new twitter_auth.TwitterAuthCredential.__({accessToken: accessToken, secret: secret});
    }
  };
  (twitter_auth.TwitterAuthCredential.__ = function(opts) {
    let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
    if (accessToken == null) dart.nullFailed(I[2], 85, 21, "accessToken");
    let secret = opts && 'secret' in opts ? opts.secret : null;
    if (secret == null) dart.nullFailed(I[2], 86, 21, "secret");
    twitter_auth.TwitterAuthCredential.__proto__.new.call(this, {providerId: "twitter.com", signInMethod: "twitter.com", accessToken: accessToken, secret: secret});
    ;
  }).prototype = twitter_auth.TwitterAuthCredential.prototype;
  dart.addTypeTests(twitter_auth.TwitterAuthCredential);
  dart.addTypeCaches(twitter_auth.TwitterAuthCredential);
  dart.setLibraryUri(twitter_auth.TwitterAuthCredential, I[3]);
  dart.defineLazy(twitter_auth, {
    /*twitter_auth._kProviderId*/get _kProviderId() {
      return "twitter.com";
    }
  }, false);
  phone_auth.PhoneAuthProvider = class PhoneAuthProvider extends auth_provider.AuthProvider {
    static get PHONE_SIGN_IN_METHOD() {
      return "phone";
    }
    static get PROVIDER_ID() {
      return "phone";
    }
    static credential(opts) {
      let verificationId = opts && 'verificationId' in opts ? opts.verificationId : null;
      if (verificationId == null) dart.nullFailed(I[6], 31, 21, "verificationId");
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      if (smsCode == null) dart.nullFailed(I[6], 32, 21, "smsCode");
      return phone_auth.PhoneAuthCredential._credential(verificationId, smsCode);
    }
    static credentialFromToken(token, opts) {
      if (token == null) dart.nullFailed(I[6], 39, 54, "token");
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      return phone_auth.PhoneAuthCredential._credentialFromToken(token, {smsCode: smsCode});
    }
  };
  (phone_auth.PhoneAuthProvider.new = function() {
    phone_auth.PhoneAuthProvider.__proto__.new.call(this, "phone");
    ;
  }).prototype = phone_auth.PhoneAuthProvider.prototype;
  dart.addTypeTests(phone_auth.PhoneAuthProvider);
  dart.addTypeCaches(phone_auth.PhoneAuthProvider);
  dart.setLibraryUri(phone_auth.PhoneAuthProvider, I[7]);
  var verificationId$ = dart.privateName(phone_auth, "PhoneAuthCredential.verificationId");
  var smsCode$ = dart.privateName(phone_auth, "PhoneAuthCredential.smsCode");
  phone_auth.PhoneAuthCredential = class PhoneAuthCredential extends auth_credential.AuthCredential {
    get verificationId() {
      return this[verificationId$];
    }
    set verificationId(value) {
      super.verificationId = value;
    }
    get smsCode() {
      return this[smsCode$];
    }
    set smsCode(value) {
      super.smsCode = value;
    }
    static _credential(verificationId, smsCode) {
      if (verificationId == null) dart.nullFailed(I[6], 58, 14, "verificationId");
      if (smsCode == null) dart.nullFailed(I[6], 58, 37, "smsCode");
      return new phone_auth.PhoneAuthCredential.__({verificationId: verificationId, smsCode: smsCode});
    }
    static _credentialFromToken(token, opts) {
      if (token == null) dart.nullFailed(I[6], 64, 9, "token");
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      return new phone_auth.PhoneAuthCredential.__({token: token, smsCode: smsCode});
    }
    asMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["providerId", this.providerId, "signInMethod", this.signInMethod, "verificationId", this.verificationId, "smsCode", this.smsCode, "token", this.token]);
    }
  };
  (phone_auth.PhoneAuthCredential.__ = function(opts) {
    let verificationId = opts && 'verificationId' in opts ? opts.verificationId : null;
    let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
    let token = opts && 'token' in opts ? opts.token : null;
    this[verificationId$] = verificationId;
    this[smsCode$] = smsCode;
    phone_auth.PhoneAuthCredential.__proto__.new.call(this, {providerId: "phone", signInMethod: "phone", token: token});
    ;
  }).prototype = phone_auth.PhoneAuthCredential.prototype;
  dart.addTypeTests(phone_auth.PhoneAuthCredential);
  dart.addTypeCaches(phone_auth.PhoneAuthCredential);
  dart.setLibraryUri(phone_auth.PhoneAuthCredential, I[7]);
  dart.setFieldSignature(phone_auth.PhoneAuthCredential, () => ({
    __proto__: dart.getFields(phone_auth.PhoneAuthCredential.__proto__),
    verificationId: dart.finalFieldType(dart.nullable(core.String)),
    smsCode: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(phone_auth, {
    /*phone_auth._kProviderId*/get _kProviderId() {
      return "phone";
    }
  }, false);
  var _scopes = dart.privateName(oauth, "_scopes");
  var _parameters$ = dart.privateName(oauth, "_parameters");
  oauth.OAuthProvider = class OAuthProvider extends auth_provider.AuthProvider {
    get scopes() {
      return this[_scopes];
    }
    get parameters() {
      return this[_parameters$];
    }
    addScope(scope) {
      if (scope == null) dart.nullFailed(I[4], 34, 33, "scope");
      this[_scopes][$add](scope);
      return this;
    }
    setCustomParameters(customOAuthParameters) {
      if (customOAuthParameters == null) dart.nullFailed(I[4], 43, 27, "customOAuthParameters");
      this[_parameters$] = customOAuthParameters;
      return this;
    }
    credential(opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      let idToken = opts && 'idToken' in opts ? opts.idToken : null;
      let rawNonce = opts && 'rawNonce' in opts ? opts.rawNonce : null;
      return new oauth.OAuthCredential.new({providerId: this.providerId, signInMethod: "oauth", accessToken: accessToken, idToken: idToken, rawNonce: rawNonce});
    }
  };
  (oauth.OAuthProvider.new = function(providerId) {
    if (providerId == null) dart.nullFailed(I[4], 15, 24, "providerId");
    this[_scopes] = T.JSArrayOfString().of([]);
    this[_parameters$] = null;
    oauth.OAuthProvider.__proto__.new.call(this, providerId);
    ;
  }).prototype = oauth.OAuthProvider.prototype;
  dart.addTypeTests(oauth.OAuthProvider);
  dart.addTypeCaches(oauth.OAuthProvider);
  dart.setMethodSignature(oauth.OAuthProvider, () => ({
    __proto__: dart.getMethods(oauth.OAuthProvider.__proto__),
    addScope: dart.fnType(oauth.OAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(oauth.OAuthProvider, [core.Map]),
    credential: dart.fnType(oauth.OAuthCredential, [], {accessToken: dart.nullable(core.String), idToken: dart.nullable(core.String), rawNonce: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(oauth.OAuthProvider, () => ({
    __proto__: dart.getGetters(oauth.OAuthProvider.__proto__),
    scopes: core.List$(core.String),
    parameters: dart.nullable(core.Map)
  }));
  dart.setLibraryUri(oauth.OAuthProvider, I[5]);
  dart.setFieldSignature(oauth.OAuthProvider, () => ({
    __proto__: dart.getFields(oauth.OAuthProvider.__proto__),
    [_scopes]: dart.fieldType(core.List$(core.String)),
    [_parameters$]: dart.fieldType(dart.nullable(core.Map))
  }));
  var _scopes$ = dart.privateName(google_auth, "_scopes");
  var _parameters$0 = dart.privateName(google_auth, "_parameters");
  google_auth.GoogleAuthProvider = class GoogleAuthProvider extends auth_provider.AuthProvider {
    static get GOOGLE_SIGN_IN_METHOD() {
      return "google.com";
    }
    static get PROVIDER_ID() {
      return "google.com";
    }
    get scopes() {
      return this[_scopes$];
    }
    get parameters() {
      return this[_parameters$0];
    }
    addScope(scope) {
      if (scope == null) dart.nullFailed(I[8], 64, 38, "scope");
      this[_scopes$][$add](scope);
      return this;
    }
    setCustomParameters(customOAuthParameters) {
      if (customOAuthParameters == null) dart.nullFailed(I[8], 72, 27, "customOAuthParameters");
      this[_parameters$0] = customOAuthParameters;
      return this;
    }
    static credential(opts) {
      let idToken = opts && 'idToken' in opts ? opts.idToken : null;
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      if (!(accessToken != null || idToken != null)) dart.assertFailed("At least one of ID token and access token is required", I[8], 80, 12, "accessToken != null || idToken != null");
      return google_auth.GoogleAuthCredential._credential({idToken: idToken, accessToken: accessToken});
    }
  };
  (google_auth.GoogleAuthProvider.new = function() {
    this[_scopes$] = T.JSArrayOfString().of([]);
    this[_parameters$0] = new _js_helper.LinkedMap.new();
    google_auth.GoogleAuthProvider.__proto__.new.call(this, "google.com");
    ;
  }).prototype = google_auth.GoogleAuthProvider.prototype;
  dart.addTypeTests(google_auth.GoogleAuthProvider);
  dart.addTypeCaches(google_auth.GoogleAuthProvider);
  dart.setMethodSignature(google_auth.GoogleAuthProvider, () => ({
    __proto__: dart.getMethods(google_auth.GoogleAuthProvider.__proto__),
    addScope: dart.fnType(google_auth.GoogleAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(google_auth.GoogleAuthProvider, [core.Map])
  }));
  dart.setGetterSignature(google_auth.GoogleAuthProvider, () => ({
    __proto__: dart.getGetters(google_auth.GoogleAuthProvider.__proto__),
    scopes: core.List$(core.String),
    parameters: core.Map
  }));
  dart.setLibraryUri(google_auth.GoogleAuthProvider, I[9]);
  dart.setFieldSignature(google_auth.GoogleAuthProvider, () => ({
    __proto__: dart.getFields(google_auth.GoogleAuthProvider.__proto__),
    [_scopes$]: dart.fieldType(core.List$(core.String)),
    [_parameters$0]: dart.fieldType(core.Map)
  }));
  google_auth.GoogleAuthCredential = class GoogleAuthCredential extends oauth.OAuthCredential {
    static _credential(opts) {
      let idToken = opts && 'idToken' in opts ? opts.idToken : null;
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      return new google_auth.GoogleAuthCredential.__({accessToken: accessToken, idToken: idToken});
    }
  };
  (google_auth.GoogleAuthCredential.__ = function(opts) {
    let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
    let idToken = opts && 'idToken' in opts ? opts.idToken : null;
    google_auth.GoogleAuthCredential.__proto__.new.call(this, {providerId: "google.com", signInMethod: "google.com", accessToken: accessToken, idToken: idToken});
    ;
  }).prototype = google_auth.GoogleAuthCredential.prototype;
  dart.addTypeTests(google_auth.GoogleAuthCredential);
  dart.addTypeCaches(google_auth.GoogleAuthCredential);
  dart.setLibraryUri(google_auth.GoogleAuthCredential, I[9]);
  dart.defineLazy(google_auth, {
    /*google_auth._kProviderId*/get _kProviderId() {
      return "google.com";
    }
  }, false);
  var _scopes$0 = dart.privateName(github_auth, "_scopes");
  var _parameters$1 = dart.privateName(github_auth, "_parameters");
  github_auth.GithubAuthProvider = class GithubAuthProvider extends auth_provider.AuthProvider {
    static get GITHUB_SIGN_IN_METHOD() {
      return "github.com";
    }
    static get PROVIDER_ID() {
      return "github.com";
    }
    get scopes() {
      return this[_scopes$0];
    }
    get parameters() {
      return this[_parameters$1];
    }
    addScope(scope) {
      if (scope == null) dart.nullFailed(I[10], 66, 38, "scope");
      this[_scopes$0][$add](scope);
      return this;
    }
    setCustomParameters(customOAuthParameters) {
      if (customOAuthParameters == null) dart.nullFailed(I[10], 74, 27, "customOAuthParameters");
      this[_parameters$1] = customOAuthParameters;
      return this;
    }
    static credential(accessToken) {
      if (accessToken == null) dart.nullFailed(I[10], 81, 44, "accessToken");
      return github_auth.GithubAuthCredential._credential(accessToken);
    }
  };
  (github_auth.GithubAuthProvider.new = function() {
    this[_scopes$0] = T.JSArrayOfString().of([]);
    this[_parameters$1] = new _js_helper.LinkedMap.new();
    github_auth.GithubAuthProvider.__proto__.new.call(this, "github.com");
    ;
  }).prototype = github_auth.GithubAuthProvider.prototype;
  dart.addTypeTests(github_auth.GithubAuthProvider);
  dart.addTypeCaches(github_auth.GithubAuthProvider);
  dart.setMethodSignature(github_auth.GithubAuthProvider, () => ({
    __proto__: dart.getMethods(github_auth.GithubAuthProvider.__proto__),
    addScope: dart.fnType(github_auth.GithubAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(github_auth.GithubAuthProvider, [core.Map])
  }));
  dart.setGetterSignature(github_auth.GithubAuthProvider, () => ({
    __proto__: dart.getGetters(github_auth.GithubAuthProvider.__proto__),
    scopes: core.List$(core.String),
    parameters: core.Map
  }));
  dart.setLibraryUri(github_auth.GithubAuthProvider, I[11]);
  dart.setFieldSignature(github_auth.GithubAuthProvider, () => ({
    __proto__: dart.getFields(github_auth.GithubAuthProvider.__proto__),
    [_scopes$0]: dart.fieldType(core.List$(core.String)),
    [_parameters$1]: dart.fieldType(core.Map)
  }));
  github_auth.GithubAuthCredential = class GithubAuthCredential extends oauth.OAuthCredential {
    static _credential(accessToken) {
      if (accessToken == null) dart.nullFailed(I[10], 98, 51, "accessToken");
      return new github_auth.GithubAuthCredential.__({accessToken: accessToken});
    }
  };
  (github_auth.GithubAuthCredential.__ = function(opts) {
    let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
    if (accessToken == null) dart.nullFailed(I[10], 92, 21, "accessToken");
    github_auth.GithubAuthCredential.__proto__.new.call(this, {providerId: "github.com", signInMethod: "github.com", accessToken: accessToken});
    ;
  }).prototype = github_auth.GithubAuthCredential.prototype;
  dart.addTypeTests(github_auth.GithubAuthCredential);
  dart.addTypeCaches(github_auth.GithubAuthCredential);
  dart.setLibraryUri(github_auth.GithubAuthCredential, I[11]);
  dart.defineLazy(github_auth, {
    /*github_auth._kProviderId*/get _kProviderId() {
      return "github.com";
    }
  }, false);
  var _scopes$1 = dart.privateName(facebook_auth, "_scopes");
  var _parameters$2 = dart.privateName(facebook_auth, "_parameters");
  facebook_auth.FacebookAuthProvider = class FacebookAuthProvider extends auth_provider.AuthProvider {
    static get FACEBOOK_SIGN_IN_METHOD() {
      return "facebook.com";
    }
    static get PROVIDER_ID() {
      return "facebook.com";
    }
    get scopes() {
      return this[_scopes$1];
    }
    get parameters() {
      return this[_parameters$2];
    }
    addScope(scope) {
      if (scope == null) dart.nullFailed(I[12], 66, 40, "scope");
      this[_scopes$1][$add](scope);
      return this;
    }
    setCustomParameters(customOAuthParameters) {
      if (customOAuthParameters == null) dart.nullFailed(I[12], 74, 27, "customOAuthParameters");
      this[_parameters$2] = customOAuthParameters;
      return this;
    }
    static credential(accessToken) {
      if (accessToken == null) dart.nullFailed(I[12], 81, 44, "accessToken");
      return facebook_auth.FacebookAuthCredential._credential(accessToken);
    }
  };
  (facebook_auth.FacebookAuthProvider.new = function() {
    this[_scopes$1] = T.JSArrayOfString().of([]);
    this[_parameters$2] = new _js_helper.LinkedMap.new();
    facebook_auth.FacebookAuthProvider.__proto__.new.call(this, "facebook.com");
    ;
  }).prototype = facebook_auth.FacebookAuthProvider.prototype;
  dart.addTypeTests(facebook_auth.FacebookAuthProvider);
  dart.addTypeCaches(facebook_auth.FacebookAuthProvider);
  dart.setMethodSignature(facebook_auth.FacebookAuthProvider, () => ({
    __proto__: dart.getMethods(facebook_auth.FacebookAuthProvider.__proto__),
    addScope: dart.fnType(facebook_auth.FacebookAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(facebook_auth.FacebookAuthProvider, [core.Map])
  }));
  dart.setGetterSignature(facebook_auth.FacebookAuthProvider, () => ({
    __proto__: dart.getGetters(facebook_auth.FacebookAuthProvider.__proto__),
    scopes: core.List$(core.String),
    parameters: core.Map
  }));
  dart.setLibraryUri(facebook_auth.FacebookAuthProvider, I[13]);
  dart.setFieldSignature(facebook_auth.FacebookAuthProvider, () => ({
    __proto__: dart.getFields(facebook_auth.FacebookAuthProvider.__proto__),
    [_scopes$1]: dart.fieldType(core.List$(core.String)),
    [_parameters$2]: dart.fieldType(core.Map)
  }));
  facebook_auth.FacebookAuthCredential = class FacebookAuthCredential extends oauth.OAuthCredential {
    static _credential(accessToken) {
      if (accessToken == null) dart.nullFailed(I[12], 98, 53, "accessToken");
      return new facebook_auth.FacebookAuthCredential.__({accessToken: accessToken});
    }
  };
  (facebook_auth.FacebookAuthCredential.__ = function(opts) {
    let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
    if (accessToken == null) dart.nullFailed(I[12], 92, 21, "accessToken");
    facebook_auth.FacebookAuthCredential.__proto__.new.call(this, {providerId: "facebook.com", signInMethod: "facebook.com", accessToken: accessToken});
    ;
  }).prototype = facebook_auth.FacebookAuthCredential.prototype;
  dart.addTypeTests(facebook_auth.FacebookAuthCredential);
  dart.addTypeCaches(facebook_auth.FacebookAuthCredential);
  dart.setLibraryUri(facebook_auth.FacebookAuthCredential, I[13]);
  dart.defineLazy(facebook_auth, {
    /*facebook_auth._kProviderId*/get _kProviderId() {
      return "facebook.com";
    }
  }, false);
  email_auth.EmailAuthProvider = class EmailAuthProvider extends auth_provider.AuthProvider {
    static get EMAIL_LINK_SIGN_IN_METHOD() {
      return "emailLink";
    }
    static get EMAIL_PASSWORD_SIGN_IN_METHOD() {
      return "password";
    }
    static get PROVIDER_ID() {
      return "password";
    }
    static credential(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      if (email == null) dart.nullFailed(I[14], 38, 21, "email");
      let password = opts && 'password' in opts ? opts.password : null;
      if (password == null) dart.nullFailed(I[14], 39, 21, "password");
      return email_auth.EmailAuthCredential._credential(email, password);
    }
    static credentialWithLink(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      if (email == null) dart.nullFailed(I[14], 46, 21, "email");
      let emailLink = opts && 'emailLink' in opts ? opts.emailLink : null;
      if (emailLink == null) dart.nullFailed(I[14], 47, 21, "emailLink");
      return email_auth.EmailAuthCredential._credentialWithLink(email, emailLink);
    }
  };
  (email_auth.EmailAuthProvider.new = function() {
    email_auth.EmailAuthProvider.__proto__.new.call(this, "password");
    ;
  }).prototype = email_auth.EmailAuthProvider.prototype;
  dart.addTypeTests(email_auth.EmailAuthProvider);
  dart.addTypeCaches(email_auth.EmailAuthProvider);
  dart.setLibraryUri(email_auth.EmailAuthProvider, I[15]);
  var email$ = dart.privateName(email_auth, "EmailAuthCredential.email");
  var password$ = dart.privateName(email_auth, "EmailAuthCredential.password");
  var emailLink$ = dart.privateName(email_auth, "EmailAuthCredential.emailLink");
  email_auth.EmailAuthCredential = class EmailAuthCredential extends auth_credential.AuthCredential {
    get email() {
      return this[email$];
    }
    set email(value) {
      super.email = value;
    }
    get password() {
      return this[password$];
    }
    set password(value) {
      super.password = value;
    }
    get emailLink() {
      return this[emailLink$];
    }
    set emailLink(value) {
      super.emailLink = value;
    }
    static _credential(email, password) {
      if (email == null) dart.nullFailed(I[14], 63, 50, "email");
      if (password == null) dart.nullFailed(I[14], 63, 64, "password");
      return new email_auth.EmailAuthCredential.__("password", {email: email, password: password});
    }
    static _credentialWithLink(email, emailLink) {
      if (email == null) dart.nullFailed(I[14], 69, 14, "email");
      if (emailLink == null) dart.nullFailed(I[14], 69, 28, "emailLink");
      return new email_auth.EmailAuthCredential.__("emailLink", {email: email, emailLink: emailLink});
    }
    asMap() {
      return new (T.IdentityMapOfString$StringN()).from(["providerId", this.providerId, "signInMethod", this.signInMethod, "email", this.email, "emailLink", this.emailLink, "secret", this.password]);
    }
  };
  (email_auth.EmailAuthCredential.__ = function(_signInMethod, opts) {
    if (_signInMethod == null) dart.nullFailed(I[14], 57, 12, "_signInMethod");
    let email = opts && 'email' in opts ? opts.email : null;
    if (email == null) dart.nullFailed(I[14], 58, 19, "email");
    let password = opts && 'password' in opts ? opts.password : null;
    let emailLink = opts && 'emailLink' in opts ? opts.emailLink : null;
    this[email$] = email;
    this[password$] = password;
    this[emailLink$] = emailLink;
    email_auth.EmailAuthCredential.__proto__.new.call(this, {providerId: "password", signInMethod: _signInMethod});
    ;
  }).prototype = email_auth.EmailAuthCredential.prototype;
  dart.addTypeTests(email_auth.EmailAuthCredential);
  dart.addTypeCaches(email_auth.EmailAuthCredential);
  dart.setMethodSignature(email_auth.EmailAuthCredential, () => ({
    __proto__: dart.getMethods(email_auth.EmailAuthCredential.__proto__),
    asMap: dart.fnType(core.Map$(core.String, dart.nullable(core.String)), [])
  }));
  dart.setLibraryUri(email_auth.EmailAuthCredential, I[15]);
  dart.setFieldSignature(email_auth.EmailAuthCredential, () => ({
    __proto__: dart.getFields(email_auth.EmailAuthCredential.__proto__),
    email: dart.finalFieldType(core.String),
    password: dart.finalFieldType(dart.nullable(core.String)),
    emailLink: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(email_auth, {
    /*email_auth._kLinkProviderId*/get _kLinkProviderId() {
      return "emailLink";
    },
    /*email_auth._kProviderId*/get _kProviderId() {
      return "password";
    }
  }, false);
  var _name$0 = dart.privateName(platform_interface_recaptcha_verifier_factory, "_name");
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize = class RecaptchaVerifierSize extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[16], 11, 6, "index");
    if (_name == null) dart.nullFailed(I[16], 11, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.prototype;
  dart.addTypeTests(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize);
  dart.addTypeCaches(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize);
  dart.setLibraryUri(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize, I[17]);
  dart.setFieldSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize, () => ({
    __proto__: dart.getFields(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize, ['toString']);
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.normal = C[4] || CT.C4;
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.compact = C[5] || CT.C5;
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.values = C[6] || CT.C6;
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme = class RecaptchaVerifierTheme extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[16], 20, 6, "index");
    if (_name == null) dart.nullFailed(I[16], 20, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.prototype;
  dart.addTypeTests(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme);
  dart.addTypeCaches(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme);
  dart.setLibraryUri(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme, I[17]);
  dart.setFieldSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme, () => ({
    __proto__: dart.getFields(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme, ['toString']);
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.light = C[7] || CT.C7;
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.dark = C[8] || CT.C8;
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.values = C[9] || CT.C9;
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform = class RecaptchaVerifierFactoryPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      if (platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._instance == null) {
        dart.throw(new core.UnimplementedError.new("RecaptchaVerifier is not implemented"));
      }
      return dart.nullCheck(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._instance);
    }
    static set instance(instance) {
      if (instance == null) dart.nullFailed(I[16], 62, 56, "instance");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._token);
      platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._instance = instance;
    }
    static verifyExtends(instance) {
      if (instance == null) dart.nullFailed(I[16], 68, 62, "instance");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._token);
    }
    get delegate() {
      dart.throw(new core.UnimplementedError.new("delegate is not implemented"));
    }
    delegateFor(opts) {
      let container = opts && 'container' in opts ? opts.container : null;
      let size = opts && 'size' in opts ? opts.size : C[4] || CT.C4;
      if (size == null) dart.nullFailed(I[16], 83, 27, "size");
      let theme = opts && 'theme' in opts ? opts.theme : C[7] || CT.C7;
      if (theme == null) dart.nullFailed(I[16], 84, 28, "theme");
      let onSuccess = opts && 'onSuccess' in opts ? opts.onSuccess : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onExpired = opts && 'onExpired' in opts ? opts.onExpired : null;
      dart.throw(new core.UnimplementedError.new("delegateFor() is not implemented"));
    }
    get type() {
      dart.throw(new core.UnimplementedError.new("type is not implemented"));
    }
    clear() {
      dart.throw(new core.UnimplementedError.new("clear() is not implemented"));
    }
    render() {
      return async.async(core.int, function* render() {
        dart.throw(new core.UnimplementedError.new("render() is not implemented"));
      });
    }
    verify() {
      return async.async(core.String, function* verify() {
        dart.throw(new core.UnimplementedError.new("verify() is not implemented"));
      });
    }
  };
  (platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.new = function() {
    platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.__proto__.new.call(this, {token: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._token});
    ;
  }).prototype = platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.prototype;
  dart.addTypeTests(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform);
  dart.addTypeCaches(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform);
  dart.setMethodSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.__proto__),
    delegateFor: dart.fnType(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, [], {container: dart.nullable(core.String), onError: dart.nullable(dart.fnType(dart.void, [firebase_auth_exception.FirebaseAuthException])), onExpired: dart.nullable(dart.fnType(dart.void, [])), onSuccess: dart.nullable(dart.fnType(dart.void, [])), size: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize, theme: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme}, {}),
    clear: dart.fnType(dart.void, []),
    render: dart.fnType(async.Future$(core.int), []),
    verify: dart.fnType(async.Future$(core.String), [])
  }));
  dart.setGetterSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.__proto__),
    delegate: dart.dynamic,
    type: core.String
  }));
  dart.setLibraryUri(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, I[17]);
  dart.defineLazy(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, {
    /*platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  var verificationCompleted$ = dart.privateName(phone_auth_callbacks, "PhoneAuthCallbacks.verificationCompleted");
  var verificationFailed$ = dart.privateName(phone_auth_callbacks, "PhoneAuthCallbacks.verificationFailed");
  var codeSent$ = dart.privateName(phone_auth_callbacks, "PhoneAuthCallbacks.codeSent");
  var codeAutoRetrievalTimeout$ = dart.privateName(phone_auth_callbacks, "PhoneAuthCallbacks.codeAutoRetrievalTimeout");
  phone_auth_callbacks.PhoneAuthCallbacks = class PhoneAuthCallbacks extends core.Object {
    get verificationCompleted() {
      return this[verificationCompleted$];
    }
    set verificationCompleted(value) {
      super.verificationCompleted = value;
    }
    get verificationFailed() {
      return this[verificationFailed$];
    }
    set verificationFailed(value) {
      super.verificationFailed = value;
    }
    get codeSent() {
      return this[codeSent$];
    }
    set codeSent(value) {
      super.codeSent = value;
    }
    get codeAutoRetrievalTimeout() {
      return this[codeAutoRetrievalTimeout$];
    }
    set codeAutoRetrievalTimeout(value) {
      super.codeAutoRetrievalTimeout = value;
    }
  };
  (phone_auth_callbacks.PhoneAuthCallbacks.new = function(verificationCompleted, verificationFailed, codeSent, codeAutoRetrievalTimeout) {
    if (verificationCompleted == null) dart.nullFailed(I[18], 11, 10, "verificationCompleted");
    if (verificationFailed == null) dart.nullFailed(I[18], 12, 10, "verificationFailed");
    if (codeSent == null) dart.nullFailed(I[18], 13, 10, "codeSent");
    if (codeAutoRetrievalTimeout == null) dart.nullFailed(I[18], 14, 10, "codeAutoRetrievalTimeout");
    this[verificationCompleted$] = verificationCompleted;
    this[verificationFailed$] = verificationFailed;
    this[codeSent$] = codeSent;
    this[codeAutoRetrievalTimeout$] = codeAutoRetrievalTimeout;
    ;
  }).prototype = phone_auth_callbacks.PhoneAuthCallbacks.prototype;
  dart.addTypeTests(phone_auth_callbacks.PhoneAuthCallbacks);
  dart.addTypeCaches(phone_auth_callbacks.PhoneAuthCallbacks);
  dart.setLibraryUri(phone_auth_callbacks.PhoneAuthCallbacks, I[19]);
  dart.setFieldSignature(phone_auth_callbacks.PhoneAuthCallbacks, () => ({
    __proto__: dart.getFields(phone_auth_callbacks.PhoneAuthCallbacks.__proto__),
    verificationCompleted: dart.finalFieldType(dart.fnType(dart.void, [phone_auth.PhoneAuthCredential])),
    verificationFailed: dart.finalFieldType(dart.fnType(dart.void, [firebase_auth_exception.FirebaseAuthException])),
    codeSent: dart.finalFieldType(dart.fnType(dart.void, [core.String, dart.nullable(core.int)])),
    codeAutoRetrievalTimeout: dart.finalFieldType(dart.fnType(dart.void, [core.String]))
  }));
  exception$.convertPlatformException = function convertPlatformException(exception) {
    if (exception == null) dart.nullFailed(I[20], 13, 40, "exception");
    if (!message_codec.PlatformException.is(exception)) {
      return exception;
    }
    return exception$.platformExceptionToFirebaseAuthException(exception);
  };
  exception$.platformExceptionToFirebaseAuthException = function platformExceptionToFirebaseAuthException(platformException) {
    let t0, t0$;
    if (platformException == null) dart.nullFailed(I[20], 29, 21, "platformException");
    let details = platformException.details != null ? T.LinkedHashMapOfString$dynamic().from(core.Map.as(platformException.details)) : null;
    let code = "unknown";
    let message = platformException.message;
    let email = null;
    let credential = null;
    if (details != null) {
      code = core.String.as((t0 = details[$_get]("code"), t0 == null ? code : t0));
      message = T.StringN().as((t0$ = details[$_get]("message"), t0$ == null ? message : t0$));
      if (details[$_get]("additionalData") != null) {
        if (dart.dsend(details[$_get]("additionalData"), '_get', ["authCredential"]) != null) {
          credential = new auth_credential.AuthCredential.new({providerId: core.String.as(dart.dsend(dart.dsend(details[$_get]("additionalData"), '_get', ["authCredential"]), '_get', ["providerId"])), signInMethod: core.String.as(dart.dsend(dart.dsend(details[$_get]("additionalData"), '_get', ["authCredential"]), '_get', ["signInMethod"])), token: T.intN().as(dart.dsend(dart.dsend(details[$_get]("additionalData"), '_get', ["authCredential"]), '_get', ["token"]))});
        }
        if (dart.dsend(details[$_get]("additionalData"), '_get', ["email"]) != null) {
          email = T.StringN().as(dart.dsend(details[$_get]("additionalData"), '_get', ["email"]));
        }
      }
    }
    return new firebase_auth_exception.FirebaseAuthException.new({code: code, message: message, email: email, credential: credential});
  };
  var auth$ = dart.privateName(platform_interface_user, "UserPlatform.auth");
  var _user = dart.privateName(platform_interface_user, "_user");
  platform_interface_user.UserPlatform = class UserPlatform extends plugin_platform_interface.PlatformInterface {
    get auth() {
      return this[auth$];
    }
    set auth(value) {
      super.auth = value;
    }
    static verifyExtends(instance) {
      if (instance == null) dart.nullFailed(I[21], 22, 42, "instance");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_user.UserPlatform._token);
    }
    get displayName() {
      return T.StringN().as(this[_user][$_get]("displayName"));
    }
    get email() {
      return T.StringN().as(this[_user][$_get]("email"));
    }
    get emailVerified() {
      return core.bool.as(this[_user][$_get]("emailVerified"));
    }
    get isAnonymous() {
      return core.bool.as(this[_user][$_get]("isAnonymous"));
    }
    get metadata() {
      return new user_metadata.UserMetadata.new(T.intN().as(dart.dsend(this[_user][$_get]("metadata"), '_get', ["creationTime"])), T.intN().as(dart.dsend(this[_user][$_get]("metadata"), '_get', ["lastSignInTime"])));
    }
    get phoneNumber() {
      return T.StringN().as(this[_user][$_get]("phoneNumber"));
    }
    get photoURL() {
      return T.StringN().as(this[_user][$_get]("photoURL"));
    }
    get providerData() {
      return core.List.from(core.Iterable.as(this[_user][$_get]("providerData")))[$map](user_info.UserInfo, dart.fn(data => new user_info.UserInfo.new(T.LinkedHashMapOfString$StringN().from(core.Map.as(data))), T.dynamicToUserInfo()))[$toList]();
    }
    get refreshToken() {
      return T.StringN().as(this[_user][$_get]("refreshToken"));
    }
    get tenantId() {
      return T.StringN().as(this[_user][$_get]("tenantId"));
    }
    get uid() {
      return core.String.as(this[_user][$_get]("uid"));
    }
    delete() {
      return async.async(dart.void, function* $delete() {
        dart.throw(new core.UnimplementedError.new("delete() is not implemented"));
      });
    }
    getIdToken(forceRefresh) {
      if (forceRefresh == null) dart.nullFailed(I[21], 134, 34, "forceRefresh");
      dart.throw(new core.UnimplementedError.new("getIdToken() is not implemented"));
    }
    getIdTokenResult(forceRefresh) {
      if (forceRefresh == null) dart.nullFailed(I[21], 143, 47, "forceRefresh");
      dart.throw(new core.UnimplementedError.new("getIdTokenResult() is not implemented"));
    }
    linkWithCredential(credential) {
      if (credential == null) dart.nullFailed(I[21], 188, 68, "credential");
      dart.throw(new core.UnimplementedError.new("linkWithCredential() is not implemented"));
    }
    linkWithPhoneNumber(phoneNumber, applicationVerifier) {
      if (phoneNumber == null) dart.nullFailed(I[21], 216, 12, "phoneNumber");
      if (applicationVerifier == null) dart.nullFailed(I[21], 217, 38, "applicationVerifier");
      dart.throw(new core.UnimplementedError.new("linkWithPhoneNumber() is not implemented"));
    }
    reauthenticateWithCredential(credential) {
      if (credential == null) dart.nullFailed(I[21], 252, 22, "credential");
      dart.throw(new core.UnimplementedError.new("reauthenticateWithCredential() is not implemented"));
    }
    reload() {
      return async.async(dart.void, function* reload() {
        dart.throw(new core.UnimplementedError.new("reload() is not implemented"));
      });
    }
    sendEmailVerification(actionCodeSettings) {
      return async.async(dart.void, function* sendEmailVerification() {
        dart.throw(new core.UnimplementedError.new("sendEmailVerification() is not implemented"));
      });
    }
    unlink(providerId) {
      if (providerId == null) dart.nullFailed(I[21], 277, 38, "providerId");
      return async.async(platform_interface_user.UserPlatform, function* unlink() {
        dart.throw(new core.UnimplementedError.new("unlink() is not implemented"));
      });
    }
    updateEmail(newEmail) {
      if (newEmail == null) dart.nullFailed(I[21], 300, 35, "newEmail");
      return async.async(dart.void, function* updateEmail() {
        dart.throw(new core.UnimplementedError.new("updateEmail() is not implemented"));
      });
    }
    updatePassword(newPassword) {
      if (newPassword == null) dart.nullFailed(I[21], 317, 38, "newPassword");
      return async.async(dart.void, function* updatePassword() {
        dart.throw(new core.UnimplementedError.new("updatePassword() is not implemented"));
      });
    }
    updatePhoneNumber(phoneCredential) {
      if (phoneCredential == null) dart.nullFailed(I[21], 331, 54, "phoneCredential");
      return async.async(dart.void, function* updatePhoneNumber() {
        dart.throw(new core.UnimplementedError.new("updatePhoneNumber() is not implemented"));
      });
    }
    updateProfile(profile) {
      if (profile == null) dart.nullFailed(I[21], 336, 51, "profile");
      return async.async(dart.void, function* updateProfile() {
        dart.throw(new core.UnimplementedError.new("updateProfile() is not implemented"));
      });
    }
    verifyBeforeUpdateEmail(newEmail, actionCodeSettings = null) {
      if (newEmail == null) dart.nullFailed(I[21], 346, 12, "newEmail");
      return async.async(dart.void, function* verifyBeforeUpdateEmail() {
        dart.throw(new core.UnimplementedError.new("verifyBeforeUpdateEmail() is not implemented"));
      });
    }
  };
  (platform_interface_user.UserPlatform.new = function(auth, user) {
    if (auth == null) dart.nullFailed(I[21], 15, 21, "auth");
    if (user == null) dart.nullFailed(I[21], 15, 48, "user");
    this[auth$] = auth;
    this[_user] = user;
    platform_interface_user.UserPlatform.__proto__.new.call(this, {token: platform_interface_user.UserPlatform._token});
    ;
  }).prototype = platform_interface_user.UserPlatform.prototype;
  dart.addTypeTests(platform_interface_user.UserPlatform);
  dart.addTypeCaches(platform_interface_user.UserPlatform);
  dart.setMethodSignature(platform_interface_user.UserPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_user.UserPlatform.__proto__),
    delete: dart.fnType(async.Future$(dart.void), []),
    getIdToken: dart.fnType(async.Future$(core.String), [core.bool]),
    getIdTokenResult: dart.fnType(async.Future$(id_token_result.IdTokenResult), [core.bool]),
    linkWithCredential: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [auth_credential.AuthCredential]),
    linkWithPhoneNumber: dart.fnType(async.Future$(platform_interface_confirmation_result.ConfirmationResultPlatform), [core.String, platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform]),
    reauthenticateWithCredential: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [auth_credential.AuthCredential]),
    reload: dart.fnType(async.Future$(dart.void), []),
    sendEmailVerification: dart.fnType(async.Future$(dart.void), [dart.nullable(action_code_settings.ActionCodeSettings)]),
    unlink: dart.fnType(async.Future$(platform_interface_user.UserPlatform), [core.String]),
    updateEmail: dart.fnType(async.Future$(dart.void), [core.String]),
    updatePassword: dart.fnType(async.Future$(dart.void), [core.String]),
    updatePhoneNumber: dart.fnType(async.Future$(dart.void), [phone_auth.PhoneAuthCredential]),
    updateProfile: dart.fnType(async.Future$(dart.void), [core.Map$(core.String, dart.nullable(core.String))]),
    verifyBeforeUpdateEmail: dart.fnType(async.Future$(dart.void), [core.String], [dart.nullable(action_code_settings.ActionCodeSettings)])
  }));
  dart.setGetterSignature(platform_interface_user.UserPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_user.UserPlatform.__proto__),
    displayName: dart.nullable(core.String),
    email: dart.nullable(core.String),
    emailVerified: core.bool,
    isAnonymous: core.bool,
    metadata: user_metadata.UserMetadata,
    phoneNumber: dart.nullable(core.String),
    photoURL: dart.nullable(core.String),
    providerData: core.List$(user_info.UserInfo),
    refreshToken: dart.nullable(core.String),
    tenantId: dart.nullable(core.String),
    uid: core.String
  }));
  dart.setLibraryUri(platform_interface_user.UserPlatform, I[22]);
  dart.setFieldSignature(platform_interface_user.UserPlatform, () => ({
    __proto__: dart.getFields(platform_interface_user.UserPlatform.__proto__),
    auth: dart.finalFieldType(platform_interface_firebase_auth.FirebaseAuthPlatform),
    [_user]: dart.finalFieldType(core.Map$(core.String, dart.dynamic))
  }));
  dart.defineLazy(platform_interface_user.UserPlatform, {
    /*platform_interface_user.UserPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  var auth$0 = dart.privateName(platform_interface_user_credential, "UserCredentialPlatform.auth");
  var additionalUserInfo$ = dart.privateName(platform_interface_user_credential, "UserCredentialPlatform.additionalUserInfo");
  var credential$ = dart.privateName(platform_interface_user_credential, "UserCredentialPlatform.credential");
  var user$ = dart.privateName(platform_interface_user_credential, "UserCredentialPlatform.user");
  platform_interface_user_credential.UserCredentialPlatform = class UserCredentialPlatform extends plugin_platform_interface.PlatformInterface {
    get auth() {
      return this[auth$0];
    }
    set auth(value) {
      super.auth = value;
    }
    get additionalUserInfo() {
      return this[additionalUserInfo$];
    }
    set additionalUserInfo(value) {
      super.additionalUserInfo = value;
    }
    get credential() {
      return this[credential$];
    }
    set credential(value) {
      super.credential = value;
    }
    get user() {
      return this[user$];
    }
    set user(value) {
      super.user = value;
    }
    static verifyExtends(instance) {
      if (instance == null) dart.nullFailed(I[23], 24, 52, "instance");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_user_credential.UserCredentialPlatform._token);
    }
  };
  (platform_interface_user_credential.UserCredentialPlatform.new = function(opts) {
    let auth = opts && 'auth' in opts ? opts.auth : null;
    if (auth == null) dart.nullFailed(I[23], 15, 19, "auth");
    let additionalUserInfo = opts && 'additionalUserInfo' in opts ? opts.additionalUserInfo : null;
    let credential = opts && 'credential' in opts ? opts.credential : null;
    let user = opts && 'user' in opts ? opts.user : null;
    this[auth$0] = auth;
    this[additionalUserInfo$] = additionalUserInfo;
    this[credential$] = credential;
    this[user$] = user;
    platform_interface_user_credential.UserCredentialPlatform.__proto__.new.call(this, {token: platform_interface_user_credential.UserCredentialPlatform._token});
    ;
  }).prototype = platform_interface_user_credential.UserCredentialPlatform.prototype;
  dart.addTypeTests(platform_interface_user_credential.UserCredentialPlatform);
  dart.addTypeCaches(platform_interface_user_credential.UserCredentialPlatform);
  dart.setLibraryUri(platform_interface_user_credential.UserCredentialPlatform, I[24]);
  dart.setFieldSignature(platform_interface_user_credential.UserCredentialPlatform, () => ({
    __proto__: dart.getFields(platform_interface_user_credential.UserCredentialPlatform.__proto__),
    auth: dart.finalFieldType(platform_interface_firebase_auth.FirebaseAuthPlatform),
    additionalUserInfo: dart.finalFieldType(dart.nullable(additional_user_info.AdditionalUserInfo)),
    credential: dart.finalFieldType(dart.nullable(auth_credential.AuthCredential)),
    user: dart.finalFieldType(dart.nullable(platform_interface_user.UserPlatform))
  }));
  dart.defineLazy(platform_interface_user_credential.UserCredentialPlatform, {
    /*platform_interface_user_credential.UserCredentialPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  method_channel_user_credential.MethodChannelUserCredential = class MethodChannelUserCredential extends platform_interface_user_credential.UserCredentialPlatform {};
  (method_channel_user_credential.MethodChannelUserCredential.new = function(auth, data) {
    let t0;
    if (auth == null) dart.nullFailed(I[25], 13, 28, "auth");
    if (data == null) dart.nullFailed(I[25], 13, 55, "data");
    method_channel_user_credential.MethodChannelUserCredential.__proto__.new.call(this, {auth: auth, additionalUserInfo: data[$_get]("additionalUserInfo") == null ? null : new additional_user_info.AdditionalUserInfo.new({isNewUser: core.bool.as(dart.dsend(data[$_get]("additionalUserInfo"), '_get', ["isNewUser"])), profile: T.LinkedHashMapOfString$dynamic().from(core.Map.as((t0 = dart.dsend(data[$_get]("additionalUserInfo"), '_get', ["profile"]), t0 == null ? new _js_helper.LinkedMap.new() : t0))), providerId: T.StringN().as(dart.dsend(data[$_get]("additionalUserInfo"), '_get', ["providerId"])), username: T.StringN().as(dart.dsend(data[$_get]("additionalUserInfo"), '_get', ["username"]))}), credential: data[$_get]("authCredential") == null ? null : new auth_credential.AuthCredential.new({providerId: core.String.as(dart.dsend(data[$_get]("authCredential"), '_get', ["providerId"])), signInMethod: core.String.as(dart.dsend(data[$_get]("authCredential"), '_get', ["signInMethod"]))}), user: data[$_get]("user") == null ? null : new method_channel_user.MethodChannelUser.new(auth, T.LinkedHashMapOfString$dynamic().from(core.Map.as(data[$_get]("user"))))});
    ;
  }).prototype = method_channel_user_credential.MethodChannelUserCredential.prototype;
  dart.addTypeTests(method_channel_user_credential.MethodChannelUserCredential);
  dart.addTypeCaches(method_channel_user_credential.MethodChannelUserCredential);
  dart.setLibraryUri(method_channel_user_credential.MethodChannelUserCredential, I[26]);
  method_channel_user.MethodChannelUser = class MethodChannelUser extends platform_interface_user.UserPlatform {
    delete() {
      return async.async(dart.void, (function* $delete() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "User#delete", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    getIdToken(forceRefresh) {
      if (forceRefresh == null) dart.nullFailed(I[27], 35, 34, "forceRefresh");
      return async.async(core.String, (function* getIdToken() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#getIdToken", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "forceRefresh", forceRefresh, "tokenOnly", true])));
          return T.FutureOrOfString().as(data[$_get]("token"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    getIdTokenResult(forceRefresh) {
      if (forceRefresh == null) dart.nullFailed(I[27], 54, 47, "forceRefresh");
      return async.async(id_token_result.IdTokenResult, (function* getIdTokenResult() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#getIdToken", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "forceRefresh", forceRefresh, "tokenOnly", false])));
          return new id_token_result.IdTokenResult.new(data);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    linkWithCredential(credential) {
      if (credential == null) dart.nullFailed(I[27], 74, 20, "credential");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* linkWithCredential() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#linkWithCredential", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "credential", credential.asMap()])));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this.auth, data);
          this.auth.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    reauthenticateWithCredential(credential) {
      if (credential == null) dart.nullFailed(I[27], 98, 20, "credential");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* reauthenticateWithCredential() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#reauthenticateUserWithCredential", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "credential", credential.asMap()])));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this.auth, data);
          this.auth.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#reload", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name])));
          let user = new method_channel_user.MethodChannelUser.new(this.auth, data);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    sendEmailVerification(actionCodeSettings) {
      return async.async(dart.void, (function* sendEmailVerification() {
        let t6;
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "User#sendEmailVerification", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "actionCodeSettings", (t6 = actionCodeSettings, t6 == null ? null : t6.asMap())]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    unlink(providerId) {
      if (providerId == null) dart.nullFailed(I[27], 155, 38, "providerId");
      return async.async(platform_interface_user.UserPlatform, (function* unlink() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#unlink", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "providerId", providerId])));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this.auth, data);
          let user = T.MethodChannelUserN().as(userCredential.user);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
          return dart.nullCheck(user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    updateEmail(newEmail) {
      if (newEmail == null) dart.nullFailed(I[27], 180, 35, "newEmail");
      return async.async(dart.void, (function* updateEmail() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#updateEmail", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "newEmail", newEmail])));
          let user = new method_channel_user.MethodChannelUser.new(this.auth, data);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    updatePassword(newPassword) {
      if (newPassword == null) dart.nullFailed(I[27], 200, 38, "newPassword");
      return async.async(dart.void, (function* updatePassword() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#updatePassword", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "newPassword", newPassword])));
          let user = new method_channel_user.MethodChannelUser.new(this.auth, data);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    updatePhoneNumber(phoneCredential) {
      if (phoneCredential == null) dart.nullFailed(I[27], 220, 54, "phoneCredential");
      return async.async(dart.void, (function* updatePhoneNumber() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#updatePhoneNumber", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "credential", phoneCredential.asMap()])));
          let user = new method_channel_user.MethodChannelUser.new(this.auth, data);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    updateProfile(profile) {
      if (profile == null) dart.nullFailed(I[27], 240, 51, "profile");
      return async.async(dart.void, (function* updateProfile() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#updateProfile", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "profile", profile])));
          let user = new method_channel_user.MethodChannelUser.new(this.auth, data);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyBeforeUpdateEmail(newEmail, actionCodeSettings = null) {
      if (newEmail == null) dart.nullFailed(I[27], 261, 12, "newEmail");
      return async.async(dart.void, (function* verifyBeforeUpdateEmail() {
        let t12;
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "User#verifyBeforeUpdateEmail", new (T.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "newEmail", newEmail, "actionCodeSettings", (t12 = actionCodeSettings, t12 == null ? null : t12.asMap())]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (method_channel_user.MethodChannelUser.new = function(auth, data) {
    if (auth == null) dart.nullFailed(I[27], 17, 42, "auth");
    if (data == null) dart.nullFailed(I[27], 17, 69, "data");
    method_channel_user.MethodChannelUser.__proto__.new.call(this, auth, data);
    ;
  }).prototype = method_channel_user.MethodChannelUser.prototype;
  dart.addTypeTests(method_channel_user.MethodChannelUser);
  dart.addTypeCaches(method_channel_user.MethodChannelUser);
  dart.setLibraryUri(method_channel_user.MethodChannelUser, I[28]);
  var currentUser = dart.privateName(method_channel_firebase_auth, "MethodChannelFirebaseAuth.currentUser");
  var languageCode = dart.privateName(method_channel_firebase_auth, "MethodChannelFirebaseAuth.languageCode");
  var _handleAuthStateChangesListener = dart.privateName(method_channel_firebase_auth, "_handleAuthStateChangesListener");
  var _handleIdTokenChangesListener = dart.privateName(method_channel_firebase_auth, "_handleIdTokenChangesListener");
  var _handlePhoneVerificationCompleted = dart.privateName(method_channel_firebase_auth, "_handlePhoneVerificationCompleted");
  var _handlePhoneVerificationFailed = dart.privateName(method_channel_firebase_auth, "_handlePhoneVerificationFailed");
  var _handlePhoneCodeSent = dart.privateName(method_channel_firebase_auth, "_handlePhoneCodeSent");
  var _handlePhoneCodeAutoRetrievalTimeout = dart.privateName(method_channel_firebase_auth, "_handlePhoneCodeAutoRetrievalTimeout");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var appInstance$ = dart.privateName(platform_interface_firebase_auth, "FirebaseAuthPlatform.appInstance");
  platform_interface_firebase_auth.FirebaseAuthPlatform = class FirebaseAuthPlatform extends plugin_platform_interface.PlatformInterface {
    get appInstance() {
      return this[appInstance$];
    }
    set appInstance(value) {
      super.appInstance = value;
    }
    get app() {
      if (this.appInstance == null) {
        return firebase_core.Firebase.app();
      }
      return dart.nullCheck(this.appInstance);
    }
    static instanceFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      if (app == null) dart.nullFailed(I[30], 42, 26, "app");
      let pluginConstants = opts && 'pluginConstants' in opts ? opts.pluginConstants : null;
      if (pluginConstants == null) dart.nullFailed(I[30], 43, 36, "pluginConstants");
      return platform_interface_firebase_auth.FirebaseAuthPlatform.instance.delegateFor({app: app}).setInitialValues({languageCode: T.StringN().as(pluginConstants[$_get]("APP_LANGUAGE_CODE")), currentUser: pluginConstants[$_get]("APP_CURRENT_USER") == null ? null : T.LinkedHashMapOfString$dynamic().from(core.Map.as(pluginConstants[$_get]("APP_CURRENT_USER")))});
    }
    static get instance() {
      platform_interface_firebase_auth.FirebaseAuthPlatform._instance == null ? platform_interface_firebase_auth.FirebaseAuthPlatform._instance = method_channel_firebase_auth.MethodChannelFirebaseAuth.instance : null;
      return dart.nullCheck(platform_interface_firebase_auth.FirebaseAuthPlatform._instance);
    }
    static set instance(instance) {
      if (instance == null) dart.nullFailed(I[30], 64, 44, "instance");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_firebase_auth.FirebaseAuthPlatform._token);
      platform_interface_firebase_auth.FirebaseAuthPlatform._instance = instance;
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      if (app == null) dart.nullFailed(I[30], 72, 58, "app");
      dart.throw(new core.UnimplementedError.new("delegateFor() is not implemented"));
    }
    setInitialValues(opts) {
      let currentUser = opts && 'currentUser' in opts ? opts.currentUser : null;
      let languageCode = opts && 'languageCode' in opts ? opts.languageCode : null;
      dart.throw(new core.UnimplementedError.new("setInitialValues() is not implemented"));
    }
    get currentUser() {
      dart.throw(new core.UnimplementedError.new("get.currentUser is not implemented"));
    }
    set currentUser(userPlatform) {
      dart.throw(new core.UnimplementedError.new("set.currentUser is not implemented"));
    }
    get languageCode() {
      dart.throw(new core.UnimplementedError.new("languageCode is not implemented"));
    }
    sendAuthChangesEvent(appName, userPlatform) {
      if (appName == null) dart.nullFailed(I[30], 112, 36, "appName");
      dart.throw(new core.UnimplementedError.new("sendAuthChangesEvent() is not implemented"));
    }
    useEmulator(host, port) {
      if (host == null) dart.nullFailed(I[30], 123, 35, "host");
      if (port == null) dart.nullFailed(I[30], 123, 45, "port");
      dart.throw(new core.UnimplementedError.new("useEmulator() is not implemented"));
    }
    applyActionCode(code) {
      if (code == null) dart.nullFailed(I[30], 143, 39, "code");
      dart.throw(new core.UnimplementedError.new("applyActionCode() is not implemented"));
    }
    checkActionCode(code) {
      if (code == null) dart.nullFailed(I[30], 165, 49, "code");
      dart.throw(new core.UnimplementedError.new("checkActionCode() is not implemented"));
    }
    confirmPasswordReset(code, newPassword) {
      if (code == null) dart.nullFailed(I[30], 187, 44, "code");
      if (newPassword == null) dart.nullFailed(I[30], 187, 57, "newPassword");
      dart.throw(new core.UnimplementedError.new("confirmPasswordReset() is not implemented"));
    }
    createUserWithEmailAndPassword(email, password) {
      if (email == null) dart.nullFailed(I[30], 205, 12, "email");
      if (password == null) dart.nullFailed(I[30], 206, 12, "password");
      dart.throw(new core.UnimplementedError.new("createUserWithEmailAndPassword() is not implemented"));
    }
    fetchSignInMethodsForEmail(email) {
      if (email == null) dart.nullFailed(I[30], 224, 58, "email");
      dart.throw(new core.UnimplementedError.new("fetchSignInMethodsForEmail() is not implemented"));
    }
    getRedirectResult() {
      dart.throw(new core.UnimplementedError.new("getRedirectResult() is not implemented"));
    }
    isSignInWithEmailLink(emailLink) {
      if (emailLink == null) dart.nullFailed(I[30], 240, 37, "emailLink");
      return (emailLink[$contains]("mode=signIn") || emailLink[$contains]("mode%3DsignIn")) && (emailLink[$contains]("oobCode=") || emailLink[$contains]("oobCode%3D"));
    }
    authStateChanges() {
      dart.throw(new core.UnimplementedError.new("authStateChanges() is not implemented"));
    }
    idTokenChanges() {
      dart.throw(new core.UnimplementedError.new("idTokenChanges() is not implemented"));
    }
    userChanges() {
      dart.throw(new core.UnimplementedError.new("userChanges() is not implemented"));
    }
    sendPasswordResetEmail(email, actionCodeSettings = null) {
      if (email == null) dart.nullFailed(I[30], 276, 12, "email");
      dart.throw(new core.UnimplementedError.new("sendPasswordResetEmail() is not implemented"));
    }
    sendSignInLinkToEmail(email, actionCodeSettings) {
      if (email == null) dart.nullFailed(I[30], 294, 12, "email");
      if (actionCodeSettings == null) dart.nullFailed(I[30], 295, 24, "actionCodeSettings");
      dart.throw(new core.UnimplementedError.new("sendSignInLinkToEmail() is not implemented"));
    }
    setLanguageCode(languageCode) {
      if (languageCode == null) dart.nullFailed(I[30], 312, 39, "languageCode");
      dart.throw(new core.UnimplementedError.new("setLanguageCode() is not implemented"));
    }
    setSettings(opts) {
      let appVerificationDisabledForTesting = opts && 'appVerificationDisabledForTesting' in opts ? opts.appVerificationDisabledForTesting : null;
      let userAccessGroup = opts && 'userAccessGroup' in opts ? opts.userAccessGroup : null;
      dart.throw(new core.UnimplementedError.new("setSettings() is not implemented"));
    }
    setPersistence(persistence) {
      if (persistence == null) dart.nullFailed(I[30], 361, 43, "persistence");
      return async.async(dart.void, function* setPersistence() {
        dart.throw(new core.UnimplementedError.new("setPersistence() is not implemented"));
      });
    }
    signInAnonymously() {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInAnonymously() {
        dart.throw(new core.UnimplementedError.new("signInAnonymously() is not implemented"));
      });
    }
    signInWithCredential(credential) {
      if (credential == null) dart.nullFailed(I[30], 426, 20, "credential");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInWithCredential() {
        dart.throw(new core.UnimplementedError.new("signInWithCredential() is not implemented"));
      });
    }
    signInWithCustomToken(token) {
      if (token == null) dart.nullFailed(I[30], 444, 63, "token");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInWithCustomToken() {
        dart.throw(new core.UnimplementedError.new("signInWithCustomToken() is not implemented"));
      });
    }
    signInWithEmailAndPassword(email, password) {
      if (email == null) dart.nullFailed(I[30], 468, 12, "email");
      if (password == null) dart.nullFailed(I[30], 469, 12, "password");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInWithEmailAndPassword() {
        dart.throw(new core.UnimplementedError.new("signInWithEmailAndPassword() is not implemented"));
      });
    }
    signInWithEmailLink(email, emailLink) {
      if (email == null) dart.nullFailed(I[30], 490, 12, "email");
      if (emailLink == null) dart.nullFailed(I[30], 491, 12, "emailLink");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInWithEmailLink() {
        dart.throw(new core.UnimplementedError.new("signInWithEmailLink() is not implemented"));
      });
    }
    signInWithPhoneNumber(phoneNumber, applicationVerifier) {
      if (phoneNumber == null) dart.nullFailed(I[30], 506, 12, "phoneNumber");
      if (applicationVerifier == null) dart.nullFailed(I[30], 507, 38, "applicationVerifier");
      return async.async(platform_interface_confirmation_result.ConfirmationResultPlatform, function* signInWithPhoneNumber() {
        dart.throw(new core.UnimplementedError.new("signInWithPhoneNumber() is not implemented"));
      });
    }
    signInWithPopup(provider) {
      if (provider == null) dart.nullFailed(I[30], 519, 63, "provider");
      dart.throw(new core.UnimplementedError.new("signInWithPopup() is not implemented"));
    }
    signInWithRedirect(provider) {
      if (provider == null) dart.nullFailed(I[30], 527, 48, "provider");
      dart.throw(new core.UnimplementedError.new("signInWithRedirect() is not implemented"));
    }
    signOut() {
      return async.async(dart.void, function* signOut() {
        dart.throw(new core.UnimplementedError.new("signOut() is not implemented"));
      });
    }
    verifyPasswordResetCode(code) {
      if (code == null) dart.nullFailed(I[30], 557, 49, "code");
      dart.throw(new core.UnimplementedError.new("verifyPasswordResetCode() is not implemented"));
    }
    verifyPhoneNumber(opts) {
      let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
      if (phoneNumber == null) dart.nullFailed(I[30], 603, 21, "phoneNumber");
      let verificationCompleted = opts && 'verificationCompleted' in opts ? opts.verificationCompleted : null;
      if (verificationCompleted == null) dart.nullFailed(I[30], 604, 41, "verificationCompleted");
      let verificationFailed = opts && 'verificationFailed' in opts ? opts.verificationFailed : null;
      if (verificationFailed == null) dart.nullFailed(I[30], 605, 38, "verificationFailed");
      let codeSent = opts && 'codeSent' in opts ? opts.codeSent : null;
      if (codeSent == null) dart.nullFailed(I[30], 606, 28, "codeSent");
      let codeAutoRetrievalTimeout = opts && 'codeAutoRetrievalTimeout' in opts ? opts.codeAutoRetrievalTimeout : null;
      if (codeAutoRetrievalTimeout == null) dart.nullFailed(I[30], 607, 44, "codeAutoRetrievalTimeout");
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[10] || CT.C10;
      if (timeout == null) dart.nullFailed(I[30], 608, 14, "timeout");
      let forceResendingToken = opts && 'forceResendingToken' in opts ? opts.forceResendingToken : null;
      let autoRetrievedSmsCodeForTesting = opts && 'autoRetrievedSmsCodeForTesting' in opts ? opts.autoRetrievedSmsCodeForTesting : null;
      dart.throw(new core.UnimplementedError.new("verifyPhoneNumber() is not implemented"));
    }
  };
  (platform_interface_firebase_auth.FirebaseAuthPlatform.new = function(opts) {
    let appInstance = opts && 'appInstance' in opts ? opts.appInstance : null;
    this[appInstance$] = appInstance;
    platform_interface_firebase_auth.FirebaseAuthPlatform.__proto__.new.call(this, {token: platform_interface_firebase_auth.FirebaseAuthPlatform._token});
    ;
  }).prototype = platform_interface_firebase_auth.FirebaseAuthPlatform.prototype;
  dart.addTypeTests(platform_interface_firebase_auth.FirebaseAuthPlatform);
  dart.addTypeCaches(platform_interface_firebase_auth.FirebaseAuthPlatform);
  dart.setMethodSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_firebase_auth.FirebaseAuthPlatform.__proto__),
    delegateFor: dart.fnType(platform_interface_firebase_auth.FirebaseAuthPlatform, [], {}, {app: firebase_core.FirebaseApp}),
    setInitialValues: dart.fnType(platform_interface_firebase_auth.FirebaseAuthPlatform, [], {currentUser: dart.nullable(core.Map$(core.String, dart.dynamic)), languageCode: dart.nullable(core.String)}, {}),
    sendAuthChangesEvent: dart.fnType(dart.void, [core.String, dart.nullable(platform_interface_user.UserPlatform)]),
    useEmulator: dart.fnType(async.Future$(dart.void), [core.String, core.int]),
    applyActionCode: dart.fnType(async.Future$(dart.void), [core.String]),
    checkActionCode: dart.fnType(async.Future$(action_code_info.ActionCodeInfo), [core.String]),
    confirmPasswordReset: dart.fnType(async.Future$(dart.void), [core.String, core.String]),
    createUserWithEmailAndPassword: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [core.String, core.String]),
    fetchSignInMethodsForEmail: dart.fnType(async.Future$(core.List$(core.String)), [core.String]),
    getRedirectResult: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), []),
    isSignInWithEmailLink: dart.fnType(core.bool, [core.String]),
    authStateChanges: dart.fnType(async.Stream$(dart.nullable(platform_interface_user.UserPlatform)), []),
    idTokenChanges: dart.fnType(async.Stream$(dart.nullable(platform_interface_user.UserPlatform)), []),
    userChanges: dart.fnType(async.Stream$(dart.nullable(platform_interface_user.UserPlatform)), []),
    sendPasswordResetEmail: dart.fnType(async.Future$(dart.void), [core.String], [dart.nullable(action_code_settings.ActionCodeSettings)]),
    sendSignInLinkToEmail: dart.fnType(async.Future$(dart.void), [core.String, action_code_settings.ActionCodeSettings]),
    setLanguageCode: dart.fnType(async.Future$(dart.void), [core.String]),
    setSettings: dart.fnType(async.Future$(dart.void), [], {appVerificationDisabledForTesting: dart.nullable(core.bool), userAccessGroup: dart.nullable(core.String)}, {}),
    setPersistence: dart.fnType(async.Future$(dart.void), [types.Persistence]),
    signInAnonymously: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), []),
    signInWithCredential: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [auth_credential.AuthCredential]),
    signInWithCustomToken: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [core.String]),
    signInWithEmailAndPassword: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [core.String, core.String]),
    signInWithEmailLink: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [core.String, core.String]),
    signInWithPhoneNumber: dart.fnType(async.Future$(platform_interface_confirmation_result.ConfirmationResultPlatform), [core.String, platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform]),
    signInWithPopup: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [auth_provider.AuthProvider]),
    signInWithRedirect: dart.fnType(async.Future$(dart.void), [auth_provider.AuthProvider]),
    signOut: dart.fnType(async.Future$(dart.void), []),
    verifyPasswordResetCode: dart.fnType(async.Future$(core.String), [core.String]),
    verifyPhoneNumber: dart.fnType(async.Future$(dart.void), [], {autoRetrievedSmsCodeForTesting: dart.nullable(core.String), forceResendingToken: dart.nullable(core.int), timeout: core.Duration}, {codeAutoRetrievalTimeout: dart.fnType(dart.void, [core.String]), codeSent: dart.fnType(dart.void, [core.String, dart.nullable(core.int)]), phoneNumber: core.String, verificationCompleted: dart.fnType(dart.void, [phone_auth.PhoneAuthCredential]), verificationFailed: dart.fnType(dart.void, [firebase_auth_exception.FirebaseAuthException])})
  }));
  dart.setGetterSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_firebase_auth.FirebaseAuthPlatform.__proto__),
    app: firebase_core.FirebaseApp,
    currentUser: dart.nullable(platform_interface_user.UserPlatform),
    languageCode: dart.nullable(core.String)
  }));
  dart.setSetterSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ({
    __proto__: dart.getSetters(platform_interface_firebase_auth.FirebaseAuthPlatform.__proto__),
    currentUser: dart.nullable(platform_interface_user.UserPlatform)
  }));
  dart.setLibraryUri(platform_interface_firebase_auth.FirebaseAuthPlatform, I[31]);
  dart.setFieldSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ({
    __proto__: dart.getFields(platform_interface_firebase_auth.FirebaseAuthPlatform.__proto__),
    appInstance: dart.finalFieldType(dart.nullable(firebase_core.FirebaseApp))
  }));
  dart.defineLazy(platform_interface_firebase_auth.FirebaseAuthPlatform, {
    /*platform_interface_firebase_auth.FirebaseAuthPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*platform_interface_firebase_auth.FirebaseAuthPlatform._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, false);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  method_channel_firebase_auth.MethodChannelFirebaseAuth = class MethodChannelFirebaseAuth extends platform_interface_firebase_auth.FirebaseAuthPlatform {
    get currentUser() {
      return this[currentUser];
    }
    set currentUser(value) {
      this[currentUser] = value;
    }
    get languageCode() {
      return this[languageCode];
    }
    set languageCode(value) {
      this[languageCode] = value;
    }
    static get nextMethodChannelHandleId() {
      let t13;
      t13 = method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelHandleId;
      method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelHandleId = dart.notNull(t13) + 1;
      return t13;
    }
    static get instance() {
      return new method_channel_firebase_auth.MethodChannelFirebaseAuth.__();
    }
    sendAuthChangesEvent(appName, userPlatform) {
      if (appName == null) dart.nullFailed(I[29], 117, 36, "appName");
      if (!(method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners[$_get](appName) != null)) dart.assertFailed(null, I[29], 118, 12, "_userChangesListeners[appName] != null");
      dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners[$_get](appName)).add(userPlatform);
    }
    [_handleAuthStateChangesListener]($arguments) {
      if ($arguments == null) dart.nullFailed(I[29], 127, 27, "arguments");
      return async.async(dart.void, function* _handleAuthStateChangesListener() {
        let appName = core.String.as($arguments[$_get]("appName"));
        let streamController = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._authStateChangesListeners[$_get](appName));
        let instance = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelFirebaseAuthInstances[$_get](appName));
        let userMap = T.MapN().as($arguments[$_get]("user"));
        if (userMap == null) {
          instance.currentUser = null;
          streamController.add(null);
        } else {
          let user = new method_channel_user.MethodChannelUser.new(instance, userMap[$cast](core.String, dart.dynamic));
          instance.currentUser = user;
          streamController.add(instance.currentUser);
        }
      });
    }
    [_handleIdTokenChangesListener]($arguments) {
      if ($arguments == null) dart.nullFailed(I[29], 156, 27, "arguments");
      return async.async(dart.void, function* _handleIdTokenChangesListener() {
        let appName = core.String.as($arguments[$_get]("appName"));
        let idTokenStreamController = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._idTokenChangesListeners[$_get](appName));
        let userChangesStreamController = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners[$_get](appName));
        let instance = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelFirebaseAuthInstances[$_get](appName));
        let userMap = T.MapN().as($arguments[$_get]("user"));
        if (userMap == null) {
          instance.currentUser = null;
          idTokenStreamController.add(null);
          userChangesStreamController.add(null);
        } else {
          let user = new method_channel_user.MethodChannelUser.new(instance, userMap[$cast](core.String, dart.dynamic));
          instance.currentUser = user;
          idTokenStreamController.add(user);
          userChangesStreamController.add(user);
        }
      });
    }
    [_handlePhoneVerificationCompleted]($arguments) {
      if ($arguments == null) dart.nullFailed(I[29], 186, 27, "arguments");
      return async.async(dart.void, function* _handlePhoneVerificationCompleted() {
        let t14, t13;
        let handle = core.int.as($arguments[$_get]("handle"));
        let token = core.int.as($arguments[$_get]("token"));
        let smsCode = core.String.as($arguments[$_get]("smsCode"));
        let phoneAuthCredential = phone_auth.PhoneAuthProvider.credentialFromToken(token, {smsCode: smsCode});
        let callbacks = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._phoneAuthCallbacks[$_get](handle));
        t13 = callbacks;
        t14 = phoneAuthCredential;
        t13.verificationCompleted(t14);
      });
    }
    [_handlePhoneVerificationFailed]($arguments) {
      if ($arguments == null) dart.nullFailed(I[29], 202, 27, "arguments");
      return async.async(dart.void, function* _handlePhoneVerificationFailed() {
        let t14, t13;
        let handle = core.int.as($arguments[$_get]("handle"));
        let error = core.Map.as($arguments[$_get]("error"));
        let details = T.MapN().as(error[$_get]("details"));
        let callbacks = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._phoneAuthCallbacks[$_get](handle));
        let exception = new firebase_auth_exception.FirebaseAuthException.new({message: T.StringN().as(details != null ? details[$_get]("message") : error[$_get]("message")), code: core.String.as(details != null ? details[$_get]("code") : "unknown")});
        t13 = callbacks;
        t14 = exception;
        t13.verificationFailed(t14);
      });
    }
    [_handlePhoneCodeSent]($arguments) {
      if ($arguments == null) dart.nullFailed(I[29], 219, 27, "arguments");
      return async.async(dart.void, function* _handlePhoneCodeSent() {
        let t15, t14, t13;
        let handle = core.int.as($arguments[$_get]("handle"));
        let verificationId = core.String.as($arguments[$_get]("verificationId"));
        let forceResendingToken = T.intN().as($arguments[$_get]("forceResendingToken"));
        let callbacks = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._phoneAuthCallbacks[$_get](handle));
        t13 = callbacks;
        t14 = verificationId;
        t15 = forceResendingToken;
        t13.codeSent(t14, t15);
      });
    }
    [_handlePhoneCodeAutoRetrievalTimeout]($arguments) {
      if ($arguments == null) dart.nullFailed(I[29], 230, 27, "arguments");
      return async.async(dart.void, function* _handlePhoneCodeAutoRetrievalTimeout() {
        let t14, t13;
        let handle = core.int.as($arguments[$_get]("handle"));
        let verificationId = core.String.as($arguments[$_get]("verificationId"));
        let callbacks = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._phoneAuthCallbacks[$_get](handle));
        t13 = callbacks;
        t14 = verificationId;
        t13.codeAutoRetrievalTimeout(t14);
      });
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      if (app == null) dart.nullFailed(I[29], 244, 58, "app");
      return method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelFirebaseAuthInstances[$putIfAbsent](app.name, dart.fn(() => new method_channel_firebase_auth.MethodChannelFirebaseAuth.new({app: app}), T.VoidToMethodChannelFirebaseAuth()));
    }
    setInitialValues(opts) {
      let currentUser = opts && 'currentUser' in opts ? opts.currentUser : null;
      let languageCode = opts && 'languageCode' in opts ? opts.languageCode : null;
      if (currentUser != null) {
        this.currentUser = new method_channel_user.MethodChannelUser.new(this, currentUser);
      }
      this.languageCode = languageCode;
      return this;
    }
    useEmulator(host, port) {
      if (host == null) dart.nullFailed(I[29], 264, 35, "host");
      if (port == null) dart.nullFailed(I[29], 264, 45, "port");
      return async.async(dart.void, (function* useEmulator() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#useEmulator", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "host", host, "port", port]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    applyActionCode(code) {
      if (code == null) dart.nullFailed(I[29], 277, 39, "code");
      return async.async(dart.void, (function* applyActionCode() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#applyActionCode", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "code", code]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    checkActionCode(code) {
      if (code == null) dart.nullFailed(I[29], 290, 49, "code");
      return async.async(action_code_info.ActionCodeInfo, (function* checkActionCode() {
        try {
          let result = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#checkActionCode", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "code", code])));
          return new action_code_info.ActionCodeInfo.new({operation: core.int.as(result[$_get]("operation")), data: T.LinkedHashMapOfString$dynamic().from(core.Map.as(result[$_get]("data")))});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    confirmPasswordReset(code, newPassword) {
      if (code == null) dart.nullFailed(I[29], 309, 44, "code");
      if (newPassword == null) dart.nullFailed(I[29], 309, 57, "newPassword");
      return async.async(dart.void, (function* confirmPasswordReset() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#confirmPasswordReset", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "code", code, "newPassword", newPassword]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    createUserWithEmailAndPassword(email, password) {
      if (email == null) dart.nullFailed(I[29], 324, 14, "email");
      if (password == null) dart.nullFailed(I[29], 324, 28, "password");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* createUserWithEmailAndPassword() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#createUserWithEmailAndPassword", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "email", email, "password", password])));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    fetchSignInMethodsForEmail(email) {
      if (email == null) dart.nullFailed(I[29], 345, 58, "email");
      return async.async(T.ListOfString(), (function* fetchSignInMethodsForEmail() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#fetchSignInMethodsForEmail", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "email", email])));
          return T.ListOfString().from(core.Iterable.as(data[$_get]("providers")));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    authStateChanges() {
      return dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._authStateChangesListeners[$_get](this.app.name)).stream;
    }
    idTokenChanges() {
      return dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._idTokenChangesListeners[$_get](this.app.name)).stream;
    }
    userChanges() {
      return dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners[$_get](this.app.name)).stream;
    }
    sendPasswordResetEmail(email, actionCodeSettings = null) {
      if (email == null) dart.nullFailed(I[29], 374, 12, "email");
      return async.async(dart.void, (function* sendPasswordResetEmail() {
        let t19;
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#sendPasswordResetEmail", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "email", email, "actionCodeSettings", (t19 = actionCodeSettings, t19 == null ? null : t19.asMap())]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    sendSignInLinkToEmail(email, actionCodeSettings) {
      if (email == null) dart.nullFailed(I[29], 391, 12, "email");
      if (actionCodeSettings == null) dart.nullFailed(I[29], 392, 24, "actionCodeSettings");
      return async.async(dart.void, (function* sendSignInLinkToEmail() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#sendSignInLinkToEmail", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "email", email, "actionCodeSettings", actionCodeSettings.asMap()]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    setLanguageCode(languageCode) {
      if (languageCode == null) dart.nullFailed(I[29], 407, 39, "languageCode");
      return async.async(dart.void, (function* setLanguageCode() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#setLanguageCode", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "languageCode", languageCode])));
          this.languageCode = T.StringN().as(data[$_get]("languageCode"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    setSettings(opts) {
      let appVerificationDisabledForTesting = opts && 'appVerificationDisabledForTesting' in opts ? opts.appVerificationDisabledForTesting : null;
      let userAccessGroup = opts && 'userAccessGroup' in opts ? opts.userAccessGroup : null;
      return async.async(dart.void, (function* setSettings() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.dynamic, "Auth#setSettings", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "appVerificationDisabledForTesting", appVerificationDisabledForTesting, "userAccessGroup", userAccessGroup]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    setPersistence(persistence) {
      if (persistence == null) dart.nullFailed(I[29], 439, 43, "persistence");
      dart.throw(new core.UnimplementedError.new("setPersistence() is only supported on web based platforms"));
    }
    signInAnonymously() {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInAnonymously() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInAnonymously", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name])));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithCredential(credential) {
      if (credential == null) dart.nullFailed(I[29], 465, 20, "credential");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithCredential() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInWithCredential", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "credential", credential.asMap()])));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithCustomToken(token) {
      if (token == null) dart.nullFailed(I[29], 486, 63, "token");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithCustomToken() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInWithCustomToken", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "token", token])));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithEmailAndPassword(email, password) {
      if (email == null) dart.nullFailed(I[29], 507, 14, "email");
      if (password == null) dart.nullFailed(I[29], 507, 28, "password");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithEmailAndPassword() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInWithEmailAndPassword", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "email", email, "password", password])));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithEmailLink(email, emailLink) {
      if (email == null) dart.nullFailed(I[29], 529, 14, "email");
      if (emailLink == null) dart.nullFailed(I[29], 529, 28, "emailLink");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithEmailLink() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInWithEmailLink", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "email", email, "emailLink", emailLink])));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithPopup(provider) {
      if (provider == null) dart.nullFailed(I[29], 550, 63, "provider");
      dart.throw(new core.UnimplementedError.new("signInWithPopup() is only supported on web based platforms"));
    }
    signInWithRedirect(provider) {
      if (provider == null) dart.nullFailed(I[29], 557, 48, "provider");
      dart.throw(new core.UnimplementedError.new("signInWithRedirect() is only supported on web based platforms"));
    }
    signOut() {
      return async.async(dart.void, (function* signOut() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#signOut", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name]));
          this.currentUser = null;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyPasswordResetCode(code) {
      if (code == null) dart.nullFailed(I[29], 577, 49, "code");
      return async.async(core.String, (function* verifyPasswordResetCode() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#verifyPasswordResetCode", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "code", code])));
          return T.FutureOrOfString().as(data[$_get]("email"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyPhoneNumber(opts) {
      let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
      if (phoneNumber == null) dart.nullFailed(I[29], 594, 21, "phoneNumber");
      let verificationCompleted = opts && 'verificationCompleted' in opts ? opts.verificationCompleted : null;
      if (verificationCompleted == null) dart.nullFailed(I[29], 595, 41, "verificationCompleted");
      let verificationFailed = opts && 'verificationFailed' in opts ? opts.verificationFailed : null;
      if (verificationFailed == null) dart.nullFailed(I[29], 596, 38, "verificationFailed");
      let codeSent = opts && 'codeSent' in opts ? opts.codeSent : null;
      if (codeSent == null) dart.nullFailed(I[29], 597, 28, "codeSent");
      let codeAutoRetrievalTimeout = opts && 'codeAutoRetrievalTimeout' in opts ? opts.codeAutoRetrievalTimeout : null;
      if (codeAutoRetrievalTimeout == null) dart.nullFailed(I[29], 598, 44, "codeAutoRetrievalTimeout");
      let autoRetrievedSmsCodeForTesting = opts && 'autoRetrievedSmsCodeForTesting' in opts ? opts.autoRetrievedSmsCodeForTesting : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[10] || CT.C10;
      if (timeout == null) dart.nullFailed(I[29], 600, 14, "timeout");
      let forceResendingToken = opts && 'forceResendingToken' in opts ? opts.forceResendingToken : null;
      return async.async(dart.void, (function* verifyPhoneNumber() {
        if (platform.defaultTargetPlatform == platform.TargetPlatform.macOS) {
          dart.throw(new core.UnimplementedError.new("verifyPhoneNumber() is not available on MacOS platforms."));
        }
        let handle = method_channel_firebase_auth.MethodChannelFirebaseAuth.nextMethodChannelHandleId;
        method_channel_firebase_auth.MethodChannelFirebaseAuth._phoneAuthCallbacks[$_set](handle, new phone_auth_callbacks.PhoneAuthCallbacks.new(verificationCompleted, verificationFailed, codeSent, codeAutoRetrievalTimeout));
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#verifyPhoneNumber", new (T.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "handle", handle, "phoneNumber", phoneNumber, "timeout", timeout.inMilliseconds, "forceResendingToken", forceResendingToken, "autoRetrievedSmsCodeForTesting", autoRetrievedSmsCodeForTesting]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(exception$.convertPlatformException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (method_channel_firebase_auth.MethodChannelFirebaseAuth.__ = function() {
    this[currentUser] = null;
    this[languageCode] = null;
    method_channel_firebase_auth.MethodChannelFirebaseAuth.__proto__.new.call(this, {appInstance: null});
    ;
  }).prototype = method_channel_firebase_auth.MethodChannelFirebaseAuth.prototype;
  (method_channel_firebase_auth.MethodChannelFirebaseAuth.new = function(opts) {
    let app = opts && 'app' in opts ? opts.app : null;
    if (app == null) dart.nullFailed(I[29], 65, 51, "app");
    this[currentUser] = null;
    this[languageCode] = null;
    method_channel_firebase_auth.MethodChannelFirebaseAuth.__proto__.new.call(this, {appInstance: app});
    method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#registerChangeListeners", new (T.IdentityMapOfString$dynamic()).from(["appName", app.name]));
    method_channel_firebase_auth.MethodChannelFirebaseAuth._authStateChangesListeners[$_set](app.name, T.StreamControllerOfUserPlatformN().broadcast());
    method_channel_firebase_auth.MethodChannelFirebaseAuth._idTokenChangesListeners[$_set](app.name, T.StreamControllerOfUserPlatformN().broadcast());
    method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners[$_set](app.name, T.StreamControllerOfUserPlatformN().broadcast());
    if (dart.test(method_channel_firebase_auth.MethodChannelFirebaseAuth._initialized)) return;
    method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.setMethodCallHandler(dart.fn(call => {
      if (call == null) dart.nullFailed(I[29], 85, 46, "call");
      return async.async(dart.void, (function*() {
        let $arguments = core.Map.as(call.arguments);
        switch (call.method) {
          case "Auth#authStateChanges":
          {
            return this[_handleAuthStateChangesListener]($arguments);
          }
          case "Auth#idTokenChanges":
          {
            return this[_handleIdTokenChangesListener]($arguments);
          }
          case "Auth#phoneVerificationCompleted":
          {
            return this[_handlePhoneVerificationCompleted]($arguments);
          }
          case "Auth#phoneVerificationFailed":
          {
            return this[_handlePhoneVerificationFailed]($arguments);
          }
          case "Auth#phoneCodeSent":
          {
            return this[_handlePhoneCodeSent]($arguments);
          }
          case "Auth#phoneCodeAutoRetrievalTimeout":
          {
            return this[_handlePhoneCodeAutoRetrievalTimeout]($arguments);
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new(dart.str(call.method) + " has not been implemented"));
          }
        }
      }).bind(this));
    }, T.MethodCallToFutureOfvoid()));
    method_channel_firebase_auth.MethodChannelFirebaseAuth._initialized = true;
  }).prototype = method_channel_firebase_auth.MethodChannelFirebaseAuth.prototype;
  dart.addTypeTests(method_channel_firebase_auth.MethodChannelFirebaseAuth);
  dart.addTypeCaches(method_channel_firebase_auth.MethodChannelFirebaseAuth);
  dart.setMethodSignature(method_channel_firebase_auth.MethodChannelFirebaseAuth, () => ({
    __proto__: dart.getMethods(method_channel_firebase_auth.MethodChannelFirebaseAuth.__proto__),
    [_handleAuthStateChangesListener]: dart.fnType(async.Future$(dart.void), [core.Map]),
    [_handleIdTokenChangesListener]: dart.fnType(async.Future$(dart.void), [core.Map]),
    [_handlePhoneVerificationCompleted]: dart.fnType(async.Future$(dart.void), [core.Map]),
    [_handlePhoneVerificationFailed]: dart.fnType(async.Future$(dart.void), [core.Map]),
    [_handlePhoneCodeSent]: dart.fnType(async.Future$(dart.void), [core.Map]),
    [_handlePhoneCodeAutoRetrievalTimeout]: dart.fnType(async.Future$(dart.void), [core.Map]),
    setInitialValues: dart.fnType(method_channel_firebase_auth.MethodChannelFirebaseAuth, [], {currentUser: dart.nullable(core.Map$(core.String, dart.dynamic)), languageCode: dart.nullable(core.String)}, {})
  }));
  dart.setLibraryUri(method_channel_firebase_auth.MethodChannelFirebaseAuth, I[32]);
  dart.setFieldSignature(method_channel_firebase_auth.MethodChannelFirebaseAuth, () => ({
    __proto__: dart.getFields(method_channel_firebase_auth.MethodChannelFirebaseAuth.__proto__),
    currentUser: dart.fieldType(dart.nullable(platform_interface_user.UserPlatform)),
    languageCode: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(method_channel_firebase_auth.MethodChannelFirebaseAuth, {
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._initialized*/get _initialized() {
      return false;
    },
    set _initialized(_) {},
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelHandleId*/get _methodChannelHandleId() {
      return 0;
    },
    set _methodChannelHandleId(_) {},
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth.channel*/get channel() {
      return C[11] || CT.C11;
    },
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelFirebaseAuthInstances*/get _methodChannelFirebaseAuthInstances() {
      return new (T.IdentityMapOfString$MethodChannelFirebaseAuth()).new();
    },
    set _methodChannelFirebaseAuthInstances(_) {},
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._authStateChangesListeners*/get _authStateChangesListeners() {
      return new (T.IdentityMapOfString$StreamControllerOfUserPlatformN()).new();
    },
    set _authStateChangesListeners(_) {},
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._idTokenChangesListeners*/get _idTokenChangesListeners() {
      return new (T.IdentityMapOfString$StreamControllerOfUserPlatformN()).new();
    },
    set _idTokenChangesListeners(_) {},
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners*/get _userChangesListeners() {
      return new (T.IdentityMapOfString$StreamControllerOfUserPlatformN()).new();
    },
    set _userChangesListeners(_) {},
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._phoneAuthCallbacks*/get _phoneAuthCallbacks() {
      return new (T.IdentityMapOfint$PhoneAuthCallbacks()).new();
    },
    set _phoneAuthCallbacks(_) {}
  }, false);
  var verificationId$0 = dart.privateName(platform_interface_confirmation_result, "ConfirmationResultPlatform.verificationId");
  platform_interface_confirmation_result.ConfirmationResultPlatform = class ConfirmationResultPlatform extends plugin_platform_interface.PlatformInterface {
    get verificationId() {
      return this[verificationId$0];
    }
    set verificationId(value) {
      super.verificationId = value;
    }
    static verifyExtends(instance) {
      if (instance == null) dart.nullFailed(I[33], 20, 56, "instance");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_confirmation_result.ConfirmationResultPlatform._token);
    }
    confirm(verificationCode) {
      if (verificationCode == null) dart.nullFailed(I[33], 32, 49, "verificationCode");
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* confirm() {
        dart.throw(new core.UnimplementedError.new("confirm() is not implemented"));
      });
    }
  };
  (platform_interface_confirmation_result.ConfirmationResultPlatform.new = function(verificationId) {
    if (verificationId == null) dart.nullFailed(I[33], 16, 35, "verificationId");
    this[verificationId$0] = verificationId;
    platform_interface_confirmation_result.ConfirmationResultPlatform.__proto__.new.call(this, {token: platform_interface_confirmation_result.ConfirmationResultPlatform._token});
    ;
  }).prototype = platform_interface_confirmation_result.ConfirmationResultPlatform.prototype;
  dart.addTypeTests(platform_interface_confirmation_result.ConfirmationResultPlatform);
  dart.addTypeCaches(platform_interface_confirmation_result.ConfirmationResultPlatform);
  dart.setMethodSignature(platform_interface_confirmation_result.ConfirmationResultPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_confirmation_result.ConfirmationResultPlatform.__proto__),
    confirm: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [core.String])
  }));
  dart.setLibraryUri(platform_interface_confirmation_result.ConfirmationResultPlatform, I[34]);
  dart.setFieldSignature(platform_interface_confirmation_result.ConfirmationResultPlatform, () => ({
    __proto__: dart.getFields(platform_interface_confirmation_result.ConfirmationResultPlatform.__proto__),
    verificationId: dart.finalFieldType(core.String)
  }));
  dart.defineLazy(platform_interface_confirmation_result.ConfirmationResultPlatform, {
    /*platform_interface_confirmation_result.ConfirmationResultPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  dart.trackLibraries("packages/firebase_auth_platform_interface/src/types.dart", {
    "package:firebase_auth_platform_interface/src/types.dart": types,
    "package:firebase_auth_platform_interface/src/providers/twitter_auth.dart": twitter_auth,
    "package:firebase_auth_platform_interface/src/providers/phone_auth.dart": phone_auth,
    "package:firebase_auth_platform_interface/src/providers/oauth.dart": oauth,
    "package:firebase_auth_platform_interface/src/providers/google_auth.dart": google_auth,
    "package:firebase_auth_platform_interface/src/providers/github_auth.dart": github_auth,
    "package:firebase_auth_platform_interface/src/providers/facebook_auth.dart": facebook_auth,
    "package:firebase_auth_platform_interface/src/providers/email_auth.dart": email_auth,
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_recaptcha_verifier_factory.dart": platform_interface_recaptcha_verifier_factory,
    "package:firebase_auth_platform_interface/src/method_channel/utils/phone_auth_callbacks.dart": phone_auth_callbacks,
    "package:firebase_auth_platform_interface/src/method_channel/utils/exception.dart": exception$,
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_user.dart": platform_interface_user,
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_user_credential.dart": platform_interface_user_credential,
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_user_credential.dart": method_channel_user_credential,
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_user.dart": method_channel_user,
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_firebase_auth.dart": method_channel_firebase_auth,
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_firebase_auth.dart": platform_interface_firebase_auth,
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_confirmation_result.dart": platform_interface_confirmation_result,
    "package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart": firebase_auth_platform_interface
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["types.dart","providers/twitter_auth.dart","providers/oauth.dart","providers/phone_auth.dart","providers/google_auth.dart","providers/github_auth.dart","providers/facebook_auth.dart","providers/email_auth.dart","platform_interface/platform_interface_recaptcha_verifier_factory.dart","method_channel/utils/phone_auth_callbacks.dart","method_channel/utils/exception.dart","platform_interface/platform_interface_user.dart","platform_interface/platform_interface_user_credential.dart","method_channel/method_channel_user_credential.dart","method_channel/method_channel_user.dart","platform_interface/platform_interface_firebase_auth.dart","method_channel/method_channel_firebase_auth.dart","platform_interface/platform_interface_confirmation_result.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/firebase_auth_platform_interface/src/types.dart.lib.js"}');
  // Exports:
  return {
    src__types: types,
    src__providers__twitter_auth: twitter_auth,
    src__providers__phone_auth: phone_auth,
    src__providers__oauth: oauth,
    src__providers__google_auth: google_auth,
    src__providers__github_auth: github_auth,
    src__providers__facebook_auth: facebook_auth,
    src__providers__email_auth: email_auth,
    src__platform_interface__platform_interface_recaptcha_verifier_factory: platform_interface_recaptcha_verifier_factory,
    src__method_channel__utils__phone_auth_callbacks: phone_auth_callbacks,
    src__method_channel__utils__exception: exception$,
    src__platform_interface__platform_interface_user: platform_interface_user,
    src__platform_interface__platform_interface_user_credential: platform_interface_user_credential,
    src__method_channel__method_channel_user_credential: method_channel_user_credential,
    src__method_channel__method_channel_user: method_channel_user,
    src__method_channel__method_channel_firebase_auth: method_channel_firebase_auth,
    src__platform_interface__platform_interface_firebase_auth: platform_interface_firebase_auth,
    src__platform_interface__platform_interface_confirmation_result: platform_interface_confirmation_result,
    firebase_auth_platform_interface: firebase_auth_platform_interface
  };
}));

//# sourceMappingURL=types.dart.lib.js.map
